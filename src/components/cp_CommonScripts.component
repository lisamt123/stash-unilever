<apex:component controller="cp_PlannerController">

	<script type="text/javascript">

        var _hasGlobal = true;
        var _defaultValuesChecked = false;
        var _formattedPrevMonth = '';
        var _formattedNextMonth = '';
                    
        jQuery(document).ready(function($)
        {

            $filterfieldname1 = j$('#filter-set-1').children().find('.filter-field-name');
            $filteroperatortype1 = j$('#filter-set-1').children().find('.filter-operator-type');
            $filterfieldvalue1 = j$('#filter-set-1').children().find('.filter-field-value');
            $selectfilterfieldvalue1 = j$('#filter-set-1').children().find('.select-filter-field-value');
            $altfilterfieldvalue1 = j$('#filter-set-1').children().find('.real-date-value');

            $marketOptions = j$('[id$=market-options]');
            $countryOptions = j$('[id$=country-options]');
            $categoryOptions = j$('[id$=categories-options]');
            $functionOptions = j$('[id$=functions-options]');
            $uleOptions = $('[id$=ule-options]');

            $globalCheckbox = j$('[id$=btn-global-event]');
            $defaultFilterCheckbox = j$('[id$=default_filter_set]');
            
            objName = 'cp_Event__c';
            objText = 'Event';
            startdate = 'StartDate__c';
            endDate = 'EndDate__c';
            whereCls = '';
            ffName1 = '';
            ffOpp1 = '';
            ffVal1 = '';
            ffAlt1 = '';
            ffName2 = '';
            ffOpp2 = '';
            ffVal2 = '';
            ffAlt2 = '';
            conjunctive = '';

            // Create empty arrays for all filter options
            $plannerSelectedOptions = [];
            $uleSelectedOptions =[];
   
            if(!isResetCookiePresent())
            {
                $plannerSelectedOptions = ['{!defaultPreference.Planner__c}'];
            }
            defaultFilterSet = false;
            secondFilterSet = false;

            var exdate = new Date();
            var exdays = 10;
            exdate.setDate(exdate.getDate() - exdays);
            var c_value=escape('onlyOnce') + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
            document.cookie='onlyFilterDataCookie' + "=" + c_value; 
            applicationInit();

        });
        
        function applicationInit()
        {
            saveException = '';
            viewKey = ""; // Represents the current view of the Calendar i.e Object, Fields and Filter
            cachedEvents = "";
            isLoading = '';
            currentViewStart = '';
            currentViewEnd = '';
            _conditions = '';
            buildByDefault = false;
                
            function removeFilterDefault()
            {
                currentFilter = new filterWrapper();
            }

            cp_PlannerController.getPlannerOptions(function(selectValues, event)
            {
                // Loop through each option and assign it to the select List
                j$.each(selectValues, function(index, record)
                {
                    // The select lists with two sub-lists
                    if (record.plannerSubType == 'Cluster' || record.plannerSubType == 'MCO')
                    {
                        $marketOptions.find('#'+record.plannerSubType)
                            .append(j$("<li>")
                            .append(j$("<span>"+record.Label+"</span>"))
                            .append(j$("<input type='checkbox' class='filterCheckbox' data-type='"+record.plannerSubType+"'>")
                            .attr("value",record.Value)));
                    }
                    else if (record.plannerSubType == 'Function' || record.plannerSubType == 'Expertise')
                    {   
                        $functionOptions.find('#'+record.plannerSubType)
                            .append(j$("<li>")
                            .append(j$("<span>"+record.Label+"</span>"))
                            .append(j$("<input type='checkbox' class='filterCheckbox' data-type='"+record.plannerSubType+"'>")
                            .attr("value",record.Value)));
                    }
                    else if (record.plannerSubType == 'Category')
                    {
                        $categoryOptions.find('#categoryList')
                            .append(j$("<li>")
                            .append(j$("<span>"+record.Label+"</span>"))
                            .append(j$("<input type='checkbox' class='filterCheckbox' data-type='category'>")
                            .attr("value",record.Value)));
                    }      
                    else if (record.plannerSubType == 'Country')
                    {
                        $countryOptions.find('#countryList')
                            .append(j$("<li>")
                            .append(j$("<span>"+record.Label+"</span>"))
                            .append(j$("<input type='checkbox' class='filterCheckbox' data-type='country'>")
                            .attr("value",record.Value))); 
                    }
                });


                checkUserDefaultOptions();   
                bindCheckbox();

            },  {escape: false});
        
            // Create the Active ULE Memebers(Spokesperson) select box from salesforce Contact object 
            cp_PlannerController.getActiveULE(function(selectValues, event) 
            {
                // Loop through each option and assign it to the select List
                //alert('selectValues: '+selectValues);
                j$.each(selectValues, function(index, record)
                {
                    $uleOptions.find('#uleList')
                        .append(j$("<li>")
                        .append(j$("<span>"+record.Full_Name__c+"</span>"))
                        .append(j$("<input type='checkbox' class='filterCheckbox' data-type='ule'>")
                        .attr("value",record.Id)));
                
                });

                checkUserDefaultOptions();   
                bindCheckbox();

            },  {escape: false});

            checkUserDefaultOptions();   
            
            j$('#btn-show-filter').addClass('disabled');
            j$('#btn-print').addClass('disabled');
            setDashboard('display','Loading Events ...');
            if (defaultFilterSet)
            {
                $defaultFilterCheckbox.attr('checked','true');
                j$('#btn-clear-filter').addClass('disabled').show();
                _conditions = ' '+ whereCls;
            }

            // On Page load Fetch the fields for the selected Object
            if(isResetCookiePresent())
            {
                var exdate1 = new Date();
                var exdays1 = 10;
                exdate1.setDate(exdate1.getDate() + exdays1);
                var only_once_c_value = escape('onlyOnce') + ((exdays1==null) ? "" : "; expires=" + exdate1.toUTCString());
                document.cookie = 'onlyFilterDataCookie' + "=" + only_once_c_value;
            }

            cp_PlannerController.getAllFieldList(true, function(selectValues, event)
            {
                j$.each(selectValues, function(index, option)
                {
                    $filterfieldname1
                        .append(j$("<option></option>")
                        .attr("value",option.value)
                        .text(option.label)); 
                });

                //Christophe: fix. this has to be put in the callback so that the select has been filled out with all the values.
                firstFilterField = j$("#filter-set-1 option:first").val();

                //then we set the first fields.
                setFilterExpressionFields('#filter-set-1');
                                            
            },  {escape: false});



            if ('{!$CurrentPage.Name}' == 'cp_PoaP')
            {
                j$('#btn-show-filter').removeClass('disabled');
                j$('#btn-print').removeClass('disabled');
            }

            //  * calendar filter functionality 
            _DATE = 'DATE';  
            _BOOLEAN = 'BOOLEAN';
            _PICKLIST = 'PICKLIST';
            _MULTIPICKLIST = 'MULTIPICKLIST';
            _DATETIME = 'DATETIME';
            _INTEGER = 'INTEGER';
            _STRING = 'STRING';
            _CURRENCY = 'CURRENCY';
                
            j$('#btn-reset-filter').click(function(e)
            {
                e.preventDefault();
                resetFilterUI();

                if(typeof (window.setCustomFunction) == 'function')
                { 
                    setCustomFunction('false'); 
                }
                
            });    

            j$('#resetAll').click(function(e)
            {
                e.preventDefault();
                resetFilterUI();
                resetAll();
            });    

            
            function resetFilterUI()
            {
                j$('[id$=filter-form]').find('input[text], input[hidden], select').each(function()
                {
                    j$(this).val('');
                });
                
                $defaultFilterCheckbox.removeAttr('checked');
                
                j$('#filter-set-1').removeClass('active')      
                                
                $filterfieldname1.val(firstFilterField);

                j$('#add-criteria').show();  
                j$('#remove-criteria').hide();

                setTimeout(function(){ setFilterExpressionFields('#filter-set-1'); }, 500);
            }
            
            j$('#btn-clear-filter').click(function(e)
            {
                e.preventDefault();
                _conditions = '';
                
                j$('[id$=filter-form]').find('input[text], input[hidden], select').each(function()
                {
                    j$(this).val('');
                });
                    
                //remove filter
                removeFilterDefault();
                $defaultFilterCheckbox.removeAttr('checked');
                
                 j$('#filter-set-1')
                    .removeClass('active')
                    .addClass('inactive');
                    
                setFilterExpressionFields('#filter-set-1');                    
                viewKey = '';
                j$('#calendar').fullCalendar( 'refetchEvents' );
                j$(this).hide();      
                
                if(typeof (window.setCustomFunction) == 'function')
                { 
                    setCustomFunction('false'); 
                }
            });    
            
            // dynamically delegate the event handler for the filter expression
            j$('[id$=filter-form]').on('change', '.filter-field-name', filterFieldNameHandler);  
            
            // Handle Default filter checkbox 
            j$('[id$=filter-form]').on('change', '#filter-criteria-wrapper', filterDefaultCheckboxHandler); 
         
            // filter dialog btn set up 
            j$('#btn-show-filter').click(function(e)
            {
               if(!j$('#btn-show-filter').is('.disabled'))
               {
                    e.preventDefault();
                    j$('#filter-set-1').addClass('active');

                    j$('#filter-dialog').dialog({
                        modal : true,
                        title : 'Filter Event',
                        width : 840,
                        close : rollBackFilter
                    });

                }

            });
        
            // form validation 
            j$('[id$=filter-form]').validate({
                debug: true,
                submitHandler: function(form){
                    filterCalendar();
                    j$('#filter-dialog').dialog('close');                
                }
            });      
            
            j$('#and-or').buttonset();
            
            // Handler used when adding additional filter criteria 
            j$('#add-criteria').on('click', function(e)
            {
                e.preventDefault();
                
                j$('#filter-set-1 div')
                    .clone(true)
                    .appendTo('#filter-set-2')
                    .find('.filter-field-value')
                    .attr('id','dummy');

                $this = j$(this);
                $this.hide();
                j$('#and-or').show();

                j$('#filter-set-2')
                    .removeClass('inactive')
                    .addClass('active')
                    .show();

                j$('#remove-criteria').show();
                setFilterExpressionFields('#filter-set-2');
                filterDefaultCheckboxHandler();
            });          
            
            j$('#remove-criteria').on('click', function()
            {

                $this = j$(this);
                $this.hide();

                j$('#and-or').hide();
                j$('#add-criteria').show();

                j$('#filter-set-2')
                    .find('*')
                    .remove()
                .end()
                    .removeClass('active')
                    .addClass('inactive')
                    .hide();       
                filterDefaultCheckboxHandler();         
            });
            
            function StringBuffer()
            { 
                this.buffer = []; 
            } 

            StringBuffer.prototype.append = function append(string)
            {
                this.buffer.push(string); 
                return this; 
            }; 

            StringBuffer.prototype.toString = function toString()
            { 
                return this.buffer.join(""); 
            }; 
        
            j$('#market-select').click(function(){
                j$('#market-options').toggle();
                j$('#country-options').hide();
                j$('#categories-options').hide();
                j$('#functions-options').hide();
                j$('#ule-options').hide();  
                return false;                   
            });
            
            j$('#country-select').click(function(){
                j$('#market-options').hide();
                j$('#country-options').toggle();
                j$('#categories-options').hide();
                j$('#functions-options').hide();  
                j$('#ule-options').hide(); 
                return false;                   
            });
            
            j$('#categories-select').click(function(){
                j$('#categories-options').toggle();
                j$('#country-options').hide();
                j$('#market-options').hide();
                j$('#functions-options').hide();
                j$('#ule-options').hide(); 
                return false;
            });

            j$('#functions-select').click(function(){
                j$('#functions-options').toggle();
                j$('#country-options').hide();
                j$('#market-options').hide();
                j$('#categories-options').hide();
                j$('#ule-options').hide(); 
                return false;
            });
            
            j$('#ule-select').click(function(){
                j$('#ule-options').toggle();
                j$('#country-options').hide();
                j$('#market-options').hide();
                j$('#categories-options').hide();
                j$('#functions-options').hide();
                return false;
            });

        } // End of applicationInit function
    
        // Code concerning the dynamic filters 
        // This might need to be reworked into a plug in 
        
        var OPTLIST_CMN = 
        '<option value="=">Equal To</option>' +
        '<option value="!=">Not Equal To</option>';
        
        var optionListForString = OPTLIST_CMN
        '<option value="LIKE ">LIKE</option>';
        
        var optionListForDate = OPTLIST_CMN +
        '<option value="<">Less Than</option>' +
        '<option value="<=">Less Than or Equal To</option>' +
        '<option value=">">Greater Than</option>' +
        '<option value=">=">Greater Than or Equal To</option>';
        
        var OPTMULTILIST_CMN =
        '<option value="includes">contains</option>' +
        '<option value="excludes">doesn\'t contain</option>';
                    
        
        var optionListForBooleanValue =
        '<option value="true">True</option>' +
        '<option value="false">False</option>';
    
        var optionListForInteger = optionListForDate;  
    
        // Check on init Global Events and all User default options 
        function checkUserDefaultOptions()
        {
            if(!isFilterDataCookiePresent())
            {
                j$('#btn-global-event').prop('checked', true); 
            }
            else
            {
                j$('#btn-global-event').prop('checked', false);
            } 
            _defaultValuesChecked = true;
        }
        
        function setFilterExpressionFields(selector)
        {
            var $parent = j$(selector);
            
            filterFieldName = $parent.find('.filter-field-name').val();

            // need to fetch picklist values dynamically
            var optionListForPicklistValue;
            filterFieldName = filterFieldName == null ? firstFilterField : filterFieldName;

            cp_PlannerController.getPicklistValuesAsString(filterFieldName, function(result, event)
            {
                optionListForPicklistValue = result;
                                
            }, {escape:false});
    
            cp_PlannerController.getFieldType(filterFieldName, function(result, event)
            {

                // reset all the properties 
                $parent
                    .find('.filter-operator-type option')
                    .remove()
                .end()
                    .find('.select-filter-field-value option')
                    .remove()
                .end()
                    .find('.filter-field-value')
                    .val('')
                .end()
                    .find('.filter-field-value')
                    .removeClass('number');
                
                $parent
                    .find('.filter-field-value')
                    .hide()
                .end()
                    .find('.select-filter-field-value')
                    .hide();
                // end of reset 
                
                // Attach the filter op type to the element 
                $parent
                    .find('.filter-field-value')
                    .data('type', result);
                
                // the alternate field for the date and datetime picker 
                $altField = $parent.find('.real-date-value');
                
                // Display the right kind of value field 
                if(result == _DATE)
                {
                    
                    $parent
                        .find('.filter-field-value')
                        .datetimepicker('destroy')
                    .end()
                        .find('.filter-field-value')
                        .show()
                    .end()
                        .find('.filter-field-value')
                        .datepicker({ 
                            altFormat: 'yy-mm-dd',
                            altField: $altField,
                            dateFormat: j$.datepicker.RFC_2822
                        });
                    
                    // set the option values 
                    $parent.find('.filter-operator-type').append(optionListForDate);
                                            
                }
                else if (result == _DATETIME)
                {
                        
                    $parent
                        .find('.filter-field-value')
                        .datepicker("destroy")
                    .end()
                        .find('.filter-field-value')
                        .show()
                    .end()
                    
                        .find('.filter-field-value')
                        .datetimepicker({
                            dateFormat: j$.datepicker.RFC_2822,                      
                            altField: $altField, 
                            altFormat: 'yy-mm-dd',
                            altFieldTimeOnly: false,
                            timeFormat: 'hh:mm:ss'
                        })
                    .end()
                        .find('.filter-operator-type')
                        .append(optionListForDate); // set the option values                     
                }
                else
                {
                    $parent.find('.filter-field-value').datepicker("destroy");
                    
                    // set the option values 
                    if (result == _STRING)
                    {
                        $parent
                            .find('.filter-field-value')
                            .show()
                        .end()
                            .find('.filter-operator-type')
                            .append(optionListForString);
                    } 
                    else if (result == _INTEGER || result == _CURRENCY)
                    {
                        $parent.find('.filter-field-value').show();
                        $parent.find('.filter-operator-type').append(optionListForInteger);
                        $parent.find('.filter-field-value').addClass('number');
                    } 
                    else if (result == _BOOLEAN)
                    {
                        $parent.find('.select-filter-field-value').show();
                        $parent.find('.filter-operator-type').append(OPTLIST_CMN);
                        $parent.find('.select-filter-field-value').append(optionListForBooleanValue);
                    } 
                    else if (result == _PICKLIST)
                    {
                        $parent.find('.select-filter-field-value').show();
                        $parent.find('.filter-operator-type').append(OPTLIST_CMN);
                        $parent.find('.select-filter-field-value').append(optionListForPicklistValue);
                        $parent.find('.select-filter-field-value').removeAttr('multiple');
                        $parent.find('.select-filter-field-value').removeAttr('size');
                    }
                    else if (result == _MULTIPICKLIST)
                    {
                        $parent.find('.select-filter-field-value').show();
                        $parent.find('.filter-operator-type').append(OPTMULTILIST_CMN);
                        $parent.find('.select-filter-field-value').append(optionListForPicklistValue);   
                        $parent.find('.select-filter-field-value').attr('multiple','multiple');
                        $parent.find('.select-filter-field-value').attr('size','5');
                    }
                }
                    
                if (selector == '#filter-set-1' && buildByDefault)
                {
                    if (defaultFilterSet) 
                    {
                        // loop find ffOpp1 ffVal1 
                        $parent.find('.filter-operator-type').find('option').each(function(option)
                        {
                            if (j$(this).text() == ffOpp1)
                            {
                                j$(this).attr("selected",'selected');
                            }
                        });
                        if (result == _BOOLEAN || result == _PICKLIST || result == _MULTIPICKLIST){
                            $parent.find('.select-filter-field-value').find('option').each(function(option)
                            {
                                if (j$(this).text() == ffVal1) 
                                {
                                    j$(this).attr("selected",'selected');
                                }
                            });
                        }
                        else
                        {
                            if(result == _DATE || result == _DATETIME)
                            {
                                $parent.find('.real-date-value').val(ffAlt1);
                            }
                            $parent.find('.filter-field-value').val(ffVal1);
                        }
                        if (!secondFilterSet )
                        {
                            buildByDefault = false;
                        }
                    }
                }
                    
                
                filterFieldType = result;
                j$('#btn-filter-apply').removeClass('disabled');
            });             
        }
        
        function filterFieldNameHandler(event)
        {
            j$('#btn-filter-apply').addClass('disabled');
            
            $parent = j$(event.target).closest('.filter-expression');
            
            var parentId = '#' + $parent.attr('id');
            
            setFilterExpressionFields(parentId);
            
        } 
        
        function filterDefaultCheckboxHandler()
        {
            // Handle Default Filter Checkbox 
            
            checkFilter = new filterWrapper(
                                $filterfieldname1.find('option:selected').text(),
                                $filteroperatortype1.find('option:selected').text(),
                                $filterfieldvalue1.val() == ''? $selectfilterfieldvalue1.find('option:selected').text() : $filterfieldvalue1.val()
                            );
        }
        
        
        function setDateFiltersFromCalendar ()
        {
            var _currentDate = j$('#calendar').fullCalendar('getDate');
            var _prevMonth = new XDate(_currentDate).addMonths(-1);
            var _nextMonth = new XDate(_currentDate).addMonths(2);
            _formattedPrevMonth = _prevMonth.getFullYear() + "-" + ((_prevMonth.getMonth()+1)< 10 ? "0" + (_prevMonth.getMonth()+1) : (_prevMonth.getMonth()+1)) + "-01";
            _formattedNextMonth = _nextMonth.getFullYear() + "-" + ((_nextMonth.getMonth()+1)< 10 ? "0" + (_nextMonth.getMonth()+1) : (_nextMonth.getMonth()+1)) + "-01";
        }

        // Apply the filter - push values to back end 
        function filterCalendar()
        {
            setApplyFilterCookie();
            setDateFiltersFromCalendar();   
            _conditions = findWhereClause();
            viewKey = '';
            j$('#calendar').fullCalendar( 'refetchEvents' );
            
            //notify('Filter applied', 'Only records matching your filter criteria will now be shown.');
            
            j$('#btn-clear-filter').show();
            
            return true;
        } // Apply the filter - push values to back end 
        
        function setDashboard(type, html)
        {
            $dashboard = j$('[id$=dashboard]');
            if(type == 'warn')
            {
                $dashboard.addClass('alert');
                html = '<p class="warningText">'+html+'</p>';
            }
            else
            {
                $dashboard.removeClass('alert');
            }
            $dashboard.addClass('dashboard');
            $dashboard.html(html);
            j$(this).delay(3000,function()
            {
                $dashboard.css("display","none");
            });
        }
        
        function rollBackFilter()
        {
            tempWhere = ' '+whereCls;
            if ( tempWhere == _conditions )
            {
                buildFilter();
            }
        }
        
        function buildFilter()
        {
            buildByDefault = true;
            if (defaultFilterSet)
            {
                var parentId1 = '#filter-set-1';
                j$(parentId1).find('.filter-field-name').find('option').each(function(option)
                {
                    if (j$(this).text() == ffName1)
                    {
                        j$(this).attr("selected",'selected');
                    }
                });
                setFilterExpressionFields(parentId1);
            }
            $defaultFilterCheckbox.attr('checked','true');
            
            j$('#remove-criteria').hide();
            j$('#and-or').hide();
            j$('#add-criteria').show();
            j$('#filter-set-2')
                .find('*')
                .remove()
            .end()
                .removeClass('active')
                .addClass('inactive')
                .hide();       
            
        }
        
        function messageUser(mType, msg)
        {
            var html, img, tOut, mlay;
            //build noty plugin according to its type
            if(mType == 'alert')
            {
                img = "<img src='{!URLFOR($Resource.cp_icon_set,'info-square-blue.png')}' />";
                msg = "<div class='notyMsg'>"+msg+'</div>';
                img = "<div class='notyImg'>"+img+'</div>';
                html = img + msg +"<div class='clear'></div>";
                tOut = '30000';
                mlay = 'topRight';
            }
            if(mType == 'error')
            {
                img = "<img src='{!URLFOR($Resource.cp_icon_set,'ko-red.png')}' />";
                msg = '<div class="notyMsg">'+msg+'</div>';
                img = '<div class="notyImg">'+img+'</div>';
                html = img + msg +'<div class="clear"></div>';
                tOut = '30000';
                mlay = 'topRight';
            }
            if(mType == 'success')
            {
                mType = 'alert';
                //img = '<img src="{!URLFOR($Resource.cp_icon_set,'ok-green.png')}" />';
                html = msg;
                tOut = '300';
                mlay = 'top';
            }
            
            j$('#notify-pop').noty(                
            {
              text: html,
              timeout: tOut,
              type: mType,
              theme : 'noty_theme_twitter',
              layout: mlay
            });
        } 
        
        function notify(t, msg)
        {
            // notification functionality 
            j$('body').bart({
                duration: 300,
                imgDir: "{!URLFOR($Resource.cp_jquery_notification,'images/')}",                
                message: msg,                
                style: 'notice',                
                type: 'bar',
                title: t,
                opacity: 1,         
                vposition: 'top'
            });
        }
        
        function filterWrapper (filterField1, filterOpp1, filterVal1, alt1, filterField2, filterOpp2, filterVal2, alt2, conjunction)
        {
            this.filterField1 = filterField1;
            this.filterOpp1 = filterOpp1;
            this.filterVal1 = filterVal1;
            this.alt1 = alt1;
            this.filterField2 = filterField2;
            this.filterOpp2 = filterOpp2;
            this.filterVal2 = filterVal2;
            this.alt2 = alt2;
            this.conjunction = conjunction;
        }
        
        function refreshColourPickers()
        {               
           j$('.colour_input').simpleColor({
                border: 0,
                cellWidth: 7,
                cellHeight: 7,
                cellMargin: 0,
                columns: 20
            });            
        } 
        
        function isResetCookiePresent()
        {
            var i,x,y;
            var ARRcookies = document.cookie.split(";");
            var exdate1 = new Date();
            var exdays1 = 10;
            var resetCookieVal = false;
            for (i=0;i<ARRcookies.length;i++)
            {  
                x = ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
                x = x.replace(/^\s+|\s+$/g,"");
                if (x == 'resetCookie')
                {
                    resetCookieVal = true;
                }
            }              
            return resetCookieVal;   
        }  
        
        function isFilterDataCookiePresent()
        {
            var i,x,y;
            var ARRcookies=document.cookie.split(";");
            var exdate1=new Date();
            var exdays1 = 10;
            var resetApplied = false;
            for (i=0;i<ARRcookies.length;i++)
            {
                x = ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
                x = x.replace(/^\s+|\s+$/g,"");
                if(x == 'onlyFilterDataCookie')
                {
                    resetApplied = true;
                }
            }
            //alert('resetApplied: '+resetApplied);
            return resetApplied;
        }  
        
        function checkApplyFilterCookie()
        {
            var i,x,y;
            var ARRcookies = document.cookie.split(";");
            var exdate1 = new Date();
            var exdays1 = 10;
            var applyAdvancedFilterCookie = false;
            for (i=0;i<ARRcookies.length;i++)
            {
                x = ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
                x = x.replace(/^\s+|\s+$/g,"");
                if (x=='onlyFilterDataCookie')
                {
                    applyAdvancedFilterCookie = true;
                }
            }
            return applyAdvancedFilterCookie;
        }
        
        function removeApplyFilterCookie()
        {
            var exdate=new Date();
            var exdays = 10;
            exdate.setDate(exdate.getDate() - exdays);
            var c_value = escape('applyAdvancedFilter') + ((exdays == null) ? "" : "; expires=" + exdate.toUTCString());
            document.cookie='applyAdvancedFilterCookie' + "=" + c_value; 
        } 
        
        function removeResetCookie()
        {
            var exdate = new Date();
            var exdays = 10;
            exdate.setDate(exdate.getDate() - exdays);
            var c_value = escape('reset') + ((exdays == null) ? "" : "; expires=" + exdate.toUTCString());
            document.cookie = 'resetCookie' + "=" + c_value;
        }
        
        function setApplyFilterCookie()
        {
            var exdate=new Date();
            var exdays = 10;
            exdate.setDate(exdate.getDate() + exdays);
            var c_value=escape('applyAdvancedFilter') + ((exdays==null) ? "" : "; expires="+exdate.toUTCString());
            document.cookie='applyAdvancedFilterCookie' + "=" + c_value; 
        }
                    
        function findWhereClause()
        {
            var SEPARATOR = ' ';
            var _advancedFilter = '';

            // Build advanced filter string
            j$('[id$=filter-form]').find('.active').each(function()
            {
                $this = j$(this);
                filterFieldName = $this.find('.filter-field-name').val(); 
                filterOperator = $this.find('.filter-operator-type').val(); 
                
                filterFieldType = $this.find('.filter-field-value').data('type');
                if(filterFieldType == _DATE || filterFieldType == _DATETIME)
                {
                    filterFieldValue = $this.find('.real-date-value').val();
                }
                else if (filterFieldType == _BOOLEAN || filterFieldType == _PICKLIST || filterFieldType == _MULTIPICKLIST)
                {
                    filterFieldValue = $this.find('.select-filter-field-value').val();
                }
                else
                {
                    filterFieldValue = $this.find('.filter-field-value').val();
                }

                var formattedFieldValue = '';

                if(filterFieldType==_STRING || filterFieldType == _PICKLIST )
                {
                    formattedFieldValue = '\'' + filterFieldValue + '\'';
                    
                }
                else if (filterFieldType == _MULTIPICKLIST)
                {
                        
                    formattedFieldValue = '(\'' + filterFieldValue[0].replace("'","\\'") + '\')';
                    if(filterFieldValue.length > 1)
                    {
                        for (i=1; i<filterFieldValue.length; i++)
                        {
                            formattedFieldValue += ' OR ' + filterFieldName + SEPARATOR + filterOperator + SEPARATOR + '(\'' +filterFieldValue[i].replace("'","\\'") + '\')';
                        }

                        formattedFieldValue += ') ';
                    }
                    
                }
                else if (filterFieldType == _DATE ||  
                    filterFieldType == _BOOLEAN ||
                    filterFieldType == _INTEGER ||
                    filterFieldType == _CURRENCY)
                {

                    formattedFieldValue = filterFieldValue;
                }
                else if (filterFieldType == _DATETIME)
                {
                    formattedFieldValue = filterFieldValue.replace(' ','T');
                    formattedFieldValue += 'Z';
                }                    
                if ((filterFieldType == _MULTIPICKLIST) && (filterFieldValue.length > 1))
                {
                    _advancedFilter += ' (' + filterFieldName + SEPARATOR + filterOperator + SEPARATOR + formattedFieldValue;
                }
                else
                {
                    _advancedFilter += filterFieldName + SEPARATOR + filterOperator + SEPARATOR + formattedFieldValue;
                }
                                                     
            });

            // Clear button has been clicked. Clear all events
            if (isResetCookiePresent())
            {
                _advancedFilter += ' (Id = null) ';
            }

            setDateFiltersFromCalendar();
            removeResetCookie();
            removeApplyFilterCookie();
            return _advancedFilter;
        }

        function printBrowser() 
        {
            window.print();
        }

    </script>

</apex:component>