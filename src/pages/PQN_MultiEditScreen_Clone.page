<apex:page showHeader="false" sidebar="false" controller="PQN_UploadNCData_Clone"  apiVersion="36.0" docType="html-5.0">
    
    <apex:form id="frm1">
    <head>
        <title>IMPORT EXCEL DATA</title>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        
        <script src="{!URLFOR($Resource.PQN_Bootstrap, 'PQN_Bootstrap_Home/js/jquery-1.11.1.min.js')}"></script>
        <script src="{!URLFOR($Resource.PQN_Bootstrap, 'PQN_Bootstrap_Home/js/jquery.dataTables.min.js')}"></script>
    </head>
    <style>
        .loader {
          //background-color:#3498db;
          border: 16px solid #f3f3f3;
          margin-left:45%;
          border-radius: 50%;
          border-top: 16px solid #3498db;
          border-bottom: 16px solid #3498db;          
          width: 80px;
          height: 80px;
          -webkit-animation: spin 2s linear infinite;
          animation: spin 2s linear infinite;
        }
        
        @-webkit-keyframes spin {
          0% { -webkit-transform: rotate(0deg); }
          100% { -webkit-transform: rotate(360deg); }
        }
    
    </style>    
    <body>
        <div id="wrapper">
        <c:PQN_Navigation navigationName="multiple_entry"/>
        <!-- /#page-wrapper -->
        <div id="page-wrapper">
            
            
            <div class="container-fluid">

            <div class ="row">            
                <div class="col-md-6">
                <h3>Please Upload Nonconformance Data <br/> <small>You can import up to 10,000 records at a time.</small></h3>
                </div>
                <div class="col-md-6">
                    <div class="pull-right">

                    </div>
                </div>
            </div>
             <hr/>
           
          <div class="panel panel-default">
            <div class="panel-heading"><strong>Import Data</strong> <small>Excel file upload</small></div>
            <div class="panel-body">
               <h4>Select format to parse the excel </h4>
              <div class = "pull-right">
                  <apex:outputPanel id="ipfile">
                  <apex:selectList value="{!selectedfile}" size="1" styleClass="selectedFile" onchange="fileChange();">
                      <apex:selectOptions value="{!filetype}"/>
                  </apex:selectList>
                  </apex:outputPanel>
              </div>
               <!-- Standar Form -->
              <br/> <br/>
            
                <div class="form-inline pull-right">
                  <div class="form-group">
                    <input type="file" name="xlfile" id="xlf"/>
                  </div>
                </div>
                
                <br/>
                <br/>
                
                <div class="loader" id="loaderDiv" style="display:none;"></div>
                <div id="alert_dangerId" class="alert alert-danger" style="display:none;">
                    <strong>Danger!</strong> You should .
                </div>
                <div style="margin:20px;">                    
                    <input id="importBtnId" style="display:none" class="btn" value="Start Import" type="button" onclick="getImportData();"/>
                    <a class="btn" id ="exportError" style="display:none" target="_blank" role="button">Export Error File</a>
                    <a class="btn" id ="exportSuccess" style="display:none" target="_blank" role="button">Export Success File</a>
                </div>
                <div class = "panel panel-info">
                    <div class = "panel-heading" style="display:none;">
                        <h3 class = "panel-title">Output</h3>
                    </div>

                    <div class = "panel-body"  style="display:none;">
                        <apex:outputPanel id="outjson">
                          <pre id="out">
                          </pre>
                        </apex:outputPanel>
                    </div>
                </div>                
            </div>
          </div>
          
        <div class="footer">
           <div class="container">

          </div>
        </div>
        <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.5.7/es5-shim.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js"></script>-->
        <script src="{!URLFOR($Resource.PQN_Bootstrap, 'PQN_Bootstrap_Home/xls/es5-shim_4.5.7_es5-shim.js')}"></script>
        <script src="{!URLFOR($Resource.PQN_Bootstrap, 'PQN_Bootstrap_Home/xls/xlsx_0.8_jszip.js')}"></script>
        <script src="{!URLFOR($Resource.PQN_Bootstrap, 'PQN_Bootstrap_Home/xls/xlsx_0.8_xlsx.js')}"></script>
        <script>
            $(document).ready(function(){
                $('[data-toggle="tooltip"]').tooltip();
            });
        </script>
        <script>
            var X = XLSX;
            var fileName ;
            function fixdata(data) {
                var o = "", l = 0, w = 10240;
                for(l=0; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));
                o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));
                return o;
            }
         </script>    
          <script>  
            function to_json(workbook) {
                var result = {};
                var sheetName='Data Collection';
                    if (typeof(workbook.Sheets[sheetName]) == "undefined"){
                        $("#alert_dangerId").show();
                        $("#alert_dangerId").html('<strong>Sheet Name</strong> must be Data Collection. Please open your sheet and check sheet name in file.');
                        
                    }else{
                        var a = workbook.Sheets[sheetName]["!ref"];
                        a=a.split(":");
                        var b={};
                        var selectedFile = document.getElementsByClassName('selectedFile')[0].value;
                        if(selectedFile =="Cannock"){ b['range'] = "B9:"+a[1]; }
                        if(selectedFile =="Unilever"){ b['range'] = "A1:"+a[1]; }
                        if(selectedFile =="Heilbronn"){ b['range'] = "B9:"+a[1]; }
                        var roa = X.utils.sheet_to_row_object_array(workbook.Sheets[sheetName],b);
                        var roaHeader = X.utils.sheet_Header_json(workbook.Sheets[sheetName],b);
                        if(roa.length>0 && roa.length<=10000){
                            checkHeader(roaHeader,selectedFile,roa.length);
                            result[sheetName] = roa;
                        }else{
                            $("#alert_dangerId").show();
                            $("#alert_dangerId").html('<strong>Selected file</strong> has more than 10,000 record. Please split the file into 2 files with correct format.');
                            $("#loaderDiv").hide();
                        }
                    }
                return result;
            }
            </script>
            <script>
            function checkHeader(roaHeader,selectedFile,totalrecord){
                if(roaHeader.length>0){
                            
                    if(selectedFile =="Unilever"){
                       var UnileverHeader= ["Cluster", "Loss Code #", "Description", "Delivery Note Code", "Reported Rep DC Country", "Supplier Type", "Product Number (SKU)", "Reporting DC", "Date"];
                       checkValidFile(UnileverHeader, roaHeader,totalrecord);
                    }
                    if(selectedFile =="Cannock"){
                        var CannockHeader= ["Month", "Supplier Name", "Depot","Product Code","Reject Code","Number Pallets Affected"];
                        checkValidFile(CannockHeader, roaHeader,totalrecord);
                    }
                    if(selectedFile =="Heilbronn"){
                        var HeilbronnHeader= ["DN#", "Month", "Source Factory", "Source DC (if applicable)", "Reporting DC", "Product Group (Category)", "Product Number (SKU)", "Lot Code", "Product Name", "LOSS CODE #", "Loss Level 1", "Loss Level 2","Loss Level 3","Loss Level 4","Additional Information","Number Pallets affected"];
                        checkValidFile(HeilbronnHeader, roaHeader,totalrecord);
                    }
                    
                    
                }else{
                    $("#alert_dangerId").show();
                    $("#alert_dangerId").html('<strong>Selected file</strong> is not valid. Please refresh page and upload valid file.');
                }
                $("#loaderDiv").hide();
            }
            </script>
            
            <script>
                function checkValidFile(arrayHeader, FirstRecord,totalrecord){
                    var j=0;
                    for(var i=0; i<arrayHeader.length; i++){
                        var valid=false;
                        for(var k=0; k<FirstRecord.length; k++){
                            if (typeof(FirstRecord[k]) == "undefined"){
                                FirstRecord[k]='';
                            }
                            if(arrayHeader[i]==FirstRecord[k].trim()){
                                j++;
                                break;
                            }                        
                        }                                                
                    }                    
                    if(arrayHeader.length==j){
                        $("#alert_dangerId").removeAttr("class");
                        $("#alert_dangerId").attr("class","alert alert-success");
                        $("#alert_dangerId").show();
                        $("#importBtnId").show();
                        $("#alert_dangerId").html('<strong>Selected file</strong> has '+totalrecord+' records. Please import file.');
                        return "valid";
                        
                    }                    
                    $("#alert_dangerId").show();
                    $("#alert_dangerId").html('<strong>Selected file</strong> is not valid. Please refresh page and upload valid file.');
                    return "Invalid";
                }
            </script>
            
            <script>
            function to_csv(workbook) {
                var result = [];
                workbook.SheetNames.forEach(function(sheetName) {
                    var csv = X.utils.sheet_to_csv(workbook.Sheets[sheetName]);
                    if(csv.length > 0){
                        result.push("SHEET: " + sheetName);
                        result.push("");
                        result.push(csv);
                    }
                });
                return result.join("\n");
            }
            </script>
            <script>
            function to_formulae(workbook) {
                var result = [];
                workbook.SheetNames.forEach(function(sheetName) {
                    var formulae = X.utils.get_formulae(workbook.Sheets[sheetName]);
                    if(formulae.length > 0){
                        result.push("SHEET: " + sheetName);
                        result.push("");
                        result.push(formulae.join("\n"));
                    }
                });
                return result.join("\n");
            }
            </script>
            <script>
            var OutputData;
            function process_wb(wb) {
                var output = "";
                switch("json") {
                    case "json":
                        OutputData = to_json(wb);
                        output = JSON.stringify(OutputData, 2, 2);
                        break;
                    case "form":
                        output = to_formulae(wb);
                        break;
                    default:
                    output = to_csv(wb);
                }              
                if(out.innerText === undefined) out.textContent = output;
                  else out.innerText = output;                
                if(typeof console !== 'undefined') console.log("output", new Date());
            }
            </script>
            <script>
                function returnValidStr(str){
                    if (typeof(str) == "undefined"){
                        str='';
                    }else{
                        str= str.replace(/^\s+|\s+$/g, '');
                    }
                    
                    return str;
                    
                }
            </script>
            
            <script>
                var loopCount=0;totalloopCount=1;
                function getImportData(){
                    $("#loaderDiv").show();
                    var timeepoch = (new Date).getTime();
                    var timeStamp = Math.floor(timeepoch/ 1000);                    
                    var batch=1500;
                    var totalrecord = OutputData['Data Collection'].length;
                    var div = Math.floor(totalrecord / batch);
                    var rem = totalrecord % batch;
                    if(div>0){
                        totalloopCount=div;
                        for(var i=0; i<div; i++){
                            callImportPQNObj(i*batch, i*batch+batch,timeStamp);
                        }                        
                        if(rem>0){
                            callImportPQNObj(div*batch, totalrecord,timeStamp);
                            totalloopCount++;
                        }                    
                    }else{
                        callImportPQNObj(0, rem,timeStamp);
                   
                    }

                    $("#exportSuccess").attr('href','{!$page.PQN_Export_Excel}?filestatus=success&timestamp='+timeStamp);
                    $("#exportError").attr('href','{!$page.PQN_Export_Excel}?filestatus=error&timestamp='+timeStamp);
                    
                }
            </script>        
            <script>
                var selectedFileType;                
                function callImportPQNObj(start, end,timeStamp){
                    var xPQNList= new Array();
                    for(var k=start; k<end; k++){                    
                        var xP= new Object();
                        if(selectedFileType =="Unilever"){
                            xP.Delivery_Note_Number__c = returnValidStr(OutputData['Data Collection'][k]['Delivery Note Code']); xP.SKU__c = returnValidStr(OutputData['Data Collection'][k]['Product Number (SKU)']); xP.Supplier__c = ''; xP.Number_of_Pallets_Per_SKU_Non_Compliant__c = ''; xP.Losses__c = ''; xP.Reporting_DC__c = returnValidStr(OutputData['Data Collection'][k]['Reporting DC']); xP.Non_compliance_reason_code__c = returnValidStr(OutputData['Data Collection'][k]['Loss Code #']); xP.Cluster__c = returnValidStr(OutputData['Data Collection'][k]['Cluster']); xP.Description__c = returnValidStr(OutputData['Data Collection'][k]['Description']); xP.DC_Country__c = returnValidStr(OutputData['Data Collection'][k]['Reported Rep DC Country']); xP.Supplier_type__c = returnValidStr(OutputData['Data Collection'][k]['Supplier Type']);    
                        }
                        if(selectedFileType =="Cannock" || selectedFileType =="Heilbronn"){
                            if(selectedFileType =="Cannock"){
                                xP.Delivery_Note_Number__c = ''; xP.SKU__c = returnValidStr(OutputData['Data Collection'][k]['Product Code']); xP.Supplier__c = returnValidStr(OutputData['Data Collection'][k]['Supplier Name']); xP.Number_of_Pallets_Per_SKU_Non_Compliant__c = returnValidStr(OutputData['Data Collection'][k]['Number Pallets Affected']);   xP.Losses__c = returnValidStr(OutputData['Data Collection'][k]['Reject Code']); xP.Reporting_DC__c = returnValidStr(OutputData['Data Collection'][k]['Depot']);
                            }
                            if(selectedFileType =="Heilbronn"){
                                xP.Delivery_Note_Number__c = returnValidStr(OutputData['Data Collection'][k]['DN#']); xP.SKU__c = returnValidStr(OutputData['Data Collection'][k]['Product Number (SKU)']);
                                xP.Supplier__c = returnValidStr(OutputData['Data Collection'][k]['Source Factory']); xP.Number_of_Pallets_Per_SKU_Non_Compliant__c = returnValidStr(OutputData['Data Collection'][k]['Number Pallets affected']);
                                xP.Losses__c = returnValidStr(OutputData['Data Collection'][k]['LOSS CODE #']); xP.Reporting_DC__c = returnValidStr(OutputData['Data Collection'][k]['Reporting DC']);
                            }
                            xP.Non_compliance_reason_code__c = ''; xP.Cluster__c = ''; xP.Description__c = ''; xP.DC_Country__c = ''; xP.Supplier_type__c = '';
                        }
                        xP.Account__c=''; xP.Sub_Cluster__c = ''; xP.MCO__c = ''; xP.Error_Description__c=''; xP.Is_Error__c=false; xP.Multi_Timestamp__c=timeStamp.toString();
                        xPQNList.push(xP);
                        delete OutputData['Data Collection'][k];                    
                     }
                    console.log(xPQNList);
                    jsRemotingImport(xPQNList,timeStamp.toString());
                }
            </script>
            <script>
                function jsRemotingImport(xPQNList,timeStamp){
                  Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PQN_UploadNCData_Clone.getSheetData}',
                    xPQNList,
                    selectedFileType,
                    function(result, event){
                            //console.log(event,result);
                            loopCount++;
                            callOutputResultcheck(timeStamp);
                            $.each( result, function( key, value ) {
                              if(!value.success){
                                  console.log(value.errors[0].message);
                              }
                          });
                          if (event.status) {
                               //console.log(event);
                            } else if (event.type === 'exception') {
                                //document.getElementById("responseErrors").innerHTML = event.message + "<br/>\n<pre>" + event.where + "</pre>";
                            } else {
                                //document.getElementById("responseErrors").innerHTML = event.message;
                            }
                            }, 
                        {escape: true, buffer: false,timeout: 120000}
                    
                    );
                 }
                
            </script>
            <script>
            function callOutputResultcheck(timeStamp){
                if(loopCount==totalloopCount){
                    console.log("---->>>>");
                    Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PQN_UploadNCData_Clone.getSheetStatus}',
                    timeStamp,
                    function(result, event){
                           if(event.result.Success>0){
                                $("#exportSuccess").show();
                                $("#exportSuccess").text("Export Success Records- "+event.result.Success);
                                 $("#loaderDiv").hide();
                            }
                            if(event.result.Error>0){
                                 $("#exportError").show();
                                 $("#exportError").text("Export Error Records-"+event.result.Error);
                                  $("#loaderDiv").hide();
                            }
                         }, 
                        {escape: true, buffer: false,timeout: 120000}
                    
                    );
                   
                }
           }
           </script>
            <script>
               function fileChange(){
                  $("#exportSuccess").hide();
                    $("#exportError").hide();
              }
            
            </script>
            <script>
            function initiateInsertion(){ passStringToUploadDataTosObject(document.getElementById('out').innerText); }
            function saveexceldata(){ saveexceldatainapex(); }
            var xlf = document.getElementById('xlf');
            function handleFile(e) {
                // selectedFileType is Global Variable
                selectedFileType = document.getElementsByClassName('selectedFile')[0].value; 
                var files = e.target.files;
                var f = files[0];
                var fileExt = f.name.split(/[\s.]+/);
                if(fileExt[fileExt.length-1] == "xlsx" || fileExt[fileExt.length-1] == "xls"){
                    var reader = new FileReader();
                    var name = f.name;
                    fileName = name
                    $("#loaderDiv").show();
                    reader.onload = function(e) {
                            var data = e.target.result;
                            var arr = fixdata(data);
                            var wb =  X.read(btoa(arr), {type: 'base64'});
                            process_wb(wb);
                    };reader.readAsArrayBuffer(f);
               }else{
                    $("#alert_dangerId").show();
                    $("#alert_dangerId").html('<strong>File format</strong> is not valid. Please upload xls or xlsx file.');
                }
               return false;
            }            
            if(xlf.addEventListener) xlf.addEventListener('change', handleFile, false);    
            </script>
            <script>                      
                function tableToExcel(file_Name){
                        var a = document.createElement('a');
                        //getting data from our div that contains the HTML table
                        var data_type = 'data:application/vnd.ms-excel';
                        var table_div = document.getElementById('dvData');
                        var table_html = table_div.outerHTML.replace(/ /g, '%20');
                        a.href = data_type + ', ' + table_html;
                        //setting the file name
                        if(fileName.length>0){
                            fileName = fileName.substr(0, fileName.lastIndexOf('.'));
                        }else{
                            fileName= '';
                        }
                        a.download = fileName+'_error.xls';
                        //triggering the function
                        a.click();
                   }                  
                  </script>
            </div>
            </div>
         </div>
     </body>
 </apex:form>

</apex:page>