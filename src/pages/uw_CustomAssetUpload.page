<apex:page controller="uw_CustomAssetUploadExtension" action="{!checkfeed}" showHeader="false">
    <apex:includeScript value="{!$Resource.BETApp}/js/jquery.min.js" />    
    <apex:includeScript value="{!$Resource.BETApp}/js/jquery-ui.js" />
  <style>
    #ballsWaveG{
    position:relative;
    width:128px;
    height:30px}

    .ballsWaveG{
    position:absolute;
    top:0;
    background-color:#be236d;
    width:16px;
    height:16px;
    -moz-animation-name:ballsWaveG;
    -moz-animation-duration:1.3s;
    -moz-animation-iteration-count:infinite;
    -moz-animation-direction:linear;
    -moz-border-radius:8px;
    -webkit-animation-name:ballsWaveG;
    -webkit-animation-duration:1.3s;
    -webkit-animation-iteration-count:infinite;
    -webkit-animation-direction:linear;
    -webkit-border-radius:8px;
    -ms-animation-name:ballsWaveG;
    -ms-animation-duration:1.3s;
    -ms-animation-iteration-count:infinite;
    -ms-animation-direction:linear;
    -ms-border-radius:8px;
    -o-animation-name:ballsWaveG;
    -o-animation-duration:1.3s;
    -o-animation-iteration-count:infinite;
    -o-animation-direction:linear;
    -o-border-radius:8px;
    animation-name:ballsWaveG;
    animation-duration:1.3s;
    animation-iteration-count:infinite;
    animation-direction:linear;
    border-radius:8px;
    }

    #ballsWaveG_1{
    left:0;
    -moz-animation-delay:0.52s;
    -webkit-animation-delay:0.52s;
    -ms-animation-delay:0.52s;
    -o-animation-delay:0.52s;
    animation-delay:0.52s;
    }

    #ballsWaveG_2{
    left:16px;
    -moz-animation-delay:0.65s;
    -webkit-animation-delay:0.65s;
    -ms-animation-delay:0.65s;
    -o-animation-delay:0.65s;
    animation-delay:0.65s;
    }

    #ballsWaveG_3{
    left:32px;
    -moz-animation-delay:0.78s;
    -webkit-animation-delay:0.78s;
    -ms-animation-delay:0.78s;
    -o-animation-delay:0.78s;
    animation-delay:0.78s;
    }

    #ballsWaveG_4{
    left:48px;
    -moz-animation-delay:0.91s;
    -webkit-animation-delay:0.91s;
    -ms-animation-delay:0.91s;
    -o-animation-delay:0.91s;
    animation-delay:0.91s;
    }

    #ballsWaveG_5{
    left:64px;
    -moz-animation-delay:1.04s;
    -webkit-animation-delay:1.04s;
    -ms-animation-delay:1.04s;
    -o-animation-delay:1.04s;
    animation-delay:1.04s;
    }

    #ballsWaveG_6{
    left:80px;
    -moz-animation-delay:1.17s;
    -webkit-animation-delay:1.17s;
    -ms-animation-delay:1.17s;
    -o-animation-delay:1.17s;
    animation-delay:1.17s;
    }

    #ballsWaveG_7{
    left:96px;
    -moz-animation-delay:1.3s;
    -webkit-animation-delay:1.3s;
    -ms-animation-delay:1.3s;
    -o-animation-delay:1.3s;
    animation-delay:1.3s;
    }

    #ballsWaveG_8{
    left:112px;
    -moz-animation-delay:1.43s;
    -webkit-animation-delay:1.43s;
    -ms-animation-delay:1.43s;
    -o-animation-delay:1.43s;
    animation-delay:1.43s;
    }

    @-moz-keyframes ballsWaveG{
    0%{
    background-color:#be236d;
    }

    100%{
    background-color:#DEC3DE;
    }

    }

    @-webkit-keyframes ballsWaveG{
    0%{
    background-color:#be236d;
    }

    100%{
    background-color:#DEC3DE;
    }

    }

    @-ms-keyframes ballsWaveG{
    0%{
    background-color:#be236d;
    }

    100%{
    background-color:#DEC3DE;
    }

    }

    @-o-keyframes ballsWaveG{
    0%{
    background-color:#be236d;
    }

    100%{
    background-color:#DEC3DE;
    }

    }

    @keyframes ballsWaveG{
    0%{
    background-color:#be236d;
    }

    100%{
    background-color:#DEC3DE;
    }

    }

  </style>

  <script type="text/javascript">
      var __sfdcSessionId = '{!GETSESSIONID()}';
      var uploadHelper = function() {
          //workaround for issue with Sarissa on IE (Sarrisa preventd sending blob)
          var NATIVEXHR;
          if (window.Sarissa && Sarissa.originalXMLHttpRequest) {
              NATIVEXHR = Sarissa.originalXMLHttpRequest;
          } else {
              NATIVEXHR = XMLHttpRequest;
          }

          //Boundary for the multipart-formdata reqyest
          var boundary = "blob987645nhf98q365hfq0398547nhf3487" + (new Date()).getTime();

          var _getFileName = function(fileField) {
              if (fileField && fileField.files.length == 1 && fileField.files[0].name) {
                  return fileField.files[0].name;
              } else {
                  return false;
              }
          };

          var _getFileContentType = function(fileField) {
              if (fileField && fileField.files.length == 1 && fileField.files[0].type) {
                  return fileField.files[0].type;
              } else {
                  return 'application/octet-stream';
              }
          };
          var _getChatterJSONData = function(subjectId, options) {
              var sfData = {
                  "capabilities": {
                      "content": {
                          "description": options.contentDescription,
                          "title": options.contentTitle
                      }
                  },
                  "feedElementType": "FeedItem",
                  "subjectId": subjectId
              };
              if (!_isEmpty(options.messageText)) {
                  sfData.body = {
                      "messageSegments": [{
                          "type": "Text",
                          "text": options.messageText
                      }]
                  };
              }
              return sfData;
          };

          var _isEmpty = function(val) {
              return val === null || val === undefined || val === '';
          };

          var startMultipartFormData = function(data) {
              data.push('--' + boundary);
          };

          var endMultipartFormData = function(data) {
              data.push('--' + boundary + '--');
          };

          var addMultipartMetaData = function(data, name, fileName, contentType) {
              if (_isEmpty(fileName)) {
                  data.push('Content-Disposition: form-data; name="' + name + '"');
                  data.push('Content-Type: ' + contentType);
                  data.push('');
              } else {
                  data.push('Content-Disposition: form-data; name="' + name + '"; filename="' + fileName + '"');
                  data.push('Content-Type: ' + contentType);
                  data.push('');
                  data.push('');//it is not mistake. we need extra \r\n before file content when we merge blob
              }
          };

          var _getFileReader = function(options, successHandler) {
              var reader = new FileReader();
              reader.addEventListener("load", function() {
                  successHandler();
              });
              reader.addEventListener("error", function(e) {

                  switch (e.target.error.code) {
                      case e.target.error.NOT_FOUND_ERR:
                          options.errorHandler('Failed while uploading file.');
                          break;
                      case e.target.error.NOT_READABLE_ERR:
                          options.errorHandler('Failed while uploading file.');
                          break;
                      case e.target.error.ABORT_ERR:
                          break;
                      default:
                          options.errorHandler('Failed while uploading file');
                  }
              });

              reader.addEventListener("abort", function(e) {
                  options.errorHandler('Failed while uploading file');
              });

              return reader;
          };

          var _getXHR = function(options) {
              var XHR = new NATIVEXHR();
              XHR.addEventListener('load', function(event) {
                  if (event && event.target) {
                      if (event.target.status !== 201) {
                          options.errorHandler('Failed while uploading file');
                          return;
                      }
                      var response;
                      try {
                          response = JSON.parse(event.target.response);
                      } catch (e) {
                          options.errorHandler('Failed while uploading file');
                          return;
                      }
                      options.successHandler(response);
                  } else {
                      options.errorHandler('Failed while uploading file');
                      return;
                  }
              });

              // We define what will happen in case of error
              XHR.addEventListener('error', function(event) {
                  options.errorHandler('Failed while uploading file');
              });

              XHR.open('POST', '/services/data/v32.0/chatter/feed-elements');

              //add headers
              XHR.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);
              XHR.setRequestHeader('Authorization', 'Bearer ' + __sfdcSessionId);
              XHR.setRequestHeader('Accept', 'application/json');

              //upload porgress bar
              if (XHR.upload && options.uploadHanlder) {
                if (options.uploadHanlder.progress) {
                  XHR.upload.addEventListener("progress", function(a) { options.uploadHanlder.progress(a.loaded, a.total);}, false);
                }
                if (options.uploadHanlder.load) {
                  XHR.upload.addEventListener("load", function(a) { options.uploadHanlder.load(a);}, false);
                }
              } 
              return XHR;
          };

          var _buildAndSendRequest = function(fileArrayBuffer, subjectId, options) {
              var sfData = _getChatterJSONData(subjectId, options);
              // we'll store our body request as a string.
              var data1 = [];
              var data2 = [];

              startMultipartFormData(data1);

              //chatter data
              addMultipartMetaData(data1, 'json', null, 'application/json; charset=UTF-8');
              data1.push(JSON.stringify(sfData, null, ' '));
              data1.push('');

              //file data
              startMultipartFormData(data1);
              addMultipartMetaData(data1, 'feedElementFileUpload', options.fileName, options.contentType);
              data2.push('');
              endMultipartFormData(data2);

              //build blob data
              var blob = new Blob([data1.join('\r\n'), fileArrayBuffer, data2.join('\r\n')]);
              var xhr = _getXHR(options);
              xhr.send(blob);
          };

          var sendFile = function(fileFieldId, subjectId, options) {
              var contentType, fileField;
              options = options || {};
              options.fielField = fileField;
              options.errorHandler = options.errorHandler || function(msg) {
                  if (window.console && window.console.error) {
                      console.error(msg);
                  }
              };
              //check if file field Id has been passed
              if (!fileFieldId) {
                  options.errorHandler('Missing file field Id');
                  return false;
              }

              //check if field exists
              fileField = document.getElementById(fileFieldId);
              if (!fileField) {
                  options.errorHandler('Given file field does not exist');
                  return false;
              }

              if (!subjectId || typeof subjectId !== 'string' || subjectId.length !== 18) {
                  options.errorHandler('Invalid Salesforce object Id. It has to be 18 characters long string');
                  return false;
              }
              //check if file has been selected
              options.fileName = _getFileName(fileField);
              if (options.fileName === false) {
                  options.errorHandler('Please choose a file');
                  return;
              }
              options.contentType = _getFileContentType(fileField);
              options.contentTitle = options.contentTitle || options.fileName;
              options.contentDescription = options.contentDescription || '';
              //readFile
              var reader = _getFileReader(options, function() {
                  _buildAndSendRequest(reader.result, subjectId, options);
              });

              reader.readAsArrayBuffer(fileField.files[0]);
          };

          return {
              sendFile: sendFile
          };
      };

      var upload = new uploadHelper();  
  </script>
  
  <script> 
    var saveInProgress = false;

    function saveForm(){
      if(saveInProgress){
        return false;
      }else{
        saveInProgress = true;
      }

      saveAsset();
    };

    function validation(){
      var errors = [];
      var subFunctionValue = jQuery('[id$="fileSubFunction"]')[0].value;
      var fileTypeValue = jQuery('[id$="fileAssetType"]')[0].value;
      var fileStatusValue = jQuery('[id$="fileStatus"]').val();
      var fileMediatypeValue = jQuery('[id$="fileMediaChannel"]')[0].value;
      var fileCountryValue = jQuery('[id$="fileCountry"]')[0].value;

      var input = document.getElementById('file-input');
      var filesToUpload = input.files;

      if( subFunctionValue === ''){
        errors.push('Sub Function cannot be empty.')
      }else{
        if(subFunctionValue === 'Brand Development'){
          if(fileTypeValue === ''){
            errors.push('Type cannot be empty.')
          }else{
            if(fileStatusValue === ''){
              errors.push('Status cannot be empty.')
            }

            if(fileTypeValue === 'Creative Work'){
              if(fileMediatypeValue === ''){
                errors.push('Media Type cannot be empty.')
              }

              if(fileMediatypeValue === 'BET Presentation'){
                errors.push('Media Type cannot be BET Presentation.')
              }

              if(fileCountryValue === ''){
                errors.push('Country cannot be empty.')
              }
            }else{
              jQuery('[id$="fileCountry"]')[0].value = '';
              jQuery('[id$="fileMediaChannel"]')[0].value = '';
            }            
          }
        }else{
          jQuery('[id$="fileAssetType"]')[0].value = '';

          if(fileMediatypeValue === ''){
            errors.push('Media Type cannot be empty.')
          }

          if(fileMediatypeValue === 'BET Presentation'){
            errors.push('Media Type cannot be BET Presentation.')
          }

          if(fileCountryValue === ''){
            errors.push('Country cannot be empty.')
          }
        }
      }

      if(filesToUpload.length == 0){
        errors.push('File cannot be empty.')
      }

      return errors;
    };

    function saveAsset(){
      jQuery('#ballsWaveG').show();
      jQuery('.process-status').html('Uploading File...');
      var validationResult = validation();

      if(validationResult.length > 0){
        jQuery('#ballsWaveG').hide();
        var errors = '<p style="color: red;">Errors on the form: <br />';
        for(var i=0;i<validationResult.length;i++){
          errors += validationResult[i] +'<br />';
        }
        errors += '</p>';
        jQuery('.form-errors').html(errors);
        jQuery('.form-errors').show();
        jQuery('.process-status').html('');
        saveInProgress = false;
        return false;
      }else{
        jQuery('.form-errors').html('');
        jQuery('.form-errors').hide();

        uploadFile();
      }
    };

    function uploadFile(){
        jQuery('#ballsWaveG').show();
        jQuery('.process-status').html('Uploading File...');
        var parentId = jQuery('[id$="parentId"]')[0].value;
        options = {
            errorHandler: function(msg) {
                saveInProgress = false;
                jQuery('#ballsWaveG').hide();
                jQuery('.form-errors').html(msg);
                jQuery('.form-errors').show();
                jQuery('.process-status').html('');
            },
            successHandler: function(result) {
                methodOneInJavascript(result.id);
                
            },
            uploadHanlder: {
                progress: function(loaded, total) {
                    var value = (loaded/total*100).toPrecision(4)
                    jQuery('.process-status').html('Uploading File... ' + value + '%');
                },
                load: function(evt) {
                    jQuery('.process-status').html('Saving data');
                }
            },
            //messageText: 'messageText', //message to display above uploaded file
            //contentTitle: 'title for the uploaded file', //it is set by default to filename'
            contentDescription: jQuery('[id$="fileName"]').val()
        };
        upload.sendFile('file-input', parentId,  options);
    }

    function prepareForm(){
      jQuery('[id$="fileMediaChannel"] option[value="BET Presentation"]').remove();

      if(jQuery('[id$="fileSubFunction"]')[0].value === 'Brand Development'){
        jQuery('[id$="fileAssetTypeArea"]').removeClass('elementHidden');
        jQuery('[id$="fileStatusArea"]').removeClass('elementHidden');
        if(jQuery('[id$="fileAssetType"]')[0].value === 'Creative Work'){
          jQuery('[id$="fileMediaChannelArea"').removeClass('elementHidden');
          jQuery('[id$="fileCountryArea"').removeClass('elementHidden');
        }
      }else if(jQuery('[id$="fileSubFunction"]')[0].value === 'Brand Building'){
        jQuery('[id$="fileMediaChannelArea"]').removeClass('elementHidden');
        jQuery('[id$="fileCountryArea"]').removeClass('elementHidden');
      }
    }

    function fileAssetTypeAction(value){
      jQuery('[id$="fileStatusArea"').removeClass('elementHidden');
      if(value === "Brand Experience Presentation"){
        jQuery('[id$="fileMediaChannelArea"]').addClass('elementHidden');
        jQuery('[id$="fileCountryArea"]').addClass('elementHidden');
      }else if(value === "Creative Work"){
        jQuery('[id$="fileMediaChannelArea"]').removeClass('elementHidden');
        jQuery('[id$="fileCountryArea"]').removeClass('elementHidden');
      }else{
        jQuery('[id$="fileMediaChannelArea"]').addClass('elementHidden');
        jQuery('[id$="fileCountryArea"]').addClass('elementHidden');
      }
    }
  </script>
  <style>
  .elementHidden{
    display: none;
  }
  .elem-label {
    width: 200px;
  }

  .clear{
    margin-top: 10px;
  }

  .elem{
    float: left;
  }

  .elem select, .elem input{
    width: 364px;
  }
  .elem table.multiSelectPicklistTable select {
    width: 169px!important;
  }
  .form-errors{
    display: none;
  }

  #ballsWaveG {
    display: none;
  }
  </style>
  <apex:outputPanel layout="block" id="maincontainer" rendered="{!displayForm}">
      <script>
        jQuery( document ).ready(function() {
          saveInProgress = false;
          prepareForm();

          jQuery('[id$="fileAssetType"]').on('change', function(){
            if(jQuery('[id$="fileSubFunction"]')[0].value !== null && jQuery('[id$="fileSubFunction"]')[0].value !== ''){
              fileAssetTypeAction(this.value);
            }          
          });

          if ( jQuery('[id$="runJsSuccess"]').val() == "true" ){
            window.top.postMessage(
            {
              action: 'saveAsset', 
              presentation: jQuery('[id$="isPresentationUploaded"]').val() == 'true',
              msg: jQuery('[id$="message"]').val()
            }, 
            document.location.protocol + '//' + document.domain
            );
          }
        });


        function toogleExpectedAssetsComponent(typeValue){
          if(typeValue == 'Brand Experience Presentation'){
            jQuery('#expectedAssetComp').show();
          } else {
            jQuery('#expectedAssetComp').hide();
          }
        }

      </script>
      <apex:form >
        <input id="parentId" type="hidden" name="parentId" value="{!parentId}" />
        <apex:inputHidden value="{!runJsSuccess}" id="runJsSuccess"/>
        <apex:inputHidden value="{!isPresentationUploaded}" id="isPresentationUploaded"/>
        <apex:inputHidden value="{!message}" id="message"/>
        <p>Please provide metadata and select file to upload.</p>
        <br />
        <div id="fileNameArea">
          <apex:outputPanel >
            <input id="file-input" type="file" name="file"/>
            <div class="clear">&nbsp;</div>
            <div class="elem-label"><apex:outputLabel >Asset Name</apex:outputLabel></div>
            <div class="elem"><apex:inputField value="{!file.Name}" id="fileName" /></div>
          </apex:outputPanel>
          <div class="clear">&nbsp;</div>
        </div>
        <div id="fileSubFunctionArea" class="elementHidden">
          <apex:outputPanel >
            <div class="elem-label"><apex:outputLabel >Sub Function</apex:outputLabel></div> 
            <div class="elem"><apex:inputField value="{!file.Sub_Function__c}" id="fileSubFunction"/></div>
          </apex:outputPanel>
        </div>
        <div id="fileAssetTypeArea" class="elementHidden">
          <apex:outputPanel >
            <div class="elem-label"><apex:outputLabel >Type</apex:outputLabel></div> 
            <div class="elem"><apex:inputField value="{!file.Studio_Asset_Type__c}" id="fileAssetType" onchange="toogleExpectedAssetsComponent(this.value);"/></div>
          </apex:outputPanel>
          <div class="clear">&nbsp;</div>
        </div>       
        <div id="fileMediaChannelArea" class="elementHidden">
          <apex:outputPanel >
            <div class="elem-label"><apex:outputLabel >Media Type</apex:outputLabel></div> 
            <div class="elem"><apex:inputField value="{!file.Media_Type__c}" id="fileMediaChannel"/></div>
          </apex:outputPanel>
          <div class="clear">&nbsp;</div>
        </div>
        <div id="fileCountryArea" class="elementHidden">
          <apex:outputPanel >
            <div class="elem-label"><apex:outputLabel >Country</apex:outputLabel></div> 
            <div class="elem"><apex:inputField value="{!file.Country__c}" id="fileCountry"/></div>
          </apex:outputPanel>
          <div class="clear">&nbsp;</div>
        </div>
        <div id="fileStatusArea">
          <apex:outputPanel rendered="{!hasModifyAccess}">
            <div class="elem-label"><apex:outputLabel >Status</apex:outputLabel></div> 
            <div class="elem"><apex:inputField value="{!file.Status__c}" id="fileStatus"/></div>
            <div class="clear">&nbsp;</div>
          </apex:outputPanel>
        </div>

        <div id="expectedAssetComp" style="position: absolute; top: 10px; left: 500px;display:none;">
          <c:BET_ExpectedAssetsComponent betId="{!bet.id}" />
        </div>

        <input id="resultFileId" type="hidden" name="resultFileId" value="{!file.Id}" />
        <br />        
        <p class="form-errors"></p> 
        <br />
        <input type="button" value="Upload & save" onclick="saveForm();"/> 
        <p class="process-status"></p> 
        <div id="ballsWaveG">
          <div id="ballsWaveG_1" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_2" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_3" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_4" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_5" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_6" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_7" class="ballsWaveG">
          </div>
          <div id="ballsWaveG_8" class="ballsWaveG">
          </div>
        </div>

        <apex:actionFunction id = "saveAndSaveExpected" action = "{!saveFileAndConnect}" 
                             name = "methodOneInJavascript"
                             oncomplete="saveExpAssetsOne();" reRender="maincontainer">
          <apex:param name="firstParam" assignTo="{!feedid}" value = "" />
        </apex:actionFunction> 

        <apex:pageMessages />
      </apex:form>
  </apex:outputPanel>
  <apex:outputPanel rendered="{!displayForm == false}">
    <br />
    <p>{!errorMessage}</p>
    <br />
  </apex:outputPanel>
</apex:page>