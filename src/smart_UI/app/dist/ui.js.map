{"version":3,"file":"ui.js","sources":["webpack:///app/src/ui/index.jsx","webpack:///./~/chartist/dist/chartist.min.css","webpack:///./app/styles/style.less","webpack:///app/src/ui/controller/PromotionCalendar.jsx","webpack:///app/src/ui/components/AppHeader.jsx","webpack:///app/src/ui/components/Truncate.jsx","webpack:///./~/react-truncate/lib/Truncate.js","webpack:///app/src/ui/components/SidePanel.jsx","webpack:///app/src/ui/promcalendar/CalendarHeader.jsx","webpack:///app/src/actions/PromCalendarActions.js","webpack:///./~/fbjs/lib/keyMirror.js","webpack:///app/src/ui/components/Popover.jsx","webpack:///app/src/ui/promcalendar/NewPromotion.jsx","webpack:///app/src/ui/components/Form.jsx","webpack:///app/src/ui/promCalendar/PromotionCalendarGrid.jsx","webpack:///app/src/ui/promCalendar/PromotionDetail.jsx","webpack:///app/src/ui/components/ConfirmPopup.jsx","webpack:///app/src/ui/promCalendar/CalendarFilter.jsx","webpack:///app/src/ui/components/Multiselection.jsx","webpack:///app/src/ui/components/RemovablePill.jsx","webpack:///app/src/ui/promCalendar/InitCalendar.jsx","webpack:///app/src/ui/controller/PromotionPlanning.jsx","webpack:///app/src/ui/promotion/Drilldown.jsx","webpack:///app/src/ui/components/ACLCheck.jsx","webpack:///app/src/ui/promotion/PromotionOverview.jsx","webpack:///app/src/ui/components/Tile.jsx","webpack:///app/src/ui/components/LineChart.jsx","webpack:///app/src/ui/components/StackedChart.jsx","webpack:///app/src/ui/components/HorizontalChart.jsx","webpack:///app/src/ui/components/HorizontalBarChart.jsx","webpack:///app/src/ui/promotion/PromotionAttachments.jsx","webpack:///app/src/actions/PromotionActions.js","webpack:///app/src/ui/components/ImagePopup.jsx","webpack:///app/src/ui/components/UploadPopup.jsx","webpack:///app/src/ui/promotion/PromotionPlanningPromotionEdit.jsx","webpack:///app/src/ui/components/Variant.jsx","webpack:///app/src/ui/promotion/PromotionChildAccounts.jsx","webpack:///app/src/ui/promotion/TacticOverview.jsx","webpack:///app/src/ui/promotion/TacticFunds.jsx","webpack:///app/src/ui/promotion/FundLookup.jsx","webpack:///app/src/ui/promotion/TacticTiers.jsx","webpack:///app/src/ui/promotion/PromotionPlanningTacticEdit.jsx","webpack:///app/src/ui/promotion/ProductGrid.jsx","webpack:///app/src/ui/promotion/ProductFilter.jsx","webpack:///app/src/ui/promotion/ProductLookup.jsx","webpack:///app/src/ui/calculationgrid/PromotionPlanningCalculationGridPage.jsx","webpack:///app/src/ui/components/MessagePopup.jsx","webpack:///app/src/ui/components/Modal.jsx","webpack:///app/src/ui/components/Top.jsx"],"sourcesContent":["\"use strict\";\r\n\r\nrequire('animate.css');\r\nrequire('chartist.css');\r\nrequire('../../styles/style.less');\r\n\r\n//Import 3rd party libraries\r\nglobal.React = require('react');\r\nglobal.ReactDOM = require('react-dom');\r\nglobal.PromotionCalendar = require('./controller/PromotionCalendar');\r\nglobal.PromotionPlanning = require('./controller/PromotionPlanning');\r\nglobal.Modal = require('./components/Modal');\r\nglobal.Top = require('./components/Top');\r\nglobal.PromotionActions = require('../actions/PromotionActions').PromotionActions;\r\nglobal.UI = { moment: require('moment') };//[US] 366271 \r\nvar _reactLightningDesignSystem = require('react-lightning-design-system');\r\n\r\n//SF resources\r\nif (typeof sfldsURL !== 'undefined') {\r\n    _reactLightningDesignSystem.util.setAssetRoot(sfldsURL);\r\n}\r\n\r\n//Common things\r\nvar preventDefault = e => e.preventDefault();\r\n\r\naddEventListener('dragover', preventDefault);\r\naddEventListener('drop', preventDefault);\r\n\r\nAppManager.init().then(() => {\r\n    require('moment').locale(AppSettings.get('locale'));\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/index.jsx","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/chartist/dist/chartist.min.css\n// module id = 279\n// module chunks = 2","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./app/styles/style.less\n// module id = 281\n// module chunks = 2","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar AppHeader = require('../components/AppHeader');\r\nvar SidePanel = require('../components/SidePanel');\r\n\r\nvar CalendarHeader = require('../promcalendar/CalendarHeader');\r\nvar PromotionCalendarGrid = require('../promCalendar/PromotionCalendarGrid');\r\nvar CalendarFilter = require('../promCalendar/CalendarFilter');\r\nvar InitCalendar = require('../promCalendar/InitCalendar');\r\n\r\nvar PromCalendarActions = require('../../actions/PromCalendarActions').PromCalendarActions;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'PromotionCalendar',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            calendar: null,\r\n            promotionDetailData: null,\r\n            showFilter: false\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        this.busHandlerID = UI_EVENT_BUS.subscribe(EVENTS.UI_BINDING, this.onUIBinding);\r\n        window.addEventListener('resize', this.handleResize);\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        UI_EVENT_BUS.unsubscribe(this.busHandlerID);\r\n        window.removeEventListener('resize', this.handleResize);\r\n    },\r\n\r\n    handleResize: function () {\r\n        this.forceUpdate();\r\n    },\r\n\r\n    onUIBinding: function (payload) {\r\n        this.setState(payload)\r\n    },\r\n\r\n    toggleFilter: function () {\r\n        var me = this;\r\n        PromCalendarActions.cancelChangeCalendarFilter();\r\n        this.setState({showFilter: !this.state.showFilter}, ()=> {\r\n                me.refs.CalendarGrid.forceUpdate();\r\n            }\r\n        );\r\n    },\r\n\r\n    saveFilter: function (filterData) {\r\n        var me = this;\r\n        PromCalendarActions.changeCalendarFilter(this.state.calendar.FilterCriteria);\r\n        this.setState({showFilter: !this.state.showFilter}, ()=> {\r\n                me.refs.CalendarGrid.forceUpdate();\r\n            }\r\n        );\r\n    },\r\n\r\n    addPromotion: function (promotion) {\r\n        console.log('addPromotion...');\r\n        PromCalendarActions.addPromotion(promotion);\r\n    },\r\n\r\n    saveSettingsHandler: function (filterData) {\r\n        this.state.calendar.showInitialSettings = false;\r\n        this.setState({calendar: this.state.calendar});\r\n        PromCalendarActions.changeCalendarFilter(this.state.calendar.FilterCriteria);\r\n    },\r\n\r\n    cancelSettingsHandler: function () {\r\n        this.state.calendar.showInitialSettings = false;\r\n        this.setState({calendar: this.state.calendar});\r\n        PromCalendarActions.changeCalendarFilter(null);\r\n    },\r\n\r\n    render: function () {\r\n\r\n        return (\r\n            <div className=\"mainSection promotionCalendar\">\r\n                {(this.state.calendar && this.state.calendar.showInitialSettings) ?\r\n                    <InitCalendar calendar={this.state.calendar} saveHandler={this.saveSettingsHandler}\r\n                                  cancelHandler={this.cancelSettingsHandler}/> : null}\r\n                <CalendarHeader showFilter={this.state.showFilter} toggleFilter={this.toggleFilter}\r\n                                addPromotion={this.addPromotion} calendar={this.state.calendar}/>\r\n                <div className=\"vertical-flex\">\r\n                    <div className=\"slds-col slds-grid slds-grid--vertical-stretch\">\r\n                        <PromotionCalendarGrid ref=\"CalendarGrid\" calendar={this.state.calendar}\r\n                                               promotionDetailData={this.state.promotionDetailData}/>\r\n\r\n                        {(this.state.showFilter) ? <CalendarFilter\r\n                            calendar={this.state.calendar} closeHandler={this.toggleFilter}\r\n                            saveHandler={()=>this.saveFilter()}/> : null}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/controller/PromotionCalendar.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar Truncate = require('../components/Truncate');\r\n\r\nmodule.exports = React.createClass({\r\n    render: function () {\r\n        var icon = null;\r\n\r\n        if (this.props.icon && this.props.icon.indexOf('.') == -1) {\r\n            icon = <Icon category=\"standard\" icon={this.props.icon} size=\"large\" />\r\n        }\r\n        else {\r\n            icon = <span className=\"slds-avatar\">\r\n                   <img src={Utils.HTTP.getImgUrl(this.props.icon)} alt=\"promo\" />\r\n            </span>\r\n        }\r\n\r\n        return (\r\n            <div className=\"slds-page-header\" role=\"banner\">\r\n                <div className=\"slds-media slds-media--center\">\r\n                    <div className=\"slds-media__figure\">{icon}\r\n                    </div>\r\n                    <div className=\"slds-media__body\">\r\n                        <div className=\"slds-page-header__title slds-truncate slds-align-middle\">\r\n                            <Truncate lines={1}\r\n                                      children={this.props.title}>\r\n                            </Truncate>\r\n                        </div>\r\n\r\n                        <p className=\"slds-text-body--small slds-page-header__info\">{this.props.subtitle} </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/AppHeader.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Truncate = require('react-truncate');\r\n\r\nmodule.exports = React.createClass({\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            truncate: false\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        const canvas = document.createElement('canvas');\r\n        this.canvas = canvas.getContext('2d');\r\n\r\n        const style = window.getComputedStyle(this.refs.container);\r\n\r\n        const font = [\r\n            style['font-weight'],\r\n            style['font-style'],\r\n            style['font-size'],\r\n            style['font-family']\r\n        ].join(' ');\r\n\r\n        this.canvas.font = font;\r\n\r\n        this.checkWidth(this.props.children);\r\n\r\n        window.addEventListener('resize', this.onResize);\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        window.removeEventListener('resize', this.onResize);\r\n    },\r\n\r\n    onResize: function () {\r\n        this.checkWidth(this.props.children);\r\n    },\r\n\r\n    checkWidth: function (text) {\r\n        const textWidth = this.canvas.measureText(text).width;\r\n\r\n        var parentNode = this.refs.container.parentNode; //span - not truncated\r\n        if (!parentNode) {\r\n            parentNode = this.refs.container.refs.target.parentNode; //truncate component\r\n        }\r\n\r\n        const targetWidth = parentNode.getBoundingClientRect().width;\r\n\r\n        this.setState({\r\n            truncate: textWidth !== targetWidth\r\n        });\r\n    },\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.children !== prevProps.children) {\r\n            this.checkWidth(this.props.children);\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        if (this.state.truncate)\r\n            return (\r\n                <Truncate ref=\"container\" lines={this.props.lines}\r\n                          onTruncate={this.props.onTruncate}\r\n                          children={this.props.children}>\r\n                </Truncate>);\r\n        else\r\n            return <span ref='container'>{this.props.children}</span>;\r\n\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Truncate.jsx","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Truncate = function (_Component) {\n    _inherits(Truncate, _Component);\n\n    function Truncate() {\n        var _ref;\n\n        _classCallCheck(this, Truncate);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = _possibleConstructorReturn(this, (_ref = Truncate.__proto__ || Object.getPrototypeOf(Truncate)).call.apply(_ref, [this].concat(args)));\n\n        _this.state = {};\n        _this.styles = {\n            ellipsis: {\n                position: 'fixed',\n                visibility: 'hidden',\n                top: 0,\n                left: 0\n            }\n        };\n\n\n        _this.onResize = _this.onResize.bind(_this);\n        _this.onTruncate = _this.onTruncate.bind(_this);\n        _this.calcTargetWidth = _this.calcTargetWidth.bind(_this);\n        _this.measureWidth = _this.measureWidth.bind(_this);\n        _this.getLines = _this.getLines.bind(_this);\n        _this.renderLine = _this.renderLine.bind(_this);\n        return _this;\n    }\n\n    _createClass(Truncate, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            var _refs = this.refs,\n                text = _refs.text,\n                ellipsis = _refs.ellipsis,\n                calcTargetWidth = this.calcTargetWidth,\n                onResize = this.onResize;\n\n\n            var canvas = document.createElement('canvas');\n            this.canvas = canvas.getContext('2d');\n\n            // Keep node in document body to read .offsetWidth\n            document.body.appendChild(ellipsis);\n\n            calcTargetWidth(function () {\n                // Node not needed in document tree to read its content\n                if (text) {\n                    text.parentNode.removeChild(text);\n                }\n            });\n\n            window.addEventListener('resize', onResize);\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            // Render was based on outdated refs and needs to be rerun\n            if (this.props.children !== prevProps.children) {\n                this.forceUpdate();\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            var ellipsis = this.refs.ellipsis,\n                onResize = this.onResize,\n                timeout = this.timeout;\n\n\n            ellipsis.parentNode.removeChild(ellipsis);\n\n            window.removeEventListener('resize', onResize);\n\n            cancelAnimationFrame(timeout);\n        }\n\n        // Shim innerText to consistently break lines at <br/> but not at \\n\n\n    }, {\n        key: 'innerText',\n        value: function innerText(node) {\n            var div = document.createElement('div');\n            div.innerHTML = node.innerHTML.replace(/\\r\\n|\\r|\\n/g, ' ');\n\n            var text = div.innerText;\n\n            var test = document.createElement('div');\n            test.innerHTML = 'foo<br/>bar';\n\n            if (test.innerText.replace(/\\r\\n|\\r/g, '\\n') !== 'foo\\nbar') {\n                div.innerHTML = div.innerHTML.replace(/<br.*?[\\/]?>/gi, '\\n');\n                text = div.innerText;\n            }\n\n            return text;\n        }\n    }, {\n        key: 'onResize',\n        value: function onResize() {\n            this.calcTargetWidth();\n        }\n    }, {\n        key: 'onTruncate',\n        value: function onTruncate(didTruncate) {\n            var onTruncate = this.props.onTruncate;\n\n\n            if (typeof onTruncate === 'function') {\n                this.timeout = requestAnimationFrame(function () {\n                    onTruncate(didTruncate);\n                });\n            }\n        }\n    }, {\n        key: 'calcTargetWidth',\n        value: function calcTargetWidth(callback) {\n            var target = this.refs.target,\n                calcTargetWidth = this.calcTargetWidth,\n                canvas = this.canvas;\n\n            // Calculation is no longer relevant, since node has been removed\n\n            if (!target) {\n                return;\n            }\n\n            var targetWidth = target.parentNode.getBoundingClientRect().width;\n\n            // Delay calculation until parent node is inserted to the document\n            // Mounting order in React is ChildComponent, ParentComponent\n            if (!targetWidth) {\n                return requestAnimationFrame(function () {\n                    return calcTargetWidth(callback);\n                });\n            }\n\n            var style = window.getComputedStyle(target);\n\n            var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family'], style['letter-spacing'], style['word-spacing']].join(' ');\n\n            canvas.font = font;\n\n            this.setState({\n                targetWidth: targetWidth\n            }, callback);\n        }\n    }, {\n        key: 'measureWidth',\n        value: function measureWidth(text) {\n            return this.canvas.measureText(text).width;\n        }\n    }, {\n        key: 'ellipsisWidth',\n        value: function ellipsisWidth(node) {\n            return node.offsetWidth;\n        }\n    }, {\n        key: 'getLines',\n        value: function getLines() {\n            var refs = this.refs,\n                _props = this.props,\n                numLines = _props.lines,\n                ellipsis = _props.ellipsis,\n                targetWidth = this.state.targetWidth,\n                innerText = this.innerText,\n                measureWidth = this.measureWidth,\n                onTruncate = this.onTruncate;\n\n\n            var lines = [];\n            var text = innerText(refs.text);\n            var textLines = text.split('\\n').map(function (line) {\n                return line.split(' ');\n            });\n            var didTruncate = true;\n            var ellipsisWidth = this.ellipsisWidth(this.refs.ellipsis);\n\n            for (var line = 1; line <= numLines; line++) {\n                var textWords = textLines[0];\n\n                // Handle newline\n                if (textWords.length === 0) {\n                    lines.push();\n                    textLines.shift();\n                    line--;\n                    continue;\n                }\n\n                var resultLine = textWords.join(' ');\n\n                if (measureWidth(resultLine) <= targetWidth) {\n                    if (textLines.length === 1) {\n                        // Line is end of text and fits without truncating\n                        didTruncate = false;\n\n                        lines.push(resultLine);\n                        break;\n                    }\n                }\n\n                if (line === numLines) {\n                    // Binary search determining the longest possible line inluding truncate string\n                    var textRest = textWords.join(' ');\n\n                    var lower = 0;\n                    var upper = textRest.length - 1;\n\n                    while (lower <= upper) {\n                        var middle = Math.floor((lower + upper) / 2);\n\n                        var testLine = textRest.slice(0, middle + 1);\n\n                        if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {\n                            lower = middle + 1;\n                        } else {\n                            upper = middle - 1;\n                        }\n                    }\n\n                    resultLine = _react2.default.createElement(\n                        'span',\n                        null,\n                        textRest.slice(0, lower),\n                        ellipsis\n                    );\n                } else {\n                    // Binary search determining when the line breaks\n                    var _lower = 0;\n                    var _upper = textWords.length - 1;\n\n                    while (_lower <= _upper) {\n                        var _middle = Math.floor((_lower + _upper) / 2);\n\n                        var _testLine = textWords.slice(0, _middle + 1).join(' ');\n\n                        if (measureWidth(_testLine) <= targetWidth) {\n                            _lower = _middle + 1;\n                        } else {\n                            _upper = _middle - 1;\n                        }\n                    }\n\n                    // The first word of this line is too long to fit it\n                    if (_lower === 0) {\n                        // Jump to processing of last line\n                        line = numLines - 1;\n                        continue;\n                    }\n\n                    resultLine = textWords.slice(0, _lower).join(' ');\n                    textLines[0].splice(0, _lower);\n                }\n\n                lines.push(resultLine);\n            }\n\n            onTruncate(didTruncate);\n\n            return lines;\n        }\n    }, {\n        key: 'renderLine',\n        value: function renderLine(line, i, arr) {\n            if (i === arr.length - 1) {\n                return _react2.default.createElement(\n                    'span',\n                    { key: i },\n                    line\n                );\n            } else {\n                var br = _react2.default.createElement('br', { key: i + 'br' });\n\n                if (line) {\n                    return [_react2.default.createElement(\n                        'span',\n                        { key: i },\n                        line\n                    ), br];\n                } else {\n                    return br;\n                }\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var target = this.refs.target,\n                _props2 = this.props,\n                children = _props2.children,\n                ellipsis = _props2.ellipsis,\n                lines = _props2.lines,\n                spanProps = _objectWithoutProperties(_props2, ['children', 'ellipsis', 'lines']),\n                targetWidth = this.state.targetWidth,\n                getLines = this.getLines,\n                renderLine = this.renderLine,\n                onTruncate = this.onTruncate;\n\n            var text = void 0;\n\n            var mounted = !!(target && targetWidth);\n\n            if (typeof window !== 'undefined' && mounted) {\n                if (lines > 0) {\n                    text = getLines().map(renderLine);\n                } else {\n                    text = children;\n\n                    onTruncate(false);\n                }\n            }\n\n            delete spanProps.onTruncate;\n\n            return _react2.default.createElement(\n                'span',\n                _extends({}, spanProps, { ref: 'target' }),\n                text,\n                _react2.default.createElement(\n                    'span',\n                    { ref: 'text' },\n                    children\n                ),\n                _react2.default.createElement(\n                    'span',\n                    { ref: 'ellipsis', style: this.styles.ellipsis },\n                    ellipsis\n                )\n            );\n        }\n    }]);\n\n    return Truncate;\n}(_react.Component);\n\nTruncate.propTypes = {\n    children: _react.PropTypes.node,\n    ellipsis: _react.PropTypes.node,\n    lines: _react.PropTypes.oneOfType([_react.PropTypes.oneOf([false]), _react.PropTypes.number]),\n    onTruncate: _react.PropTypes.func\n};\nTruncate.defaultProps = {\n    children: '',\n    ellipsis: '…',\n    lines: 1\n};\nexports.default = Truncate;\n;\nmodule.exports = exports['default'];\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/react-truncate/lib/Truncate.js\n// module id = 604\n// module chunks = 2","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nmodule.exports = React.createClass({\r\n    render: function () {\r\n        var klass = 'slds-col side-panel ' + (this.props.animated ? 'animated ' : '') + (this.props.invalid ? 'invalid' : '' );\r\n\r\n        return (\r\n            <div className={klass}>\r\n                <div className=\"side-panel-header slds-clearfix slds-p-around--small slds-text-heading--medium\">\r\n                    <div className=\"slds-float--left \">\r\n                        <p>{AppManager.getLabel(\"PC_LBL_FILTERS\") || 'Filters'}</p>\r\n                    </div>\r\n                    <div className=\"slds-float--right\">\r\n                        <Button className=\"close-button\" icon=\"forward\" size=\"small\" onClick={this.props.closeHandler}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"side-panel-body\">\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/SidePanel.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar ButtonGroup = require('react-lightning-design-system').ButtonGroup;\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar DropdownButton = require('react-lightning-design-system').DropdownButton;\r\nvar MenuItem = require('react-lightning-design-system').MenuItem;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar PromCalendarActions = require('../../actions/PromCalendarActions').PromCalendarActions;\r\nvar Popover = require('../components/Popover');\r\n\r\nvar NewPromotion = require('./NewPromotion');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'CalendarHeader',\r\n\r\n    getInitialState: function () {\r\n        return {showNewPromotion: false}\r\n    },\r\n\r\n    showNewPromotion: function () {\r\n        this.setState({showNewPromotion: true})\r\n    },\r\n\r\n    cancelNewPromotion: function () {\r\n        this.setState({showNewPromotion: false})\r\n    },\r\n\r\n    saveNewPromotion: function (promotion) {\r\n        this.setState({showNewPromotion: false});\r\n        this.props.addPromotion(promotion);\r\n    },\r\n\r\n\r\n    render: function () {\r\n        var filterIcon = 'Filter' + ((this.props.calendar && this.props.calendar.isFilterSet) ? '-set' : '') + ((this.props.showFilter) ? '_active' : '') + '.png';\r\n        return (\r\n            <div className=\"slds-grid slds-page-header\">\r\n                <div className=\"slds-col\">\r\n                    <div className=\"slds-media slds-media--center\">\r\n                        <div className=\"slds-media__figure\">\r\n\r\n                            <img src={Utils.HTTP.getImgUrl('Icon_Calendar.png')}/>\r\n                        </div>\r\n\r\n                        <div className=\"slds-media__body\">\r\n                            <p className=\"slds-text-heading--medium \">Trade Calendar</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"slds-col\"></div>\r\n\r\n                <div className=\"slds-col header-buttons\">\r\n                    <Button type={this.props.showFilter?'brand':'neutral'}\r\n                            onClick={()=>this.props.toggleFilter()}><img\r\n                        src={Utils.HTTP.getImgUrl(filterIcon)}/></Button>\r\n\r\n                    <Button type={this.state.showNewPromotion?'brand':'neutral'} ref=\"new-promotion\" icon='add'\r\n                            iconAlign='left' iconMore='' label='New '\r\n                            onClick={()=>this.showNewPromotion()} className=\"new-button\"/>\r\n                    {(!this.state.showNewPromotion) ? null :\r\n                        <Popover parent={this.refs[\"new-promotion\"]} direction=\"vertical\" nubbinMargin={12}\r\n                                 onClickOutside={this.cancelNewPromotion}>\r\n                            <NewPromotion\r\n                                cancelHandler={this.cancelNewPromotion} saveHandler={this.saveNewPromotion}\r\n                                calendar={this.props.calendar}/>\r\n                        </Popover>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promcalendar/CalendarHeader.jsx","\"use strict\";\r\n\r\nglobal._ = require('lodash');\r\n_.mixin({keyMirror: require('fbjs/lib/keyMirror')});\r\n\r\nglobal.PromCalendarActionConstants = _.keyMirror({\r\n    CALENDAR_LOAD: null,\r\n    ADD_PROMOTION: null,\r\n    PREVIOUS_PERIOD: null,\r\n    NEXT_PERIOD: null,\r\n    CHANGE_FILTER: null,\r\n    GET_PROMOTION_DETAIL: null,\r\n    OPEN_PROMOTION_DETAIL: null,\r\n    DERIVE_PROMOTION_DETAIL: null,\r\n    COPY_PROMOTION_DETAIL: null,\r\n    DELETE_PROMOTION_DETAIL: null,\r\n    CANCEL_CHANGE_FILTER: null\r\n});\r\n\r\nvar PromCalendarActions = {\r\n    load: function (payload) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.CALENDAR_LOAD,\r\n            payload: payload\r\n        });\r\n    },\r\n\r\n    addPromotion: function (promotion) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.ADD_PROMOTION,\r\n            payload: promotion\r\n        });\r\n    },\r\n\r\n    prevPeriod: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.PREVIOUS_PERIOD,\r\n            payload: null\r\n        });\r\n    },\r\n\r\n    nextPeriod: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.NEXT_PERIOD,\r\n            payload: null\r\n        });\r\n    },\r\n\r\n    changeCalendarFilter: function (filterValue) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.CHANGE_FILTER,\r\n            payload: filterValue\r\n        });\r\n    },\r\n    cancelChangeCalendarFilter: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.CANCEL_CHANGE_FILTER,\r\n            payload: null\r\n        });\r\n    },\r\n\r\n    getPromotionDetail: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.GET_PROMOTION_DETAIL,\r\n            payload: promotionId\r\n        });\r\n    },\r\n\r\n    openPromotionDetail: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.OPEN_PROMOTION_DETAIL,\r\n            payload: promotionId\r\n        });\r\n    },\r\n\r\n    derivePromotionDetail: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.DERIVE_PROMOTION_DETAIL,\r\n            payload: promotionId\r\n        });\r\n    },\r\n\r\n    copyPromotionDetail: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.COPY_PROMOTION_DETAIL,\r\n            payload: promotionId\r\n        });\r\n    },\r\n\r\n    deletePromotionDetail: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.DELETE_PROMOTION_DETAIL,\r\n            payload: promotionId\r\n        });\r\n    }\r\n};\r\n\r\nmodule.exports.PromCalendarActions = PromCalendarActions;\r\nmodule.exports.PromCalendarActionConstants = PromCalendarActionConstants;\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/actions/PromCalendarActions.js","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\nvar keyMirror = function keyMirror(obj) {\n  var ret = {};\n  var key;\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n    ret[key] = key;\n  }\n  return ret;\n};\n\nmodule.exports = keyMirror;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/fbjs/lib/keyMirror.js\n// module id = 608\n// module chunks = 2","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar classNames = require('classnames');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'Popover',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            top: 0,\r\n            left: 0,\r\n            parent: {\r\n                top: 0,\r\n                left: 0,\r\n                width: 0,\r\n                height: 0\r\n            },\r\n            container: {\r\n                width: 0,\r\n                height: 0\r\n            }\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        if (this.props.onClickOutside) {\r\n            document.addEventListener(\"click\", this.outsideClickHandler);\r\n        }\r\n\r\n        this.setPopoverPosition();\r\n    },\r\n\r\n    componentDidUpdate: function () {\r\n        this.setPopoverPosition();\r\n    },\r\n\r\n    setPopoverPosition: function () {\r\n        var parentElement = (this.props.parent) ? ReactDOM.findDOMNode(this.props.parent) : ReactDOM.findDOMNode(this).parentNode;\r\n        var parent = parentElement.getBoundingClientRect();\r\n        var container = this.refs.container.getBoundingClientRect();\r\n        var backgroundColor = this.props.backgroundColor || {};\r\n        var nubbinSize = this.props.nubbinMargin || 0;\r\n\r\n        const nubbinCornerTop = 37;\r\n        const nubbinCornerBottom = 40;\r\n        const nubbinCornerHorizontal = 33;\r\n        const exceedsTop = parent.top + parent.height / 2 < container.height / 2;\r\n        const exceedsBottom = parent.top + parent.height / 2 + container.height / 2 > window.innerHeight;\r\n        const exceedsLeft = parent.left + parent.width / 2 < container.width / 2;\r\n        const exceedsRight = parent.left + parent.width / 2 + container.width / 2 > window.innerWidth;\r\n\r\n        if (this.shouldPopoverUpdate(parent, container)) {\r\n            var position = null;\r\n            if (this.props.direction === 'horizontal') {\r\n                // if popover exceeds bottom side of the screen, change position to top\r\n                if (exceedsBottom) {\r\n                    if (exceedsLeft) {\r\n                        position = \"right-top\";\r\n                    }\r\n                    else if (exceedsRight) {\r\n                        position = \"left-top\";\r\n                    }\r\n                    else {\r\n                        position = \"top\";\r\n                    }\r\n                }\r\n                // if popover exceeds top side of the screen, change position to bottom\r\n                else if (exceedsTop) {\r\n                    if (exceedsLeft) {\r\n                        position = \"right-bottom\";\r\n                    }\r\n                    else if (exceedsRight) {\r\n                        position = \"left-bottom\";\r\n                    }\r\n                    else {\r\n                        position = \"bottom\";\r\n                    }\r\n                }\r\n                else if (parent.left > window.innerWidth / 2) {\r\n                    position = \"left\";\r\n                }\r\n                else {\r\n                    position = \"right\";\r\n                }\r\n            }\r\n            else if (this.props.direction === 'vertical') {\r\n                // if popover exceeds right side of the screen, change position to left\r\n                if (exceedsRight) {\r\n                    if (exceedsTop) {\r\n                        position = \"bottom-left\";\r\n                    }\r\n                    else if (exceedsBottom) {\r\n                        position = \"top-left\";\r\n                    }\r\n                    else {\r\n                        position = \"left\";\r\n                    }\r\n                }\r\n                // if popover exceeds left side of the screen, change position to left\r\n                else if (exceedsLeft) {\r\n                    if (exceedsTop) {\r\n                        position = \"bottom-right\";\r\n                    }\r\n                    else if (exceedsBottom) {\r\n                        position = \"top-right\";\r\n                    }\r\n                    else {\r\n                        position = \"right\";\r\n                    }\r\n                }\r\n                else if (parent.top > window.innerHeight / 2) {\r\n                    position = \"top\";\r\n                }\r\n                else {\r\n                    position = \"bottom\";\r\n                }\r\n            }\r\n\r\n            switch (position) {\r\n                case \"top\":\r\n                    this.setState({\r\n                        position: \"top\",\r\n                        top: parent.top - (container.height + nubbinSize),\r\n                        left: (parent.left + parent.width / 2) - (container.width / 2),\r\n                        color: backgroundColor.top\r\n                    });\r\n                    break;\r\n                case \"top-left\":\r\n                    this.setState({\r\n                        position: \"top-left\",\r\n                        top: parent.top - (container.height + nubbinSize),\r\n                        left: (parent.left + parent.width / 2 + nubbinCornerHorizontal) - container.width,\r\n                        color: backgroundColor.top\r\n                    });\r\n                    break;\r\n                case \"top-right\":\r\n                    this.setState({\r\n                        position: \"top-right\",\r\n                        top: parent.top - (container.height + nubbinSize),\r\n                        left: parent.left + parent.width / 2 - nubbinCornerHorizontal,\r\n                        color: backgroundColor.top\r\n                    });\r\n                    break;\r\n                case \"bottom\":\r\n                    this.setState({\r\n                        position: \"bottom\",\r\n                        top: parent.top + parent.height + nubbinSize,\r\n                        left: (parent.left + parent.width / 2) - (container.width / 2),\r\n                        color: backgroundColor.bottom\r\n                    });\r\n                    break;\r\n                case \"bottom-left\":\r\n                    this.setState({\r\n                        position: \"bottom-left\",\r\n                        top: parent.top + parent.height + nubbinSize,\r\n                        left: (parent.left + parent.width / 2 + nubbinCornerHorizontal) - container.width,\r\n                        color: backgroundColor.bottom\r\n                    });\r\n                    break;\r\n                case \"bottom-right\":\r\n                    this.setState({\r\n                        position: \"bottom-right\",\r\n                        top: parent.top + parent.height + nubbinSize,\r\n                        left: parent.left + parent.width / 2 - nubbinCornerHorizontal,\r\n                        color: backgroundColor.bottom\r\n                    });\r\n                    break;\r\n                case \"left\":\r\n                    this.setState({\r\n                        position: \"left\",\r\n                        top: (parent.top + parent.height / 2) - (container.height / 2),\r\n                        left: (parent.left) - (container.width + nubbinSize),\r\n                        color: backgroundColor.left\r\n                    });\r\n                    break;\r\n                case \"left-bottom\":\r\n                    this.setState({\r\n                        position: \"left-bottom\",\r\n                        top: parent.top + parent.height / 2 - nubbinCornerTop,\r\n                        left: (parent.left) - (container.width + nubbinSize),\r\n                        color: backgroundColor.left\r\n                    });\r\n                    break;\r\n                case \"left-top\":\r\n                    this.setState({\r\n                        position: \"left-top\",\r\n                        top: (parent.top + parent.height / 2 + nubbinCornerBottom) - container.height,\r\n                        left: (parent.left) - (container.width + nubbinSize),\r\n                        color: backgroundColor.left\r\n                    });\r\n                    break;\r\n                case \"right\":\r\n                    this.setState({\r\n                        position: \"right\",\r\n                        top: (parent.top + parent.height / 2) - (container.height / 2),\r\n                        left: parent.left + parent.width + nubbinSize,\r\n                        color: backgroundColor.right\r\n                    });\r\n                    break;\r\n                case \"right-bottom\":\r\n                    this.setState({\r\n                        position: \"right-bottom\",\r\n                        top: parent.top + parent.height / 2 - nubbinCornerTop,\r\n                        left: parent.left + parent.width + nubbinSize,\r\n                        color: backgroundColor.right\r\n                    });\r\n                    break;\r\n                case \"right-top\":\r\n                    this.setState({\r\n                        position: \"right-top\",\r\n                        top: (parent.top + parent.height / 2 + nubbinCornerBottom) - container.height,\r\n                        left: parent.left + parent.width + nubbinSize,\r\n                        color: backgroundColor.right\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n\r\n    shouldPopoverUpdate: function (nextParent, nextContainer) {\r\n        var parent = this.state.parent;\r\n        var container = this.state.container;\r\n        var update = false;\r\n\r\n        if (parent.top !== nextParent.top ||\r\n            parent.left !== nextParent.left ||\r\n            parent.height !== nextParent.height ||\r\n            parent.width !== nextParent.width) {\r\n            this.setState({\r\n                parent: {\r\n                    top: nextParent.top,\r\n                    left: nextParent.left,\r\n                    width: nextParent.width,\r\n                    height: nextParent.height\r\n                }\r\n            });\r\n            update = true;\r\n        }\r\n\r\n        if (container.height !== nextContainer.height ||\r\n            container.width !== nextContainer.width) {\r\n            this.setState({\r\n                container: {\r\n                    width: nextContainer.width,\r\n                    height: nextContainer.height\r\n                }\r\n            });\r\n            update = true;\r\n        }\r\n\r\n        return update;\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        if (this.props.onClickOutside) {\r\n            document.removeEventListener(\"click\", this.outsideClickHandler);\r\n        }\r\n    },\r\n\r\n    outsideClickHandler: function (event) {\r\n        const container = ReactDOM.findDOMNode(this.refs.container);\r\n\r\n        if (!container.contains(event.target)) {\r\n            this.props.onClickOutside();\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        var stylePopover = {\r\n            position: 'fixed',\r\n            top: this.state.top,\r\n            left: this.state.left,\r\n            background: this.state.color\r\n        };\r\n\r\n        var style = _.assign(stylePopover, this.props.style);\r\n\r\n        var popoverClass = classNames({\r\n            'slds-popover': true,\r\n            'slds-popover--panel': true,\r\n            'slds-nubbin--top': this.state.position === 'bottom',\r\n            'slds-nubbin--top-right': this.state.position === 'bottom-left',\r\n            'slds-nubbin--top-left': this.state.position === 'bottom-right',\r\n            'slds-nubbin--right': this.state.position === 'left',\r\n            'slds-nubbin--right-top': this.state.position === 'left-bottom',\r\n            'slds-nubbin--right-bottom': this.state.position === 'left-top',\r\n            'slds-nubbin--bottom': this.state.position === 'top',\r\n            'slds-nubbin--bottom-right': this.state.position === 'top-left',\r\n            'slds-nubbin--bottom-left': this.state.position === 'top-right',\r\n            'slds-nubbin--left': this.state.position === 'right',\r\n            'slds-nubbin--left-top': this.state.position === 'right-bottom',\r\n            'slds-nubbin--left-bottom': this.state.position === 'right-top'\r\n        }, this.props.className);\r\n\r\n        return (<div className={popoverClass} role=\"dialog\" ref=\"container\" style={style}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Popover.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar DateInput = require('react-lightning-design-system').DateInput\r\nvar Picklist = require('react-lightning-design-system').Picklist;\r\nvar PicklistItem = require('react-lightning-design-system').PicklistItem;\r\nvar Row = require('react-lightning-design-system').Row;\r\nvar Form = require('../components/Form');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'NewPromotion',\r\n\r\n    getInitialState: function () {\r\n        var initialPromotionTemplate = null;\r\n        if (this.props.calendar.active_promotion_templates.length > 0) {\r\n            initialPromotionTemplate = this.props.calendar.active_promotion_templates[0];\r\n        }\r\n\r\n        var initialAccount = null;\r\n        if (this.props.calendar.accounts.length > 0) {\r\n            initialAccount = this.props.calendar.accounts[0].Id;\r\n        }\r\n\r\n        var initialAccountSet = null;\r\n        if (this.props.calendar.accountSet.length > 0) {\r\n            initialAccountSet = this.props.calendar.accountSet[0].Id;\r\n        }\r\n\r\n        return {\r\n            promotion: {\r\n                Slogan__c: '',\r\n                Date_From__c: new Date(),\r\n                account: initialAccount,\r\n                accountSet: initialAccountSet,\r\n                promotion_template: initialPromotionTemplate,\r\n                period: 'week',\r\n                duration: 1\r\n            },\r\n\r\n            periods: [\r\n                {value: 'day', label: AppManager.getLabel('PC_LBL_DAYS') || 'Days'},\r\n                {value: 'week', label: AppManager.getLabel('PC_LBL_WEEKS') || 'Weeks'},\r\n                {value: 'month', label: AppManager.getLabel('PC_LBL_MONTHS') || 'Months'}\r\n            ]\r\n        }\r\n    },\r\n\r\n    onFieldChange: function (field, newValue) {\r\n        var modifiedPromotion = this.state.promotion;\r\n        modifiedPromotion[field] = newValue;\r\n        this.setState({promotion: modifiedPromotion});\r\n    },\r\n\r\n    onSave: function () {\r\n        this.props.saveHandler(this.state.promotion);\r\n    },\r\n\r\n    onCancel: function () {\r\n        this.props.cancelHandler();\r\n    },\r\n\r\n    render: function () {\r\n        var accountDropdown = null;\r\n        var promotion_template = this.state.promotion.promotion_template;\r\n\r\n        if (promotion_template !== null) {\r\n            if (promotion_template.Anchor_Type === 'Customer') {\r\n                accountDropdown =\r\n                    <div>\r\n                        <div className=\"new-promotion-label\">\r\n                            <span className=\"required\">*</span><span>{' ' + AppManager.getLabel('PC_LBL_ANCHOR_CUSTOMER') || 'Anchor Customer'}</span>\r\n                        </div>\r\n                        <Picklist value={ this.state.promotion.account }\r\n                                  onValueChange={ (value) => this.onFieldChange('account',  value) }>\r\n                            {this.props.calendar.accounts.map((a, i) => {\r\n                            return <PicklistItem key={ i + 1 } value={a.Id} label={a.Label} />;\r\n                            })}\r\n                        </Picklist>\r\n                    </div>;\r\n            }\r\n            else if (promotion_template.Anchor_Type === 'CustomerSet') {\r\n                accountDropdown =\r\n                    <div>\r\n                        <div className=\"new-promotion-label\">\r\n                            <span className=\"required\">*</span><span>{' ' + AppManager.getLabel('PC_LBL_ANCHOR_CUSTOMER_SET') || 'Anchor Customer Set'}</span>\r\n                        </div>\r\n                        <Picklist value={ this.state.promotion.accountSet }\r\n                                  onValueChange={ (value) => this.onFieldChange('accountSet',  value) }>\r\n                            {this.props.calendar.accountSet.map((a, i) => {\r\n                            return <PicklistItem key={ i + 1 } value={a.Id} label={a.Label} />;\r\n                            })}\r\n                        </Picklist>\r\n                    </div>;\r\n            }\r\n        }\r\n\r\n        var fields = [\r\n            {\r\n                component:  <div>\r\n                <div className=\"new-promotion-label\">\r\n                <span className=\"required\">*</span><span>{' ' + AppManager.getLabel('PC_LBL_SLOGAN') || 'Slogan'}</span>\r\n                </div>\r\n                    <Input type='text'\r\n                           className=\"slds-m-bottom--medium\"\r\n                           onChange={ (e,value) => this.onFieldChange('Slogan__c',  value) }\r\n                           onClick={(e)=>e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                           value={this.state.promotion.Slogan__c} />\r\n                </div>,\r\n                required: true,\r\n                value:this.state.promotion.Slogan__c\r\n            },\r\n            {\r\n                component: <div>\r\n                <div className=\"new-promotion-label\">\r\n                <span className=\"required\">*</span><span>{' ' + AppManager.getLabel('PC_LBL_START') || 'Start'}</span>\r\n                </div>\r\n                    <DateInput placeholder={AppSettings.get('dateFormat')}\r\n                               onValueChange={ (value) => this.onFieldChange('Date_From__c', value) }\r\n                               dateFormat={AppSettings.get('dateFormat')}\r\n                               onClick={(e)=>e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                               value={Utils.Converters.TS2Date(this.state.promotion.Date_From__c,'YYYY-MM-DD')} />\r\n                </div>,\r\n                required: true,\r\n                isValid:val=> val!='' && val.toString() !='Invalid date',\r\n                value:Utils.Converters.TS2Date(this.state.promotion.Date_From__c,'YYYY-MM-DD')\r\n            },\r\n            {\r\n                component: <div className=\"slds-form-element slds-m-top--medium slds-m-bottom--medium\">\r\n                        <label className=\"slds-form-element__label\">\r\n                            <span className=\"required\">*</span><span>{' ' + AppManager.getLabel('PP_LBL_DURATION') || 'Duration'}</span>\r\n                        </label>\r\n\r\n                        <div className=\"slds-grid\">\r\n                            <div className=\"slds-m-right--medium\">\r\n                                <Input className=\"new-promotion-duration-input\"\r\n                                       type='text'\r\n                                       onChange={ (e,value) => this.onFieldChange('duration',  value) }\r\n                                       onClick={(e)=>e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                                       value={this.state.promotion.duration}\r\n                                       maxLength={3} />\r\n                            </div>\r\n\r\n                            <div className=\"slds-col\">\r\n                                <Picklist value={ this.state.promotion.period }\r\n                                          onValueChange={ (value) => this.onFieldChange('period',  value) }>\r\n                                    { this.state.periods.map((a, i) => {\r\n                                    return <PicklistItem key={ i + 1 } value={a.value} label={a.label} />;\r\n                                    })}\r\n                                </Picklist>\r\n                            </div>\r\n                        </div>\r\n                </div>,\r\n                required: true,\r\n                isValid:val=> !isNaN(val) && parseInt(val)>0,\r\n                value:this.state.promotion.duration\r\n            },\r\n            {\r\n                component: <div className=\"slds-m-bottom--medium\">\r\n                        <div className=\"new-promotion-label\">\r\n                        <span className=\"required\">*</span><span>{' ' + AppManager.getLabel('PC_LBL_PROMOTION_TEMPLATE') || 'Promotion Template'}</span>\r\n                        </div>\r\n                        <Picklist value={ this.state.promotion.promotion_template }\r\n                                  onValueChange={ (value) => this.onFieldChange('promotion_template',  value) }>\r\n                            { this.props.calendar.active_promotion_templates.map((a, i) => {\r\n                            return <PicklistItem key={ i + 1 } value={a} label={a.Label} />;\r\n                            })}\r\n                        </Picklist>\r\n                </div>,\r\n                required: true,\r\n                value:'value'\r\n            },\r\n            {\r\n                component:  accountDropdown,\r\n                required: true,\r\n                value:'value'\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className=\"slds-popover__body new-promotion\">\r\n                <Form class=\" slds-p-around--large\" fields={fields} onSave={this.onSave} onCancel={this.onCancel} />\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promcalendar/NewPromotion.jsx","var React = require('react');\r\n\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nmodule.exports = React.createClass({\r\n\tdisplayName: 'Form',\r\n\r\n\tisButtonDisabled: function(){\r\n\t\tvar buttonDisabled = false;\r\n        var valueString;\r\n\r\n        this.props.fields.map(field =>{\r\n            valueString=field.value.toString().trim();\r\n            if(field.isValid && !field.isValid(field.value))\r\n                buttonDisabled=true;\r\n            if(field.required && valueString==''){\r\n                buttonDisabled=true;\r\n            }\r\n\r\n        })\r\n\r\n        return buttonDisabled;\r\n    },\r\n    render: function() {\r\n        return (\r\n    \t\t<div className = {this.props.class}>\r\n    \t\t\t<ul>\r\n\t\t\t\t\t{this.props.fields.map((item)=>(\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t{item.component}\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\r\n    \t\t\t<div className=\"slds-text-align--right slds-p-top--large icon-button-group\">\r\n                        <Button type='neutral' icon='close' iconAlign='left' className=\"icon-button\"\r\n                                onClick={()=>this.props.onCancel()}> {AppManager.getLabel('PP_BTN_CANCEL') || 'Cancel'}</Button>\r\n                        <Button type='brand' icon='check' iconAlign='left' className=\"icon-button\"\r\n                                onClick={()=>this.props.onSave()} disabled={this.isButtonDisabled()}> {AppManager.getLabel('PC_BTN_SAVE') || 'Save'}</Button>\r\n                    </div>\r\n    \t\t</div>\r\n    \t);\r\n    }\r\n});\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Form.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar PromotionDetail = require('./PromotionDetail');\r\nvar classNames = require('classnames');\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nvar PromCalendarActions = require('../../actions/PromCalendarActions').PromCalendarActions;\r\n\r\nvar Popover = require('../components/Popover');\r\nvar Truncate = require('../components/Truncate');\r\n\r\nvar PromotionCalendarLabel = React.createClass({\r\n    displayName: 'PromotionCalendarLabel',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            isTruncated: false,\r\n            hover: false\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <statelessWrapper>\r\n                <div className='label-column slds-text-heading--small'\r\n                     onMouseEnter={(e)=>this.setState({hover: true})}\r\n                     onMouseLeave={(e)=>this.setState({hover: false})}>\r\n                    <div className=\"slds-truncate slogan-text\">\r\n                        <Truncate lines={2}\r\n                                  onTruncate={(isTruncated) => {\r\n                            isTruncated !== this.state.isTruncated && this.setState({isTruncated})\r\n                        }}\r\n                                  children={this.props.slogan}>\r\n                        </Truncate>\r\n                    </div>\r\n                </div>\r\n              {\r\n              (this.state.hover && this.state.isTruncated) ?\r\n                        <Popover direction=\"horizontal\" className=\"slogan-tooltip\">{this.props.slogan}</Popover> : null\r\n              }\r\n            </statelessWrapper>\r\n        );\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'PromotionCalendarGrid',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            promotionDetailPopOver: null,\r\n            showWeeks: true,\r\n            initialLegendContent: null\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        //this.handleResize();\r\n        window.addEventListener('resize', this.handleResize);\r\n        this.handleLegendScroll();\r\n    },\r\n\r\n    componentDidUpdate: function () {\r\n        var me = this;\r\n        var weeks = _.flatMap(_.uniqBy(this.props.calendar.periods, 'Child'));\r\n        var weekWidth = this.refs.months.getBoundingClientRect().width / weeks.length;\r\n        if (this.state.showWeeks && weekWidth < 18) {\r\n            this.setState({\r\n                showWeeks: false\r\n            });\r\n        }\r\n        else if (!this.state.showWeeks && weekWidth > 18) {\r\n            this.setState({\r\n                showWeeks: true\r\n            });\r\n        }\r\n        for (var i = 0; i < this.refs.months.children.length; i++) {\r\n            var monthDOM = this.refs.months.children[i];\r\n            if (monthDOM.innerText.length && monthDOM.scrollWidth > monthDOM.clientWidth) {\r\n                //OVERFLOW!\r\n                //Solution 1: clip text\r\n                monthDOM.innerText = monthDOM.innerText.substring(0, Math.floor(monthDOM.clientWidth / 18));\r\n                //Solution 2: apply css class\r\n                //if (monthDOM.className.indexOf('overflowMonth')==-1)\r\n                //    monthDOM.className+=' overflowMonth';\r\n\r\n            }\r\n        }\r\n        this.handleLegendScroll();\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    },\r\n\r\n    handleResize: function () {\r\n        this.forceUpdate();\r\n    },\r\n\r\n    onPreviousPeriod: function () {\r\n        PromCalendarActions.prevPeriod();\r\n    },\r\n\r\n    onNextPeriod: function () {\r\n        PromCalendarActions.nextPeriod();\r\n    },\r\n\r\n    renderPastTime: function () {\r\n        var today = new Date();\r\n        var width = this.getLeft(today - this.props.calendar.initDate);\r\n        if (width < 0) return null;\r\n        if (width > this.getTotalWidth()) width = this.getTotalWidth();\r\n        var height = this.getCalendarHeight();\r\n        return (\r\n            <div className=\"past-time\" style={{width: width + 'px', height: '100%'}}></div>\r\n        )\r\n    },\r\n\r\n    renderYearLine: function () {\r\n        if (this.props.calendar.endDate.getFullYear() != this.props.calendar.initDate.getFullYear()) {\r\n            var l = this.getLeft(new Date(this.props.calendar.endDate.getFullYear(), 0, 0) - this.props.calendar.initDate);\r\n            l += 154;// Width of the first column\r\n            var height = this.getCalendarHeight();\r\n            return (\r\n                <div className=\"past-time year-line\"\r\n                     style={{left: l + 'px', width: '2px', height: '100%'}}></div>\r\n            )\r\n        }\r\n    },\r\n\r\n    getWeeks: function () {\r\n        var today = (new Date()).getTime();\r\n        return _.flatMap(_.uniqBy(this.props.calendar.periods, 'Child'), function (i) {\r\n            var padded = '0' + i.Child;\r\n            return {\r\n                Week: (padded.substring(padded.length - 2)),\r\n                Month: i.Parent,\r\n                Current: ((i.Date_From) < today && (today < i.Date_Thru))\r\n            }\r\n        });\r\n    },\r\n\r\n    renderHeader: function () {\r\n        var weeks = this.getWeeks();\r\n        var colHeight = this.getCalendarHeight();\r\n        var lastMonth = '';\r\n        return (\r\n            <div className='slds-grid slds-grid--vertical-stretch calendarGrid-columns'>\r\n                <div className='label-column ' ref=\"colName\"></div>\r\n              {\r\n              weeks.map((w, i)=> {\r\n              var colClass = classNames({\r\n              'slds-col': true,\r\n              'col-odd': i % 2 == 0,\r\n              'col-even': i % 2 != 0,\r\n              'month-week': i > 0 && lastMonth != w.Month\r\n              });\r\n              lastMonth = w.Month;\r\n              return (<div className={colClass} style={{height: '100%'}}></div>)\r\n              })\r\n              }\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderMonths: function () {\r\n        var weeks = this.getWeeks();\r\n        var lastMonth = '';\r\n\r\n        return (\r\n            <div className='slds-grid calendarGrid-months'>\r\n                <div className='label-column'>\r\n\r\n                </div>\r\n                <div className=\"calendar-months\" ref=\"months\">\r\n\r\n                    <div className='prev-period'>\r\n                        <Button icon='chevronleft' onClick={()=>this.onPreviousPeriod()} />\r\n                    </div>\r\n                  {\r\n                  weeks.map((w)=> {\r\n                  var m = (window.innerWidth < 1280) ? w.Month.substring(0, 3) : w.Month;\r\n                  var colSpan = 1;\r\n                  var current = '';\r\n                  var currentWeek = _.find(weeks, {Current: true});\r\n                  var currentMonth = (currentWeek) ? currentWeek.Month : '';\r\n                  if (m != lastMonth) {\r\n                  lastMonth = m;\r\n                  colSpan = _.filter(weeks, {Month: w.Month}).length;\r\n                  current = (currentMonth == w.Month) ? 'month-current' : '';\r\n                  } else {\r\n                  return null;\r\n                  }\r\n                  return <div style={{flex: colSpan}}\r\n                              className={\"slds-text-align--center \" + current }>{m}</div>\r\n                  })\r\n                  }\r\n\r\n                    <div className='next-period'>\r\n                        <Button icon='chevronright' onClick={()=>this.onNextPeriod()} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderWeeks: function () {\r\n        var weeks = this.getWeeks();\r\n\r\n        return (\r\n            <div className=\"slds-grid slds-grid--vertical-stretch calendar-weeks\">\r\n                <div className='label-column'></div>\r\n              {\r\n              weeks.map((w, i)=> {\r\n              return (\r\n                            <div className='slds-col slds-text-align--center'>{w.Week}</div>\r\n              )\r\n              })\r\n              }\r\n            </div>\r\n        )\r\n    },\r\n\r\n    toPreviousLegend: function () {\r\n        var legendContent = this.refs.calendarlegendcontent,\r\n            firstChild = legendContent.firstChild.cloneNode(true);\r\n        if (!this.state.initialLegendContent) {\r\n            this.state.initialLegendContent = legendContent.innerHTML;\r\n        }\r\n        legendContent.removeChild(legendContent.firstChild);\r\n        legendContent.appendChild(firstChild);\r\n    },\r\n\r\n    toNextLegend: function () {\r\n        var legendContent = this.refs.calendarlegendcontent,\r\n            lastChild = legendContent.lastChild.cloneNode(true);\r\n        if (!this.state.initialLegendContent) {\r\n            this.state.initialLegendContent = legendContent.innerHTML;\r\n        }\r\n        legendContent.removeChild(legendContent.lastChild);\r\n        legendContent.insertBefore(lastChild, legendContent.firstChild);\r\n    },\r\n\r\n    handleLegendScroll: function () {\r\n        if (this.refs.calendarlegendcontent) {\r\n            var legend = this.refs.calendarlegend,\r\n                scrollLeft = legend.querySelector('.scroll-left'),\r\n                scrollRight = legend.querySelector('.scroll-right'),\r\n                legendContent = this.refs.calendarlegendcontent,\r\n                legendContentWidth = legendContent.clientWidth,\r\n                legendsWidth = 0,\r\n                nodes = legendContent.querySelectorAll('.calendar-legend-text');\r\n            for (var i = 0; nodes[i]; i++) {\r\n                legendsWidth += nodes[i].clientWidth + 16;\r\n            }\r\n            if (legendContentWidth <= legendsWidth) {\r\n                scrollLeft.style.display = 'flex';\r\n                scrollRight.style.display = 'flex';\r\n            } else if (scrollLeft.style.display != 'none' && scrollRight.style.display != 'none') {\r\n                scrollLeft.style.display = 'none';\r\n                scrollRight.style.display = 'none';\r\n                if (this.state.initialLegendContent)\r\n                 this.restoreLegend();\r\n            }\r\n        }\r\n    },\r\n\r\n    restoreLegend: function () {\r\n        this.refs.calendarlegendcontent.innerHTML = this.state.initialLegendContent;\r\n    },\r\n\r\n    renderLegend: function () {\r\n        return (\r\n            <div className='slds-grid calendar-legend' ref=\"calendarlegend\">\r\n                <div className='label-column'></div>\r\n                <div className='scroll-left'>\r\n                    <Button icon='chevronleft' onClick={()=>this.toPreviousLegend()} />\r\n                </div>\r\n                <div className='calendar-legend-content' ref=\"calendarlegendcontent\">\r\n                  {\r\n                  this.props.calendar.legend.map((l, i)=> {\r\n                  return (\r\n                                <div className='calendar-legend-text'>\r\n                                    <div className='calendar-legend-circle'\r\n                                         style={{backgroundColor: l.Commit_Color.replace('0x', '#')}}></div>{l.Name}\r\n                                </div>\r\n                  )\r\n                  })\r\n                  }\r\n                </div>\r\n                <div className='scroll-right'>\r\n                    <Button icon='chevronright' onClick={()=>this.toNextLegend()} />\r\n                </div>\r\n            </div>\r\n        );\r\n    },\r\n\r\n    getBgColor: function (promotion) {\r\n        return promotion.Commit_Color.replace('0x', '#');\r\n    },\r\n\r\n    getOpacity: function (promotion) {\r\n        return (promotion.isReady) ? 1 : 0.3;\r\n    },\r\n\r\n    getLeft: function (date) {\r\n        var DAY = (1000 * 60 * 60 * 24);\r\n        var days = date / DAY;\r\n        var totalWidth = this.getTotalWidth();\r\n\r\n        var totalDays = Math.floor((this.props.calendar.endDate - this.props.calendar.initDate) / DAY);\r\n\r\n        return Math.round(days * totalWidth / totalDays);\r\n    },\r\n\r\n    getTotalWidth: function () {\r\n        var calendarGrid = this.refs.calendarscrollarea;\r\n        if (this.refs['colName']) {\r\n            var firstCol = this.refs.colName;\r\n            return calendarGrid.clientWidth - firstCol.clientWidth;\r\n        }\r\n        else {\r\n            calendarGrid = this.refs.calendarcontainer;\r\n            return calendarGrid.clientWidth - 164;\r\n        }\r\n    },\r\n\r\n    getCalendarHeight: function () {\r\n        var weekHeaderHeight = 22;\r\n        var calendarRowHeight = 40;\r\n        return weekHeaderHeight + this.props.calendar.promotions.length * calendarRowHeight;\r\n    },\r\n\r\n    getPromotionTemplate: function(promotionTemplateId){\r\n        var promotionTemplate= _.filter(this.props.calendar.promotion_templates,(promotionTemplate)=>promotionTemplate.Id==promotionTemplateId);\r\n        return promotionTemplate[0].Label;\r\n    },\r\n\r\n    renderPromotion: function (promotion) {\r\n        var me = this,\r\n            bgColor = this.getBgColor(promotion),\r\n            previousWidth = 0;\r\n\r\n        var promotion_template = this.getPromotionTemplate(promotion.Promotion_Template_Id);\r\n\r\n        return (\r\n            <div className='slds-grid promotion-row'>\r\n                <PromotionCalendarLabel slogan={promotion.slogan} />\r\n              {\r\n              promotion.dates.map((period, i)=> {\r\n              var width = me.getLeft(period.to - period.from),\r\n              left = me.getLeft(period.from - me.props.calendar.initDate);\r\n              if (i > 0) {\r\n              previousWidth += width;\r\n              left -= previousWidth;\r\n              }\r\n              if (left < 0) {\r\n              width += left;\r\n              left = 0;\r\n              }\r\n              if (width < 0) {\r\n              return null;\r\n              }\r\n              if (width > this.getTotalWidth() - left) {\r\n              width = this.getTotalWidth() - left;\r\n              }\r\n\r\n              var opacity = this.getOpacity(period);\r\n\r\n              var showDetail = ((this.state.promotionDetailPopOver != null)\r\n              && (this.state.promotionDetailPopOver.promotion.slogan == promotion.slogan)\r\n              && (this.state.promotionDetailPopOver.period.from == period.from));\r\n              var detailPanel = null;\r\n              var border = 'none';\r\n              if (showDetail) {\r\n              detailPanel =\r\n                                <PromotionDetail promotionDetail={this.state.promotionDetailPopOver}\r\n                                                 icon=\"promo.png\" {...this.props} />;\r\n              opacity = 1;\r\n              border = '2px solid rgba(0,0,0,0.3)';\r\n              }\r\n\r\n              return (\r\n                            <div className='promotion-bar'\r\n                                 style={{\r\n                                     backgroundColor: bgColor,\r\n                                     opacity: opacity,\r\n                                     width: width + 'px',\r\n                                     left: left + 'px',\r\n                                     border: border\r\n                                 }}\r\n                                 onMouseEnter={(e)=>this.showPromotionDetail(e, promotion, period, promotion_template)}\r\n                                 onMouseLeave={(e)=>this.hidePromotionDetail(e, promotion, period)}\r\n                                 onClick={(e)=> {\r\n                                     if (e.target.className == 'promotion-bar')\r\n                                         PromCalendarActions.openPromotionDetail(period.Id);\r\n                                 } }>{detailPanel}\r\n                            </div>\r\n              )\r\n              })\r\n              }\r\n            </div>\r\n        )\r\n    },\r\n\r\n    showPromotionDetail: function (event, promotion, period, promotion_template) {\r\n        var self = this;\r\n        var calendarGrid = this.refs.calendarcontainer;\r\n        var promotionDetailPopOver = {\r\n            promotion: promotion,\r\n            period: period,\r\n            promotion_template: promotion_template\r\n        };\r\n        this.timer = window.setTimeout(\r\n            ()=> {\r\n                self.setState({promotionDetailPopOver: promotionDetailPopOver});\r\n            },\r\n            300\r\n        );\r\n        window.clearTimeout(this.timerHide);\r\n    },\r\n\r\n    hidePromotionDetail: function (event, promotion, period) {\r\n        var self = this;\r\n        window.clearTimeout(this.timer);\r\n        this.timerHide = window.setTimeout(\r\n            ()=> {\r\n                self.setState({promotionDetailPopOver: null});\r\n            },\r\n            300\r\n        );\r\n    },\r\n\r\n    render: function () {\r\n        var me = this;\r\n        return (\r\n            <div className=\"calendarGrid\" ref=\"calendarcontainer\">\r\n              {(this.props.calendar == null) ?\r\n                    <div className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center loading-container\">\r\n                        <div className=\"slds-spinner_container\">\r\n                            <div className=\"slds-spinner--brand slds-spinner slds-spinner--large\" aria-hidden=\"false\"\r\n                                 role=\"alert\">\r\n                                <div className=\"slds-spinner__dot-a\"></div>\r\n                                <div className=\"slds-spinner__dot-b\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"loading-content\">\r\n                          'Loading content...'\r\n                        </div>\r\n                    </div>\r\n              :\r\n                    <div>{this.renderMonths()}\r\n                        <div className=\"slds-grid calendarGrid-container\">{this.renderHeader()}{this.renderPastTime()}\r\n                            <div className=\"calendarGrid-content\">{(this.state.showWeeks) ? this.renderWeeks() : null}\r\n                                <div className=\"slds-scrollable--y\" ref=\"calendarscrollarea\">{this.props.calendar.promotions.map((p)=>me.renderPromotion(p))}\r\n                                </div>\r\n                            </div>{this.renderYearLine()}\r\n                        </div>{this.renderLegend()}\r\n                    </div>\r\n              }\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promCalendar/PromotionCalendarGrid.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar PromCalendarActions = require('../../actions/PromCalendarActions').PromCalendarActions;\r\n\r\nvar Popover = require('../components/Popover');\r\nvar ConfirmPopup = require('../components/ConfirmPopup');\r\nvar Truncate = require('../components/Truncate');\r\n\r\nmodule.exports = React.createClass({\r\n  displayName: 'PromotionDetail',\r\n\r\n  getInitialState: function () {\r\n    return {\r\n      hover: false,\r\n      isTruncated: false,\r\n      confirmMessage: null,\r\n    };\r\n  },\r\n\r\n  componentDidMount: function () {\r\n    console.log(this.props.promotionDetail);\r\n    PromCalendarActions.getPromotionDetail(this.props.promotionDetail.period.Id);\r\n  },\r\n\r\n  deletePromotion: function (promotion) {\r\n    var me = this;\r\n    var confirmMessage = {\r\n      title: 'Confirmation',\r\n      message: 'Do you want to delete the promotion?',\r\n      cancelHandler: function () {\r\n        me.setState({confirmMessage: null});\r\n      },\r\n      okHandler: function () {\r\n        PromCalendarActions.deletePromotionDetail(promotion.period.Id);\r\n        me.setState({confirmMessage: null});\r\n      }\r\n    };\r\n\r\n    this.setState({confirmMessage: confirmMessage})\r\n  },\r\n render: function () {\r\n\r\n    var icon = null;\r\n\r\n    if (this.props.icon && this.props.icon.indexOf('.') == -1) {\r\n      icon = <Icon category=\"standard\" icon={this.props.icon} size=\"large\" />\r\n    }else {\r\n      icon = <span className=\"slds-avatar\">\r\n             <img src={Utils.HTTP.getImgUrl(this.props.icon)} alt=\"promo\" />\r\n      </span>\r\n    }\r\n\r\n    return (\r\n        <Popover direction=\"vertical\" nubbinMargin={5} className=\"promotion-detail\">\r\n            {(this.state.confirmMessage) ?\r\n                    <ConfirmPopup title={this.state.confirmMessage.title} message={this.state.confirmMessage.message}\r\n                                  cancelHandler={this.state.confirmMessage.cancelHandler}\r\n                                  okHandler={this.state.confirmMessage.okHandler} /> : null}\r\n                <div className=\"slds-popover__body promotion-detail\">\r\n                    <dl className=\"slds-popover__body-list\">\r\n                        <dt className=\"slds-m-bottom--medium\">\r\n                            <div className=\"slds-media slds-media--center\">\r\n                                <div className=\"slds-media__figure\">{icon}\r\n                                </div>\r\n                                <div className=\"slds-media__body\">\r\n                                <div className=\"slds-text-body--small slds-text--caps\">{this.props.promotionDetail.promotion_template}</div>\r\n                                    <a onClick={()=> PromCalendarActions.openPromotionDetail(this.props.promotionDetail.period.Id) }\r\n                                       onMouseEnter={(e)=>this.setState({hover: true})}\r\n                                       onMouseLeave={(e)=>this.setState({hover: false})}\r\n                                       className=\"slds-text-heading--medium\">\r\n                                      <div className=\"slds-truncate slogan-text\">\r\n                                        <Truncate lines={2}\r\n                                                  onTruncate={(isTruncated) => {isTruncated !== this.state.isTruncated && this.setState({ isTruncated })}}\r\n                                                  children={this.props.promotionDetail.promotion.slogan}>\r\n                                        </Truncate>\r\n                                      </div>\r\n                                    </a>\r\n                                    {\r\n                                    (this.state.hover && this.state.isTruncated) ?\r\n                                              <Popover direction=\"horizontal\" nubbinMargin={10} className=\"slogan-tooltip\">{this.props.promotionDetail.promotion.slogan}</Popover> : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </dt>\r\n                          <dt className=\"slds-m-bottom--small\">\r\n                              <label className=\"slds-text-body--small\">{AppManager.getLabel('PC_LBL_FROM_THRU') || 'FROM/THRU'}</label>\r\n\r\n                              <div className=\"slds-text-heading--small\">{Utils.Formatters.formatDate(this.props.promotionDetail.period.from) + ' - ' + Utils.Formatters.formatDate(this.props.promotionDetail.period.to)}\r\n                              </div>\r\n                          </dt>\r\n                          <dt className=\"slds-m-bottom--small\">\r\n                              <label className=\"slds-text-body--small\">{AppManager.getLabel('PC_LBL_STATUS') || 'STATUS'}</label>\r\n\r\n                              <div className=\"slds-text-heading--small\">{this.props.promotionDetail.period.phase}\r\n                              </div>\r\n                          </dt>\r\n                          <dt className=\"slds-m-bottom--small\">\r\n                              <label className=\"slds-text-body--small\">{AppManager.getLabel('PC_LBL_ANCHOR') || 'ANCHOR'}</label>\r\n\r\n                              <div className=\"slds-text-heading--small\">{this.props.promotionDetail.promotion.Account_Name}\r\n                              </div>\r\n                          </dt>\r\n                        {(this.props.promotionDetailData && this.props.promotionDetailData.Id == this.props.promotionDetail.period.Id) ?\r\n                              <dt className=\"slds-m-bottom--small\">\r\n                                  <label className=\"slds-text-body--small\">{AppManager.getLabel('PC_LBL_TACTICS_FROM_THRU') || 'TACTICS FROM/THRU'}</label>\r\n                                  {\r\n                                  this.props.promotionDetailData.Tactics.map((tactic)=>\r\n                                <div className=\"slds-text-heading--small\">{Utils.Formatters.formatDate(tactic.Date_From)}\r\n                                    - {Utils.Formatters.formatDate(tactic.Date_Thru)} - {tactic.Description}\r\n                                </div>\r\n                                  )\r\n                                  }\r\n                              </dt>\r\n                        : null}\r\n                    </dl>\r\n                    <dt className=\"slds-clearfix\">\r\n                        <section className=\"slds-float--left slds-p-left--small\">\r\n                            <Button type=\"neutral\"\r\n                                    onClick={()=> PromCalendarActions.openPromotionDetail(this.props.promotionDetail.period.Id) }>{AppManager.getLabel('PC_BTN_OPEN') || 'Open'}\r\n                            </Button>\r\n                        </section>\r\n                        <section className=\"slds-float--right slds-p-right--small\">\r\n                          <Button type=\"neutral\"\r\n                                  disabled=\"true\"\r\n                                  onClick={()=> PromCalendarActions.derivePromotionDetail(this.props.promotionDetail.period.Id) }>{AppManager.getLabel('PC_BTN_DERIVE') || 'Derive'}\r\n                          </Button>\r\n                          <Button type=\"neutral\"\r\n                                  onClick={()=> this.deletePromotion(this.props.promotionDetail) }>{AppManager.getLabel('PC_BTN_DELETE') || 'Delete'}\r\n                          </Button>\r\n                        </section>\r\n                    </dt>\r\n                    <dt className=\"slds-p-bottom--small\"></dt>\r\n                </div>\r\n        </Popover>\r\n            )\r\n          }\r\n       });\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promCalendar/PromotionDetail.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'ConfirmPopup',\r\n\r\n    componentDidMount: function () {\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div>\r\n                <div aria-hidden=\"false\" aria-labelledby=\"prompt-heading-id\" aria-describedby=\"prompt-message-wrapper\"\r\n                     role=\"alertdialog\" className=\"slds-modal slds-modal--prompt slds-fade-in-open\">\r\n                    <div className=\"slds-modal__container slds-modal--prompt\" role=\"document\"\r\n                         id=\"prompt-message-wrapper\" tabIndex=\"0\">\r\n                        <div className=\"slds-modal__header slds-theme--warning slds-theme--alert-texture\">\r\n                            <h2 className=\"slds-text-heading--medium\" id=\"prompt-heading-id\">{this.props.title}</h2>\r\n                        </div>\r\n                        <div className=\"slds-modal__content slds-p-around--medium\">\r\n                            <div>\r\n                                <p>{this.props.message}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-modal__footer slds-theme--default\">\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={()=>this.props.cancelHandler()}>{AppManager.getLabel(\"PP_BTN_CANCEL\") || 'Cancel'}</button>\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={()=>this.props.okHandler()}>{AppManager.getLabel(\"PP_BTN_OK\") || 'Ok'}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/ConfirmPopup.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar ButtonGroup = require('react-lightning-design-system').ButtonGroup;\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar DropdownButton = require('react-lightning-design-system').DropdownButton;\r\nvar MenuItem = require('react-lightning-design-system').MenuItem;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\nvar Picklist = require('react-lightning-design-system').Picklist;\r\nvar PicklistItem = require('react-lightning-design-system').PicklistItem;\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar Multiselection = require('../components/Multiselection');\r\nvar Popover = require('../components/Popover');\r\n\r\nvar PromCalendarActions = require('../../actions/PromCalendarActions').PromCalendarActions;\r\nvar RemovablePill = require('../components/RemovablePill');\r\n\r\n/*************************************************************/\r\n\r\nvar CalendarFilterItem = React.createClass({\r\n    displayName: 'CalendarFilterItem',\r\n\r\n    toggleValue: function (valueId) {\r\n        var opt = _.find(this.props.filterItem.values, {Id: valueId});\r\n        opt.Selected = !opt.Selected;\r\n        this.forceUpdate();\r\n    },\r\n\r\n    render: function () {\r\n        var values = this.props.filterItem.values;\r\n        var disabledFieldCombo = (this.props.availableFields == null);\r\n\r\n        return (\r\n            <Popover className=\"filter-popover\" direction=\"horizontal\" nubbinMargin={12} onClickOutside={this.props.closeHandler}>\r\n                <div className=\"slds-popover__body\">\r\n                    <div className=\"slds-p-around--small\">\r\n                        {disabledFieldCombo ?\r\n                            <Input label={AppManager.getLabel(\"PC_LBL_FIELD\") || 'Field'} type='text' disabled=\"true\"\r\n                                   value={ this.props.filterItem.label}/>\r\n                            :\r\n                            <Picklist label={AppManager.getLabel(\"PC_LBL_FIELD\") || 'Field'}\r\n                                      value={ this.props.filterItem.fieldId }\r\n                                      onValueChange={ this.props.changeField }>\r\n                                { this.props.availableFields.map((a, i) => {\r\n                                    return <PicklistItem key={ i + 1 } value={a.fieldId} label={a.label}/>;\r\n                                })}\r\n                            </Picklist>\r\n                        }\r\n                        <Multiselection label={AppManager.getLabel(\"PC_LBL_VALUE\") || 'Value'} required=\"false\"\r\n                                        className=\"slds-m-top--small\"\r\n                                        values={values}\r\n                                        toggleHandler={this.toggleValue}/>\r\n                        <section className=\"slds-clearfix slds-m-top--small\">\r\n                            <div className=\"slds-float--right\">\r\n                                <Button className=\"close-button slds-float--right\" type=\"neutral\"\r\n                                        onClick={()=> this.props.closeHandler()}>{AppManager.getLabel(\"PP_BTN_DONE\") || 'Done'}</Button>\r\n                            </div>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n            </Popover>\r\n        )\r\n    }\r\n});\r\n\r\n/*************************************************************/\r\n\r\nvar CalendarFilterSection = React.createClass({\r\n    displayName: 'CalendarFilterSection',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            openedFilterItem: null,\r\n            addingNewFilter: null\r\n        }\r\n    },\r\n\r\n    getPlaceholder: function (values) {\r\n        return _.map(_.filter(values, {Selected: true}), 'Label').join(', ');\r\n    },\r\n\r\n    emptyFilter: function (array) {\r\n        array.map((item)=> {\r\n            item.Selected = false;\r\n        });\r\n        this.props.modifiedHandler();\r\n        this.forceUpdate();\r\n    },\r\n\r\n    addFilter: function (filtersToAdd) {\r\n        this.setState({openedFilterItem: null, addingNewFilter: filtersToAdd[0]});\r\n    },\r\n\r\n    addNewFilter: function () {\r\n        this.setState({openedFilterItem: null, addingNewFilter: null});\r\n        this.props.modifiedHandler()\r\n    },\r\n\r\n    changeFieldNewFilter: function (fieldItem) {\r\n        this.state.addingNewFilter.values.map(\r\n            (val)=> {\r\n                val.Selected = false;\r\n            });\r\n        this.setState({addingNewFilter: fieldItem});\r\n    },\r\n\r\n    openFilter: function (filterItem) {\r\n        this.setState({openedFilterItem: filterItem});\r\n    },\r\n\r\n    closeFilter: function () {\r\n        this.setState({openedFilterItem: null});\r\n        this.props.modifiedHandler()\r\n    },\r\n\r\n    renderFilterItem: function (filterItem) {\r\n        return <CalendarFilterItem filterItem={filterItem}\r\n                                   closeHandler={this.closeFilter}/>\r\n    },\r\n\r\n    render: function () {\r\n        var filtersAdded = _.filter(this.props.filterSection,\r\n            function (item) {\r\n                return _.some(item.values, {Selected: true})\r\n            });\r\n\r\n        var filtersToAdd = _.difference(this.props.filterSection, filtersAdded);\r\n        var canAddNewFilter = (this.props.filterSection.length != filtersAdded.length) && !this.state.addingNewFilter;\r\n\r\n        return (\r\n            <section>\r\n                <div className=\"filter-title\">{this.props.title}</div>\r\n                {filtersAdded.map((filterItem)=>\r\n                        <RemovablePill\r\n                            className={(filterItem == this.state.openedFilterItem )?\"slds-m-top--medium tpm-open-pill\":\"slds-m-top--medium \"}\r\n                            closeHandler={()=>this.emptyFilter(filterItem.values)}\r\n                            openHandler={()=>this.openFilter(filterItem)}\r\n                            label={filterItem.label} value={this.getPlaceholder(filterItem.values)}\r\n                            {...this.props}>\r\n                            {(filterItem == this.state.openedFilterItem ) ? this.renderFilterItem(filterItem) : null}\r\n                        </RemovablePill>\r\n                )}\r\n                {(this.state.addingNewFilter) ?\r\n                    <RemovablePill className=\"slds-m-top--medium tpm-open-pill\"\r\n                                   closeHandler={()=>this.emptyFilter(this.state.addingNewFilter.values)}\r\n                                   openHandler={()=>this.openFilter(this.state.addingNewFilter)}\r\n                                   label='New Filter *' {...this.props}>\r\n                        <CalendarFilterItem filterItem={this.state.addingNewFilter} availableFields={filtersToAdd}\r\n                                            changeField={(fieldId)=> {\r\n                                                this.changeFieldNewFilter(_.find(filtersToAdd, {fieldId: fieldId}))\r\n                                            } }\r\n                                            closeHandler={this.addNewFilter}/>\r\n\r\n                    </RemovablePill>\r\n                    : null}\r\n\r\n                { (canAddNewFilter) ?\r\n                    <Button icon=\"add\" className=\"slds-m-top--small add-filter\" onClick={()=> {\r\n                        this.addFilter(filtersToAdd)\r\n                    }}> {AppManager.getLabel('PC_BTN_ADD_FILTER') || 'Add filter'}</Button>\r\n                    : null}\r\n            </section>\r\n        )\r\n    }\r\n});\r\n\r\n/*************************************************************/\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'CalendarFilter',\r\n\r\n    getInitialState: function () {\r\n        return ({modified: false})\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div className=\"slds-col side-panel\">\r\n                {(this.state.modified) ?\r\n                    <div className=\"side-panel-header slds-text-align--right slds-p-around--medium \">\r\n                        <Button icon=\"close\" type=\"neutral\" iconAlign='left' className=\"icon-button\"\r\n                                onClick={this.props.closeHandler}> {AppManager.getLabel('PP_BTN_CANCEL') || 'Cancel'}</Button>\r\n                        <Button icon=\"check\" type=\"brand\" iconAlign='left' className=\"icon-button\"\r\n                                onClick={this.props.saveHandler}> {AppManager.getLabel('PC_BTN_SAVE') || 'Save'}</Button>\r\n                    </div>\r\n                    :\r\n                    <div className=\"side-panel-header slds-clearfix slds-p-around--small\">\r\n                        <div className=\"slds-float--left \">\r\n                            <p>{AppManager.getLabel('PC_LBL_FILTERS') || 'Filters'}</p>\r\n                        </div>\r\n                        <div className=\"back-arrow\">\r\n                            <Button className=\"close-button\" icon=\"forward\" size=\"small\"\r\n                                    onClick={this.props.closeHandler}/>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div className=\"side-panel-body\">\r\n                    <div className=\"slds-m-top--small calendar-filter\">\r\n                        <CalendarFilterSection title={AppManager.getLabel('PC_TIT_ACCOUNTS') || 'Accounts'}\r\n                                               filterSection={this.props.calendar.FilterCriteria.accountfilter}\r\n                                               modifiedHandler={()=> {\r\n                                                   this.setState({modified: true})\r\n                                               }}/>\r\n                        <CalendarFilterSection title={AppManager.getLabel('PC_TIT_PROMOTIONS') || 'Promotions'}\r\n                                               filterSection={this.props.calendar.FilterCriteria.promotionfilter}\r\n                                               modifiedHandler={()=> {\r\n                                                   this.setState({modified: true})\r\n                                               }}/>\r\n                        <CalendarFilterSection title={AppManager.getLabel('PC_TIT_PRODUCTS') || 'Products'}\r\n                                               filterSection={this.props.calendar.FilterCriteria.productfilter}\r\n                                               modifiedHandler={()=> {\r\n                                                   this.setState({modified: true})\r\n                                               }}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promCalendar/CalendarFilter.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar DropdownButton = require('react-lightning-design-system').DropdownButton;\r\nvar MenuItem = require('react-lightning-design-system').MenuItem;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\n\r\nDropdownButton.prototype.onMenuItemClick=function(...args) {\r\n   \r\n    if (this.props.onMenuItemClick) {\r\n      this.props.onMenuItemClick(...args);\r\n    }\r\n}\r\nmodule.exports = React.createClass({\r\n    displayName: 'Multiselection',\r\n\r\n    toggle: function (id, event) {\r\n        this.props.toggleHandler(id);\r\n        \r\n    },\r\n\r\n    componentDidMount: function () {\r\n        var ddDOM = ReactDOM.findDOMNode(this.refs.dropdown.refs.dropdown);\r\n        if (ddDOM.className.indexOf(\" slds-scrollable--y\") == -1)\r\n            ddDOM.className += \" slds-scrollable--y\";\r\n    },\r\n\r\n    getPlaceholder: function () {\r\n        var selection = (AppManager.getLabel(\"PC_LBL_SELECT\") || 'Select') + '...';\r\n        var selected = _.filter(this.props.values, {Selected: true});\r\n        if (selected.length >= 3) {\r\n            selection = selected.length + \" \" + (AppManager.getLabel(\"PC_LBL_VALUES_SELECTED\") || 'values selected');\r\n        }\r\n        else if (selected.length > 0) {\r\n            selection = _.map(_.filter(this.props.values, {Selected: true}), 'Label').join(', ');\r\n        }\r\n        return selection;\r\n    },\r\n\r\n    render: function () {\r\n        var klass = 'multiselection slds-form-element ' + this.props.className;\r\n\r\n        return (\r\n            <div className={klass}>\r\n                <label className=\"slds-form-element__label\">{this.props.label}</label>\r\n\r\n                <div className=\"slds-form-element__control\">\r\n                    <DropdownButton type='neutral' menuAlign='left' label={this.getPlaceholder()} ref='dropdown'>\r\n                        {this.props.values.map((item, ix) => {\r\n                                return <MenuItem key={ix}\r\n                                                 onClick={(event) =>this.toggle(item.Id, event)}\r\n                                                  className=\"slds-has-icon slds-has-icon--left\">\r\n                                    {(item.Selected) ? <Icon icon='check' size=\"x-small\" className=\"slds-icon--left\"/> :\r\n                                        <Icon icon='none' size=\"x-small\" className=\"slds-icon--left\"/>}\r\n                                    {item.Label}\r\n                                </MenuItem>\r\n                            }\r\n                        )}\r\n                    </DropdownButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Multiselection.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nmodule.exports = React.createClass({\r\n\r\n    render: function () {\r\n        var klass = 'pill-panel slds-p-around--small ' + this.props.className;\r\n\r\n        return (\r\n            <div>\r\n                {this.props.children}\r\n                <div className={klass}>\r\n\r\n                    <Button className=\"close-button slds-float--right\" icon=\"close\" iconSize=\"small\"\r\n                            onClick={()=> this.props.closeHandler()}/>\r\n\r\n                    <div className=\"pill-body\" onClick={()=> this.props.openHandler()}>\r\n                        <div className=\"slds-text-body--small filter-label\">{this.props.label}</div>\r\n                        <div className=\" filter-value\">{this.props.value}</div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/RemovablePill.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar Multiselection = require('../components/Multiselection');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'InitCalendar',\r\n\r\n    getInitialState: function () {\r\n        return {}\r\n    },\r\n\r\n    onSave: function () {\r\n        this.props.saveHandler(this.state);\r\n    },\r\n\r\n    onCancel: function () {\r\n        this.props.cancelHandler();\r\n    },\r\n\r\n    toggleSelection: function (arrayItems, itemId) {\r\n        var opt = _.find(arrayItems, {Id: itemId});\r\n        opt.Selected = !opt.Selected;\r\n        this.forceUpdate();\r\n    },\r\n\r\n    toggleAccount: function (itemId) {\r\n        //TODO: MOVE TO STATE!!!\r\n        this.toggleSelection(this.props.calendar.FilterCriteria.accountfilter[0].values, itemId);\r\n    },\r\n\r\n    togglePromotionTemplate: function (itemId) {\r\n        this.toggleSelection(this.props.calendar.FilterCriteria.promotionfilter[0].values, itemId);\r\n    },\r\n\r\n    toggleTacticTemplate: function (itemId) {\r\n        this.toggleSelection(this.props.calendar.FilterCriteria.promotionfilter[1].values, itemId);\r\n    },\r\n\r\n    toggleProductCategory: function (itemId) {\r\n        this.toggleSelection(this.props.calendar.FilterCriteria.productfilter[0].values, itemId);\r\n    },\r\n\r\n    renderContent: function () {\r\n        var message = AppManager.getLabel('PC_LBL_INIT_CALENDAR_MSG_1') || 'Hi, your user settings haven\\'t completed yet. ';\r\n        var message2 = AppManager.getLabel('PC_LBL_INIT_CALENDAR_MSG_2') || ' To avoid longer loading times, please fill them in before you continue.';\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"slds-notify slds-p-around--x-small slds-theme--warning\" role=\"alert\">\r\n                    <div className=\"slds-notify__content slds-grid\">\r\n                        <div className=\"slds-col--padded\">\r\n                            <Icon icon=\"warning\"/>\r\n                        </div>\r\n                        <div className=\"slds-col slds-align-left\">\r\n                            <h2 className=\"slds-text-heading--small\">{message}</h2>\r\n\r\n                            <h2 className=\"slds-text-heading--small\">{message2}</h2>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"slds-grid\">\r\n                    <div className=\"slds-col slds-p-around--x-small slds-size--1-of-2\">\r\n                        <Multiselection label={AppManager.getLabel('PC_LBL_CUSTOMER') || 'Customer'} required=\"true\"\r\n                                        values={this.props.calendar.FilterCriteria.accountfilter[0].values}\r\n                                        toggleHandler={this.toggleAccount}/>\r\n                    </div>\r\n                    <div className=\"slds-col slds-p-around--x-small slds-size--1-of-2\">\r\n                        <Multiselection label={AppManager.getLabel('PC_LBL_PROMOTION_TYPE') || 'Promotion Type'}\r\n                                        required=\"false\"\r\n                                        values={this.props.calendar.FilterCriteria.promotionfilter[0].values}\r\n                                        toggleHandler={this.togglePromotionTemplate}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-grid \">\r\n                    <div className=\"slds-col slds-p-around--x-small slds-size--1-of-2\">\r\n                        <Multiselection label={AppManager.getLabel('PC_LBL_PRODUCT_CATEGORY') || 'Product Category'}\r\n                                        required=\"true\"\r\n                                        values={this.props.calendar.FilterCriteria.productfilter[0].values}\r\n                                        toggleHandler={this.toggleProductCategory}/>\r\n                    </div>\r\n                    <div className=\"slds-col slds-p-around--x-small slds-size--1-of-2\">\r\n                        <Multiselection label={AppManager.getLabel('PC_LBL_TACTIC_TYPE') || 'Tactic Type'}\r\n                                        required=\"false\"\r\n                                        values={this.props.calendar.FilterCriteria.promotionfilter[1].values}\r\n                                        toggleHandler={this.toggleTacticTemplate}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    render: function () {\r\n        if (this.props.calendar == null) return null;\r\n        return (\r\n            <div>\r\n                <div className=\"slds-modal slds-fade-in-open\" aria-hidden=\"false\" role=\"dialog\">\r\n                    <div className=\"slds-modal__container\">\r\n                        <div className=\"slds-modal__header\">\r\n                            <h2 className=\"slds-text-heading--medium\">{AppManager.getLabel('PC_TIT_EDIT_SETTINGS') || 'Edit your Settings'}</h2>\r\n                        </div>\r\n                        <div className=\"slds-modal__content overflow-visible\">\r\n                            {this.renderContent()}\r\n                        </div>\r\n                        <div className=\"slds-modal__footer\">\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={() =>this.onCancel()}>{AppManager.getLabel('PC_BTN_CONTINUE') || 'Continue anyways'}</button>\r\n                            <button className=\"slds-button slds-button--neutral slds-button--brand\"\r\n                                    onClick={() =>this.onSave()}>{AppManager.getLabel('PC_BTN_SAVE') || 'Save'}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promCalendar/InitCalendar.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar AppHeader = require('../components/AppHeader');\r\nvar ReactCSSTransitionGroup = require('react-addons-css-transition-group');\r\nvar DrillDown = require('../promotion/Drilldown');\r\nvar PromotionOverview = require('../promotion/PromotionOverview');\r\nvar TacticOverview = require('../promotion/TacticOverview');\r\n\r\nvar PromotionPlanningCalculationGridPage = require('../calculationgrid/PromotionPlanningCalculationGridPage');\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nvar ButtonGroup = require('react-lightning-design-system').ButtonGroup;\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar DropdownButton = require('react-lightning-design-system').DropdownButton;\r\nvar MenuItem = require('react-lightning-design-system').MenuItem;\r\nvar MessagePopup = require('../components/MessagePopup.jsx');\r\n\r\nvar ConfirmPopup = require('../components/ConfirmPopup');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'PromotionPlanning',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            editMode: false,\r\n            pushMode: false,\r\n            viewGrid: false,\r\n            enableToolbar: true,\r\n            selectedItem: null,\r\n            showAttachments: false,\r\n            isPromotionSelected: false,\r\n            productSearch: [],\r\n            confirmMessage: null,\r\n            tree: null,\r\n            type: 'neutral',\r\n            message: null\r\n        };\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        this.busHandlerID = UI_EVENT_BUS.subscribe(EVENTS.UI_BINDING, this.onUIBinding);\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        UI_EVENT_BUS.unsubscribe(this.busHandlerID);\r\n    },\r\n\r\n    onUIBinding: function (payload) {\r\n        this.setState(payload)\r\n    },\r\n\r\n    promoChanged: function () {\r\n        this.setState({\r\n            promotion: this.props.promotion.serializeTree(),\r\n            productFilters: this.props.promotion.serializeProductFilters(),\r\n            selectedTactic: this.props.promotion.serializeSelectedTactic()\r\n        })\r\n    },\r\n\r\n    /**HANDLERS**/\r\n    /*When an item is selected in the drillDown*/\r\n    selectItem: function (item) {\r\n        var isPromotionSelected = true;\r\n        if (item.type == 'PROMOTION') {\r\n            PromotionActions.selectPromotion();\r\n        }\r\n        if (item.type == 'TACTIC') {\r\n            PromotionActions.selectTactic(item.Id);\r\n            isPromotionSelected = false;\r\n        }\r\n        this.setState({selectedItem: item, isPromotionSelected: isPromotionSelected});\r\n    },\r\n\r\n    addTactic: function (tacticTemplate) {\r\n        PromotionActions.addTactic({Id: tacticTemplate.Id, Type: tacticTemplate.Type});\r\n    },\r\n\r\n    duplicateTactic: function (tactic) {\r\n        PromotionActions.duplicateTactic(tactic.Id);\r\n    },\r\n\r\n    deleteTactic: function (tactic) {\r\n        var me = this;\r\n        var confirmMessage = {\r\n            title: 'Confirmation',\r\n            message: 'Do you want to delete the tactic?',\r\n            cancelHandler: function () {\r\n                me.setState({confirmMessage: null});\r\n            },\r\n            okHandler: function () {\r\n                PromotionActions.deleteTactic(tactic.Id);\r\n                me.setState({confirmMessage: null});\r\n            }\r\n        };\r\n\r\n        this.setState({confirmMessage: confirmMessage})\r\n    },\r\n\r\n    updateTactic: function (id, name, value) {\r\n        PromotionActions.setTacticField(id, name, value);\r\n    },\r\n\r\n    updatePromotion: function (id, name, value) {\r\n        PromotionActions.setPromotionField(id, name, value);\r\n    },\r\n\r\n    /*When save button is clicked*/\r\n    save: function () {\r\n        if (this.state.tree && this.state.tree != null) {\r\n            PromotionActions.setPromotionField(this.state.promotion.Id, 'Manual_Calculation_Input__c', JSON.stringify(this.state.tree.getManualChanges()));\r\n        }\r\n        PromotionActions.save(this.state.promotion.Id);\r\n        this.setState({editMode: false});\r\n    },\r\n\r\n    saveAndRefresh: function () {\r\n        if (this.state.tree && this.state.tree != null) {\r\n            PromotionActions.setPromotionField(this.state.promotion.Id, 'Manual_Calculation_Input__c', JSON.stringify(this.state.tree.getManualChanges()));\r\n        }\r\n        this.setState({enableToolbar: false});\r\n        PromotionActions.saveAndRefresh(this.state.promotion.Id);\r\n\r\n    },\r\n    //Unilever Function to call the Workflow change\r\n    changeWf: function (e) {\r\n        console.log(e);\r\n        PromotionActions.changeWfState(e);\r\n    },\r\n\r\n    //PMA - START CODE - 2017-01-13 - Threshold button\r\n    invokeThreshold: function () {\r\n        PromotionActions.invokeThreshold(this.state.promotion.Id, this);\r\n    },\r\n    //PMA - END CODE - 2017-01-13 - Threshold button\r\n\r\n    //PMA - START CODE - 2017-01-17 - Audit Trail button\r\n    invokeAuditTrail: function () {\r\n        PromotionActions.invokeAuditTrail();\r\n    },\r\n    //PMA - END CODE - 2017-01-17 - Audit Trail button\r\n\r\n    /*When edit button is clicked*/\r\n    edit: function () {\r\n        this.setState({editMode: true});\r\n    },\r\n\r\n    cancel: function () {\r\n        var me = this;\r\n        this.setState({enableToolbar: false});\r\n        PromotionActions.cancelEdit(this.state.promotion.Id, (this.state.tree && this.state.tree != null) ? \"tree\" : \"ui\");\r\n\r\n        this.setState({editMode: false});\r\n    },\r\n\r\n    pushMode: function () {\r\n        this.setState({pushMode: true});\r\n    },\r\n\r\n    pushModeEnd: function () {\r\n        this.setState({pushMode: false});\r\n    },\r\n\r\n    updateEnablePush: function () {\r\n        PromotionActions.updateEnablePush();\r\n    },\r\n\r\n    loadPlanningData: function () {\r\n        PromotionActions.setPromotionField(this.state.promotion.Id, 'Manual_Calculation_Input__c', JSON.stringify(this.state.tree.getManualChanges()));\r\n        this.setState({viewGrid: false});\r\n    },\r\n\r\n    loadGridData: function (showGrid) {\r\n        var me = this;\r\n        if (showGrid) {\r\n            this.setState({viewGrid: true});\r\n            PromotionActions.loadPromotionGrid(this.state.promotion.Id, this.state.promotion.Manual_Calculation_Input__c);\r\n        }\r\n    },\r\n\r\n    /**RENDERING*/\r\n    renderModeButtonGroup: function () {\r\n        return (\r\n            <ButtonGroup>\r\n                <Button className=\"view-switch icon-button\" type={(this.state.viewGrid) ? 'neutral' : 'brand'}\r\n                        icon='side_list' disabled={!this.state.enableToolbar}\r\n                        onClick={() => this.loadPlanningData()}/>\r\n                <Button className=\"view-switch icon-button\" type={(!this.state.viewGrid) ? 'neutral' : 'brand'}\r\n                        icon='table'\r\n                        disabled={!this.state.enableToolbar}\r\n                        onClick={() => this.loadGridData(true)}/>\r\n            </ButtonGroup>\r\n        )\r\n    },\r\n\r\n    isVisible(attribute){\r\n        var acl = this.state.promotion._acl;\r\n        return acl.isVisible(1, attribute);\r\n    },\r\n\r\n    renderToolbarView: function () {\r\n        var editButton, approveButton, cancelButton, kickOffWorkflowButton, pushButton, releaseButton, thresholdButton,\r\n            simulationButton, modelButton, plannedButton, submittedForApprovalButton, rejectedButton, finalisedButton, cancelledButton,\r\n            stoppedButton, auditTrailButton, endDateButton = null;\r\n\r\n        if (this.state.promotion != null && this.state.promotion.isEditable && (this.state.viewGrid || (!this.state.viewGrid && this.state.selectedItem != null && (this.state.selectedItem.type == 'PROMOTION' || this.state.selectedItem.type == 'TACTIC')))) {\r\n            editButton = <Button className=\"margin-large icon-button\" type='neutral' icon='edit' iconAlign='left'\r\n                                 onClick={() => this.edit()}>{AppManager.getLabel('PP_BTN_EDIT') || 'Edit'}</Button>;\r\n\r\n            //Custom buttons available in the left side of the toolbar\r\n            //PMA - START CODE - 2017-01-12 - Toolbar buttons visibility\r\n            //START SoCo Buttons\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_SUBMIT\"))\r\n                kickOffWorkflowButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                                onClick={(e) => this.changeWf('SUBMIT')}>{AppManager.getLabel('PP_BTN_SUBMIT') || 'Submit'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_APPROVE\"))\r\n                approveButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                        onClick={(e) => this.changeWf('APPROVE')}>{AppManager.getLabel('PP_BTN_APPROVE') || 'Approve'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_REJECT\"))\r\n                cancelButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                       onClick={(e) => this.changeWf('REJECT')}>{AppManager.getLabel('PP_BTN_REJECT') || 'Reject'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_ENDDATE\"))\r\n                endDateButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                       onClick={(e) => this.changeWf('EndDate')}>{AppManager.getLabel('PP_BTN_ENDDATE') || 'End Date'}</Button>;\r\n            //START UK Buttons\r\n            //PMA - START CODE - 2017-01-16 - New UK Button\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_SIMULATION\"))\r\n                simulationButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                           onClick={(e) => this.changeWf('Simulation')}>{AppManager.getLabel('PP_BTN_SIMULATION') || 'Simulation'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_MODEL\"))\r\n                modelButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                      onClick={(e) => this.changeWf('Model')}>{AppManager.getLabel('PP_BTN_MODEL') || 'Model'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_PLANNED\"))\r\n                plannedButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                        onClick={(e) => this.changeWf('Planned')}>{AppManager.getLabel('PP_BTN_PLANNED') || 'Planned'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_SUBMITTEDFORAPPROVAL\"))\r\n                submittedForApprovalButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                                     onClick={(e) => this.changeWf('Submitted for Approval')}>{AppManager.getLabel('PP_BTN_SUBMITTEDFORAPPROVAL') || 'Submitted for Approval'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_REJECTED\"))\r\n                rejectedButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                         onClick={(e) => this.changeWf('Rejected')}>{AppManager.getLabel('PP_BTN_REJECTED') || 'Rejected'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_FINALISED\"))\r\n                finalisedButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                          onClick={(e) => this.changeWf('Finalised')}>{AppManager.getLabel('PP_BTN_FINALISED') || 'Finalised'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_CANCELLED\"))\r\n                cancelledButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                          onClick={(e) => this.changeWf('Cancelled')}>{AppManager.getLabel('PP_BTN_CANCELLED') || 'Cancelled'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_STOPPED\"))\r\n                stoppedButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                        onClick={(e) => this.changeWf('Stopped')}>{AppManager.getLabel('PP_BTN_STOPPED') || 'Stopped'}</Button>;\r\n            //PMA - END CODE - 2017-01-16 - New UK Button\r\n            //PMA - START CODE - 2017-01-13 - Threshold button\r\n            if (this.state.promotion != null)\r\n                thresholdButton = <Button className=\"margin-large\" type='neutral'\r\n                                          onClick={(e) => this.invokeThreshold()}>{AppManager.getLabel('PP_BTN_INVOKETHRESHOLD') || 'Threshold'}</Button>;\r\n            //PMA - END CODE - 2017-01-13 - Threshold button\r\n\r\n            //Custom buttons available in the right side of the toolbar\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_AUDITTRAIL\"))\r\n                auditTrailButton = <Button className=\"margin-large icon-button\" type='neutral'\r\n                                           onClick={(e) => this.invokeAuditTrail()}>{AppManager.getLabel('PP_BTN_AUDITTRAIL') || 'Audit Trail'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_PUSH\"))\r\n                pushButton = <Button className=\"margin-large icon-button\" type='neutral' disabled={this.state.pushMode || !this.state.isPromotionSelected}\r\n                                     onClick={(e) => this.pushMode()}>{AppManager.getLabel('PP_BTN_PUSH') || 'Push'}</Button>;\r\n            if (this.state.promotion != null && this.isVisible(\"TOOLBAR_BTN_RELEASE\"))\r\n                releaseButton = <Button className=\"margin-large\" type='neutral' disabled={!this.state.isPromotionSelected}\r\n                                        onClick={(e) => this.updateEnablePush()}>{AppManager.getLabel('PP_BTN_RELEASE') || 'Release'}</Button>;\r\n            //PMA - END CODE - 2017-01-12 - Toolbar buttons visibility\r\n        }\r\n\r\n        return (\r\n            //add buttons in here\r\n            <div className=\"slds-grid\">\r\n                {this.renderModeButtonGroup()}\r\n                {editButton}\r\n                {kickOffWorkflowButton}\r\n                {approveButton}\r\n                {rejectedButton}\r\n                {cancelButton}\r\n                {endDateButton}\r\n                {simulationButton}\r\n                {modelButton}\r\n                {plannedButton}\r\n                {submittedForApprovalButton}\r\n                {finalisedButton}\r\n                {cancelledButton}\r\n                {stoppedButton}\r\n                {thresholdButton}\r\n                <div className='slds-col--bump-right'/>\r\n                {this.state.promotion && this.state.promotion.ChildAccounts && this.state.promotion.ChildAccounts.length > 0 ?\r\n                    <div className=\"slds-container--right\">\r\n                        {auditTrailButton}\r\n                        {pushButton}\r\n                        {releaseButton}\r\n                    </div>\r\n                    :\r\n                    <div className=\"slds-container--right\">\r\n                        {auditTrailButton}\r\n                    </div>\r\n                }\r\n                {(!this.state.viewGrid) ?\r\n                    <Button className=\"ui-attachment__button icon-button\"\r\n                            type={(this.state.showAttachments) ? 'brand' : 'neutral'}\r\n                            icon='attach'\r\n                            disabled={!this.state.isPromotionSelected}\r\n                            onClick={() => this.setState({showAttachments: !this.state.showAttachments})}/>\r\n                    : null}\r\n            </div>\r\n        )\r\n    },\r\n\r\n    // Change Button color onClick\r\n    noFocus: function (option) {\r\n        this.setState({\r\n            type: 'neutral'\r\n        });\r\n    },\r\n\r\n    changeButtonTypeOnClick: function () {\r\n        if (this.state.type == 'neutral') {\r\n            this.setState({\r\n                type: 'brand'\r\n            });\r\n        } else {\r\n            this.setState({\r\n                type: 'neutral'\r\n            });\r\n        }\r\n    },\r\n\r\n    renderToolbarEdit: function () {\r\n        var menuItems = [];\r\n        var enableToolbar = this.state.enableToolbar;\r\n        return (\r\n            <div className=\"slds-grid\">\r\n                {this.renderModeButtonGroup()}\r\n                {(!this.state.viewGrid && this.state.selectedTactic == null && this.isVisible(\"TOOLBAR_BTN_ADDTACTIC\")) ?\r\n                    <DropdownButton className=\"margin-large icon-dropdown\"\r\n                                    type={this.state.type} onBlur={this.noFocus} onMenuItemClick={this.noFocus}\r\n                                    onClick={this.changeButtonTypeOnClick}\r\n                                    icon='add' iconAlign='left'\r\n                                    iconMore=''\r\n                                    label='Add'\r\n                                    disabled={!enableToolbar}\r\n                                    menuAlign='center' nubbinTop>\r\n                        <label className='menuItemLabel'>{AppManager.getLabel('PP_LBL_TACTIC') || 'TACTIC'}</label>\r\n                        {this.state.promotion.tacticTemplates.map((tacticTemplate, ix) => {\r\n                                return <MenuItem key={ix}\r\n                                                 onClick={() => this.addTactic(tacticTemplate)}>{tacticTemplate.Description__c}</MenuItem>\r\n                            }\r\n                        )}\r\n                    </DropdownButton>\r\n                    : null}\r\n\r\n                {(!this.state.viewGrid && this.state.selectedTactic != null) ?\r\n                    <Button className=\"margin-large icon-button\" type='neutral' icon='relate' iconAlign='left'\r\n                            disabled={!enableToolbar}\r\n                            onClick={() => this.duplicateTactic(this.state.selectedTactic)}>{AppManager.getLabel('PP_BTN_DUPLICATE') || 'Duplicate'}</Button>\r\n                    : null}\r\n                {(!this.state.viewGrid && this.state.selectedTactic != null) ?\r\n                    <Button className=\"margin-small icon-button\" type='neutral' icon='delete' iconAlign='left'\r\n                            disabled={!enableToolbar}\r\n                            onClick={() => this.deleteTactic(this.state.selectedTactic)}>{AppManager.getLabel('PP_BTN_DELETE') || 'Delete'}</Button>\r\n                    : null}\r\n\r\n                <div className='slds-col--bump-right'/>\r\n\r\n                <Button type='neutral' icon='refresh' iconAlign='left' className=\"icon-button\" disabled={!enableToolbar}\r\n                        onClick={() => this.saveAndRefresh()}>{AppManager.getLabel('PP_BTN_SAVE_REFRESH') || 'Save & Refresh'}</Button>\r\n                <Button className=\"margin-small icon-button\" type='neutral' icon='close' iconAlign='left'\r\n                        disabled={!enableToolbar}\r\n                        onClick={() => this.cancel()}>{AppManager.getLabel('PP_BTN_CANCEL') || 'Cancel'}</Button>\r\n                <Button className=\"margin-small icon-button\" type='neutral' icon='check' iconAlign='left'\r\n                        disabled={!enableToolbar}\r\n                        onClick={() => this.save()}>{AppManager.getLabel('PP_BTN_DONE') || 'Done'}</Button>\r\n\r\n                {(!this.state.viewGrid) ?\r\n                    <Button className=\"ui-attachment__button icon-button\"\r\n                            type={(this.state.showAttachments) ? 'brand' : 'neutral'}\r\n                            icon='attach'\r\n                            disabled={!enableToolbar || !this.state.isPromotionSelected}\r\n                            onClick={() => this.setState({showAttachments: !this.state.showAttachments})}/>\r\n                    : null}\r\n\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderMainSectionView: function () {\r\n        var overviewItem = null;\r\n        if (this.state.selectedItem != null) {\r\n            if (this.state.selectedItem.type == 'PROMOTION' || this.state.selectedTactic == null) {\r\n                overviewItem = <PromotionOverview promotion={this.state.promotion}\r\n                                                  editMode={this.state.editMode} update={this.updatePromotion}\r\n                                                  showAttachments={this.state.showAttachments}\r\n                                                  editToggle={this.edit} pushMode={this.state.pushMode}\r\n                                                  pushModeEnd={this.pushModeEnd}/>\r\n            } else {//if (this.state.selectedItem.type == 'TACTIC') {\r\n                overviewItem = <TacticOverview item={this.state.selectedTactic} editMode={this.state.editMode}\r\n                                               update={this.updateTactic } productFilters={this.state.productFilters}\r\n                                               productSearch={this.state.productSearch} onSelect={this.selectItem}/>\r\n            }\r\n            /*else if (this.state.selectedItem.type == 'CATEGORY') {\r\n             overviewItem = <ProductGroupOverview item={this.state.selectedItem}/>\r\n             } else if (this.state.selectedItem.type == 'PRODUCT') {\r\n             overviewItem = <ProductOverview item={this.state.selectedItem}/>\r\n             }*/\r\n        }\r\n        return (\r\n            <div className=\"mainBodySection slds-grid\">\r\n                <div className=\"slds-grid slds-nowrap slds-grid--vertical-stretch\" style={{width: '100%'}}>\r\n                    <DrillDown root={this.state.promotion} onSelect={this.selectItem}\r\n                               selectedTactic={this.state.selectedTactic}/>\r\n                    <div className=\"flex-grow slds-scrollable--y\" style={{maxWidth: 'calc(100% - 360px)'}}>\r\n                        {overviewItem}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderGridSectionView: function () {\r\n        return (\r\n            <div className=\"slds-scrollable--y mainBodySection slds-grid\">\r\n                <div className=\"slds-size--1-of-1 slds-grid slds-wrap slds-grid--vertical-stretch\">\r\n                    <div className=\"slds-size--1-of-3 tile calc-grid\">\r\n                        <PromotionPlanningCalculationGridPage tree={this.state.tree} editMode={this.state.editMode}\r\n                                                              idToLabelMapping={this.state.idToLabelMapping}\r\n                                                              acl={this.state.promotion._acl}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    },\r\n\r\n    showLog: function (e) {\r\n        if (e.ctrlKey && e.altKey) {\r\n            console.group('DEBUGGER INFORMATION')\r\n            console.dir(this.state.promotion);\r\n            console.log(\"State\");\r\n            console.dir(this.state);\r\n            console.groupEnd();\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        var toolbar = (this.state.editMode) ? this.renderToolbarEdit() : this.renderToolbarView();\r\n        var mainSection = (this.state.viewGrid) ? this.renderGridSectionView() : this.renderMainSectionView();\r\n\r\n        var appHeader = null;\r\n        if (this.state.promotion != null) {\r\n            var fromDate = /*(_.isDate(this.props.promotion.Date_From__c)) ?*/ Utils.Formatters.formatDate(this.state.promotion.Date_From__c)/* : this.props.promotion.Date_From__c*/;\r\n            var toDate = /*(_.isDate(this.props.promotion.Date_Thru__c)) ? */Utils.Formatters.formatDate(this.state.promotion.Date_Thru__c) /*: this.props.promotion.Date_Thru__c*/;\r\n            var account = (this.state.promotion.Anchor_Account__r != null) ? this.state.promotion.Anchor_Account__r.Name : '';\r\n            appHeader =\r\n                <AppHeader title={this.state.promotion.Slogan__c} subtitle={account + ' ' + fromDate + ' - ' + toDate}\r\n                           icon='promo.png'/>\r\n        }\r\n\r\n        return (\r\n            <div className=\"mainSection \">\r\n                {(this.state.message) ?\r\n                    <MessagePopup title={this.state.message.title} message={this.state.message.message}\r\n                                  messagejson={this.state.message.messagejson}\r\n                                  cancelHandler={this.state.message.cancelHandler}/> : null}\r\n                {(this.state.confirmMessage) ?\r\n                    <ConfirmPopup title={this.state.confirmMessage.title} message={this.state.confirmMessage.message}\r\n                                  cancelHandler={this.state.confirmMessage.cancelHandler}\r\n                                  okHandler={this.state.confirmMessage.okHandler}/> : null}\r\n                {appHeader}\r\n\r\n                <div className=\"slds-page-header promotion-toolbar\" onClick={this.showLog}>\r\n                    {toolbar}\r\n                </div>\r\n                {(this.state.promotion != null) ? mainSection : null}\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/controller/PromotionPlanning.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar Truncate = require('../components/Truncate');\r\nvar ACLCheck = require('../components/ACLCheck');\r\n\r\nmodule.exports = React.createClass({\r\n    propTypes: {\r\n        root: React.PropTypes.object, // This must be the promotion structure tree\r\n        onSelect: React.PropTypes.func, // Handler for selected node\r\n        selectedTactic: React.PropTypes.object\r\n    },\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            selectedNode: this.props.root,\r\n            selectedProduct: null\r\n        };\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        UI_EVENT_BUS.subscribe(EVENTS.UI_BINDING, this.onUIBinding);\r\n        this.setParent(this.state.selectedNode, 0);\r\n        this.selectNode(this.props.root);\r\n    },\r\n\r\n    onUIBinding: function (payload) {\r\n        if (this.isMounted())\r\n            this.setState(payload)\r\n    },\r\n\r\n    componentWillReceiveProps: function (props) {\r\n        if (!_.isEqual(this.props.root, props.root)) {\r\n            this.setParent(props.root, 0);\r\n\r\n            var selectedNode = this.lookforNode(props.root, this.state.selectedNode.Id);\r\n            if (selectedNode) {\r\n                this.setState({\r\n                    selectedNode: selectedNode\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    selectedNode: props.root\r\n                });\r\n            }\r\n        }\r\n    },\r\n\r\n    lookforNode: function (item, id) {\r\n        if (item.Id == id) {\r\n            return item;\r\n        }\r\n        if (item['children'] && item.children.length > 0) {\r\n            for (var i = 0; i < item.children.length; i++) {\r\n                var node = this.lookforNode(item.children[i], id);\r\n                if (node) return node;\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n    setParent: function (item, deepLevel) {\r\n        switch (deepLevel) {\r\n            case 0:\r\n                item.type = 'PROMOTION';\r\n                break;\r\n            case 1:\r\n                item.type = 'TACTIC';\r\n                break;\r\n            case 2:\r\n                item.type = 'CATEGORY';\r\n                break;\r\n            default:\r\n                item.type = 'PRODUCT';\r\n                break;\r\n        }\r\n        if (item['children'] && item.children.length > 0) {\r\n            for (var i = 0; i < item.children.length; i++) {\r\n                item.children[i].parent = item;\r\n                this.setParent(item.children[i], deepLevel + 1)\r\n            }\r\n        }\r\n    },\r\n\r\n    selectNode: function (item) {\r\n        var me = this;\r\n        var emitSelect = function () {\r\n            if (me.props.onSelect) {\r\n                me.props.onSelect(item);\r\n            }\r\n        };\r\n\r\n        if (item.type == 'PRODUCT') //Leaf node: \"PRODUCT\"\r\n            this.setState({selectedProduct: item}, emitSelect);\r\n        else\r\n            this.setState({selectedNode: item, selectedProduct: null}, emitSelect);\r\n    },\r\n\r\n    getParentTitle: function (item) {\r\n        var title = '';\r\n\r\n        if (item.type == 'PROMOTION') {\r\n            title = item.Slogan__c;\r\n        }\r\n\r\n        if (item.type == 'TACTIC') {\r\n            title = item.Tactic_Template;\r\n        }\r\n\r\n        if (item.type == 'CATEGORY') {\r\n            title = item.Name;\r\n        }\r\n\r\n        if (item.type == 'PRODUCT') {\r\n        }\r\n\r\n        return title;\r\n    },\r\n\r\n    getParentSubtitle: function (item) {\r\n        var subitems = '';\r\n\r\n        if (item.type == 'PROMOTION') {\r\n            subitems = 'Tactics';\r\n        }\r\n\r\n        if (item.type == 'TACTIC') {\r\n            subitems = 'Product Groups';//TODO LOCALIZE\r\n        }\r\n\r\n        if (item.type == 'CATEGORY') {\r\n            subitems = 'Products';\r\n        }\r\n\r\n        if (item.type == 'PRODUCT') {\r\n        }\r\n\r\n        return '(' + item.children.length + ' ' + subitems + ')';\r\n    },\r\n\r\n    renderParentOpenNode: function (item, ix) {\r\n        if (item.type == 'PRODUCT')\r\n            return null;\r\n        var parentText = <span>{this.getParentTitle(item)} {this.getParentSubtitle(item)}</span>\r\n        return (\r\n            <div key={ix} className=\"parentitem open\">\r\n                <div className=\"title\">\r\n                    <a href=\"#\" onClick={()=>this.selectNode(item)}>\r\n                        <Truncate lines={2} children={parentText}></Truncate>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderTacticNode: function (item, index) {\r\n        var childSelector = null;\r\n        if (item['children'] && item.children.length > 0) {\r\n            childSelector = <Icon icon=\"chevronright\" className=\"handler\"/>;\r\n        }\r\n        else {\r\n            childSelector = <div className=\"handler\"/>;\r\n        }\r\n\r\n        var fromDate = (item.Date_From__c) ? Utils.Formatters.formatDate(new Date(item.Date_From__c)) : '';\r\n        var toDate = (item.Date_Thru__c) ? Utils.Formatters.formatDate(new Date(item.Date_Thru__c)) : '';\r\n        var metadata = item._meta;\r\n\r\n        return (\r\n            <div key={index} className=\"item\">\r\n                <a href=\"#\" onClick={()=>this.selectNode(item)}>\r\n                    <div className=\"itemInfo\">\r\n                        <div className=\"itemTitle\">\r\n                            <div className=\"desc\">{item.Tactic_Template}</div>\r\n                            <div className=\"itemSubtitle\">{fromDate} - {toDate}</div>\r\n                        </div>\r\n                        <div className=\"itemBody\">\r\n                            <div className=\"itemContent\">\r\n                                <div className=\"itemProp\">\r\n                                    <label>{metadata.Pct_of_Stores__c.label}</label>\r\n                                    <span>{Utils.Formatters.formatNumber(item.Pct_of_Stores__c)}</span>\r\n                                </div>\r\n                                <ACLCheck object={this.state.selectedNode} field=\"TacticLift\">\r\n                                <div className=\"itemProp\">\r\n                                    <label>{metadata.Lift__c.label}</label>\r\n                                    <span>{Utils.Formatters.formatNumber(item.Lift__c)}</span>\r\n                                </div>\r\n                                </ACLCheck>\r\n                                <div className=\"itemProp\">\r\n                                    <label>{metadata.Amount__c.label}</label>\r\n                                    <span>{Utils.Formatters.formatNumber(item.Amount__c)}</span>\r\n                                </div>\r\n                                <div className=\"itemProp large\">\r\n                                    <label>{metadata.Compensation_Model__c.label}</label>\r\n                                    <span>{item.Compensation_Model__c}</span>\r\n                                </div>\r\n\r\n                                <div className=\"itemProp\">\r\n                                    <label>{metadata.Payment_Method__c.label}</label>\r\n                                    <span>{item.Payment_Method__c}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {childSelector}\r\n                </a>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderProductGroupNode: function (item, index) {\r\n        var childSelector = null;\r\n        if (item['children'] && item.children.length > 0) {\r\n            childSelector = <Icon icon=\"chevronright\" className=\"handler\"/>\r\n        }\r\n\r\n        var classItem = 'item';\r\n        if (this.state.selectedProduct == item)\r\n            classItem += ' selected';\r\n\r\n        return (\r\n            <div key={index} className={classItem}>\r\n                <a href=\"#\" onClick={()=>this.selectNode(item)}>\r\n                    <div className=\"itemTitle\">\r\n                        <div className=\"desc\">{item.Name}</div>\r\n                        {childSelector}\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderProductNode: function (item, index) {\r\n        var childSelector = null;\r\n\r\n        var classItem = 'item';\r\n        if (this.state.selectedProduct == item)\r\n            classItem += ' selected';\r\n\r\n        return (\r\n            <div key={index} className={classItem}>\r\n                <a href=\"#\" onClick={()=>this.selectNode(item)}>\r\n                    <div className=\"itemTitle\">\r\n                        <div className=\"desc\">{item.Name}</div>\r\n                    </div>\r\n                </a>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderSelectedNode: function (item, index) {\r\n        var selectedText = <span>{this.getParentTitle(item)} {this.getParentSubtitle(item)}</span>\r\n        return (\r\n            <div key={index}>\r\n                <div className=\"parentitem selected\">\r\n                    <div key=\"0\" className=\"title\">\r\n                        <a href=\"#\" onClick={()=>this.selectNode(item)}>\r\n                            <Truncate lines={2} children={selectedText}></Truncate>\r\n                        </a>\r\n                    </div>\r\n                    {item.children\r\n                        .map((item, i) => {\r\n                            if (item.type == 'TACTIC')\r\n                                return this.renderTacticNode(item, i + 1);\r\n                            else if (item.type == 'CATEGORY')\r\n                                return this.renderProductGroupNode(item, i + 1);\r\n                            else\r\n                                return this.renderProductNode(item, i + 1);\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    render: function () {\r\n        var openNodes = [];\r\n        if (this.props.root == null) {\r\n            return (\r\n                <div className=\"drilldown\">{AppManager.getLabel('PP_LBL_NODATA') || 'No data'}</div>\r\n            )\r\n        }\r\n        var selectedParentNode = this.state.selectedNode.parent;\r\n        var ix = 1;\r\n        while (selectedParentNode != null) {\r\n            openNodes.unshift(this.renderParentOpenNode(selectedParentNode, ix++));\r\n            selectedParentNode = selectedParentNode.parent;\r\n        }\r\n        return (\r\n            <div className=\"drilldown slds-scrollable--y\">\r\n                {openNodes}\r\n                {this.renderSelectedNode(this.state.selectedNode, ix++)}\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/Drilldown.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\n\r\nmodule.exports = React.createClass({\r\n    render: function () {\r\n        var acl = this.props.object._acl;\r\n        var isVisible = true;\r\n        if (acl)\r\n            isVisible= acl.isVisible(1, this.props.field);\r\n        return (\r\n           (isVisible)?this.props.children:null\r\n               \r\n        )\r\n    }\r\n});\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/ACLCheck.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Tile = require('../components/Tile');\r\nvar ReactCSSTransitionGroup = require('react-addons-css-transition-group');\r\nvar LineChart = require('../components/LineChart');\r\nvar StackedChart = require('../components/StackedChart');\r\nvar HorizontalChart = require('../components/HorizontalChart');\r\nvar HorizontalBarChart = require('../components/HorizontalBarChart');\r\nvar ACLCheck = require('../components/ACLCheck');\r\nvar PromotionAttachments = require('./PromotionAttachments');\r\n\r\nvar PromotionPlanningPromotionEdit = require('./PromotionPlanningPromotionEdit');\r\nvar PromotionChildAccounts = require('./PromotionChildAccounts.jsx');\r\n\r\nmodule.exports = new React.createClass({\r\n    displayName: 'PromotionOverview',\r\n\r\n    propTypes: {\r\n        promotion: React.PropTypes.object,      //Promotion details\r\n        editMode: React.PropTypes.bool,         //Flag for showing Edit window\r\n        showAttachments: React.PropTypes.bool   //Flag for showing Attachments\r\n    },\r\n\r\n    render: function () {\r\n        return (<div className=\"slds-grid slds-wrap tile-area\">\r\n\r\n                {(this.props.showAttachments) ?\r\n                    <ReactCSSTransitionGroup component=\"div\"\r\n                                             className=\"slds-size--1-of-1\"\r\n                                             transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                             transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                             transitionLeaveTimeout={1500}>\r\n                        <PromotionAttachments promotion={this.props.promotion} editMode={this.props.editMode}\r\n                                              editToggle={this.props.editToggle}/>\r\n                    </ReactCSSTransitionGroup> : null}\r\n\r\n                <ReactCSSTransitionGroup component=\"div\"\r\n                                         className=\"slds-size--1-of-1\"\r\n                                         transitionName={{\r\n                                             enter: \"animated\",\r\n                                             enterActive: \"flipInX\",\r\n                                             leave: \"animated\",\r\n                                             leaveActive: \"flipOutX\"\r\n                                         }}\r\n                                         transitionEnterTimeout={500} transitionLeaveTimeout={500}>\r\n                    <PromotionPlanningPromotionEdit ref='editPanel' promotion={this.props.promotion}\r\n                                                    update={this.props.update} editMode={this.props.editMode}/>\r\n                </ReactCSSTransitionGroup>\r\n\r\n                {(this.props.promotion && this.props.promotion.ChildAccounts && this.props.promotion.ChildAccounts.length > 0) ?\r\n                    <ReactCSSTransitionGroup component=\"div\"\r\n                                             className=\"slds-size--1-of-1\"\r\n                                             transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                             transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                             transitionLeaveTimeout={1500}>\r\n                        <PromotionChildAccounts promotion={this.props.promotion} editMode={this.props.editMode}\r\n                                                pushMode={this.props.pushMode} pushModeEnd={this.props.pushModeEnd}/>\r\n                    </ReactCSSTransitionGroup>: null}\r\n\r\n                <ACLCheck object={this.props.promotion} field=\"AggregatedKPI\">\r\n                    <div className=\"slds-col--padded-right slds-col--padded-top slds-size--1-of-2\">\r\n                        <ReactCSSTransitionGroup transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                                 transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                                 transitionLeaveTimeout={1500}>\r\n                            <Tile key='tile21' animated={true} invalid={this.props.promotion.isKPIInvalid}>\r\n                                <HorizontalChart title={AppManager.getLabel('PP_TIT_CHART_ROI') || 'ROI'}\r\n                                                 formatter={Utils.Formatters.formatPct}\r\n                                                 positiveKPI={true}\r\n                                                 mainvalue={this.props.promotion.AggregatedKPIs.LROI}\r\n                                                 planned={this.props.promotion.AggregatedKPIs.PROI}/>\r\n                            </Tile>\r\n                        </ReactCSSTransitionGroup>\r\n                    </div>\r\n                </ACLCheck>\r\n\r\n                <ACLCheck object={this.props.promotion} field=\"AggregatedKPI\">\r\n                    <div className=\"slds-col--padded-top slds-size--1-of-2\">\r\n                        <ReactCSSTransitionGroup transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                                 transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                                 transitionLeaveTimeout={1500}>\r\n                            <Tile key='tile31' animated={true} invalid={this.props.promotion.isKPIInvalid}>\r\n                                <HorizontalChart title={AppManager.getLabel('PP_TIT_CHART_COSTS') || 'COSTS'}\r\n                                                 formatter={Utils.Formatters.formatCurrency}\r\n                                                 positiveKPI={false}\r\n                                                 mainvalue={this.props.promotion.AggregatedKPIs.LETP}\r\n                                                 planned={this.props.promotion.AggregatedKPIs.PTPC}/>\r\n                            </Tile>\r\n                        </ReactCSSTransitionGroup>\r\n                    </div>\r\n                </ACLCheck>\r\n\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/PromotionOverview.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nmodule.exports = React.createClass({\r\n    render: function () {\r\n        var klass = 'tile ' + (this.props.animated ? 'animated ' : '') + (this.props.invalid ? 'invalid' : '' );\r\n\r\n        return (\r\n            <div key='tile' className={klass}>\r\n                {(this.props.invalid) ?\r\n                    <div className='mask'>\r\n                        <Icon category='utility' icon='undo' size='x-medium' className='slds-align--absolute-center'/>\r\n                    </div> : null}\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Tile.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Chartist = require('chartist');\r\n\r\nmodule.exports = React.createClass({\r\n    componentDidMount: function () {\r\n        this.updateChart(this.props.data);\r\n    },\r\n\r\n    updateChart: function (data) {\r\n        var options = {\r\n            axisX: {\r\n                showLabel: true,\r\n                showGrid: false\r\n            },\r\n            showPoint: false,\r\n            lineSmooth: false,\r\n            fullWidth: true,\r\n            height: '245px',\r\n            chartPadding: {\r\n                top: 15,\r\n                right: 15,\r\n                bottom: 5,\r\n                left: 10\r\n            }\r\n        };\r\n\r\n        var chart = new Chartist.Line('.linechart', data, options);\r\n        chart.on('draw', function (data) {\r\n            if (data.type === 'line' || data.type === 'area') {\r\n                data.element.animate({\r\n                    d: {\r\n                        begin: 500 * data.index,\r\n                        dur: 1000,\r\n                        from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\r\n                        to: data.path.clone().stringify(),\r\n                        easing: Chartist.Svg.Easing.easeOutQuint\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return chart;\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div className=\"chart-tile\">\r\n                <div className=\"title\">{this.props.title}</div>\r\n                <div className=\"linechart\"></div>\r\n                <div className=\"legend\">\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-a legend-box\"></div>\r\n                        {this.props.data.legends[0]}</div>\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-b legend-box\"></div>\r\n                        {this.props.data.legends[1]}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/LineChart.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Chartist = require('chartist');\r\n\r\nmodule.exports = React.createClass({\r\n    componentDidMount: function () {\r\n        this.updateChart(this.props.data);\r\n    },\r\n\r\n    updateChart: function (data) {\r\n        var options = {\r\n            axisX: {\r\n                showLabel: true,\r\n                showGrid: false\r\n            },\r\n            showPoint: false,\r\n            lineSmooth: false,\r\n            fullWidth: true,\r\n            stackBars: true,\r\n            height: '245px',\r\n            chartPadding: {\r\n                top: 15,\r\n                right: 15,\r\n                bottom: 5,\r\n                left: 10\r\n            }\r\n        };\r\n        var chart = new Chartist.Bar('.stackedchart', data, options);\r\n\r\n        chart.on('draw', function (data) {\r\n            if (data.type === 'bar') {\r\n                data.element.animate({\r\n                    y2: {\r\n                        begin: 200 * data.index,\r\n                        dur: 1000,\r\n                        from: data.y1,\r\n                        to: data.y2,\r\n                        easing: Chartist.Svg.Easing.easeOutQuint\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return chart;\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div className=\"chart-tile\">\r\n                <div className=\"title\">{this.props.title}</div>\r\n                <div className=\"stackedchart\"></div>\r\n                <div className=\"legend\">\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-a legend-box\"></div>\r\n                        {this.props.data.legends[0]}</div>\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-b legend-box\"></div>\r\n                        {this.props.data.legends[1]}</div>\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-c legend-box\"></div>\r\n                        {this.props.data.legends[2]}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/StackedChart.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nmodule.exports = React.createClass({\r\n    renderEmpty: function () {\r\n        return (\r\n            <div className=\"chart-tile empty-chart\">\r\n                <div className=\"title\">{this.props.title}</div>\r\n                <div className=\"main-value\">{this.props.formatter(0)}</div>\r\n                <div className=\"sub-value\">{this.props.formatter(0)}</div>\r\n                <div className=\"horizontal-chart\">\r\n                    <div className=\"back-chart\">Sorry, no data available yet</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    render: function () {\r\n        if (this.props.mainvalue == null) return this.renderEmpty();\r\n\r\n        var classChart = \"chart-tile\";\r\n        var sign = (this.props.positiveKPI) ? '+' : '-';\r\n        var diff = Math.floor(Math.abs(this.props.mainvalue - this.props.planned) * 100) / 100;\r\n\r\n        var pctWidth = Math.abs((1 - diff / this.props.mainvalue) * 100);\r\n        var labelStyle = {left: pctWidth + '%', textAlign: 'right'};\r\n\r\n        if (pctWidth > 80) {\r\n            labelStyle = {left: 'auto', right: 0};\r\n        }\r\n\r\n        if (pctWidth < 10) {\r\n            labelStyle = {left: '10%', textAlign: 'right'};\r\n        }\r\n\r\n        if (this.props.positiveKPI) {//ROI\r\n            if (this.props.mainvalue < this.props.planned) {//negative.aligning to the right\r\n                classChart += ' negative';\r\n                sign = (this.props.positiveKPI) ? '-' : '+';\r\n                labelStyle = {left: 'auto', right: 0};\r\n            }\r\n        } else {//COST\r\n            if (this.props.mainvalue > this.props.planned) {//negative.aligning to the right\r\n                classChart += ' negative';\r\n                sign = (this.props.positiveKPI) ? '-' : '+';\r\n            } else {//positive.align to the left side of the ROI bar\r\n                labelStyle = {left: 'auto', right: 0};\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className={classChart}>\r\n                <div className=\"title\">{this.props.title}</div>\r\n                <div className=\"main-value\">{this.props.formatter(this.props.mainvalue)}</div>\r\n                <div className=\"sub-value\">{sign}{this.props.formatter(diff)}</div>\r\n                <div className=\"horizontal-chart\">\r\n                    <div className=\"back-chart\"></div>\r\n                    <div className=\"front-chart\" style={{width: pctWidth + '%'}}></div>\r\n                    <div className=\"legend\">\r\n                        <span className=\"val initial\">{this.props.formatter(0)}</span>\r\n                        <span className=\"val final\"\r\n                              style={labelStyle}>{AppManager.getLabel('PP_LBL_PLANNED') || 'Planned'} {this.props.formatter(this.props.planned)}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/HorizontalChart.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Chartist = require('chartist');\r\n\r\nmodule.exports = React.createClass({\r\n    componentDidMount: function () {\r\n        this.updateChart(this.props.data);\r\n    },\r\n\r\n    updateChart: function (data) {\r\n        var options = {\r\n            axisX: {\r\n                showLabel: true,\r\n                showGrid: true,\r\n                labelInterpolationFnc: function (value) {\r\n                    return '$' + (value / 1000000) + 'M'\r\n                }\r\n            },\r\n            axisY: {\r\n                showLabel: true,\r\n                showGrid: true,\r\n                offset: 50\r\n            },\r\n            showPoint: false,\r\n            lineSmooth: false,\r\n            fullWidth: true,\r\n            stackBars: false,\r\n            horizontalBars: true,\r\n            height: '245px',\r\n            chartPadding: {\r\n                top: 15,\r\n                right: 15,\r\n                bottom: 5,\r\n                left: 10\r\n            }\r\n        };\r\n\r\n        var chart = new Chartist.Bar('.horizontalchart', data, options);\r\n        chart.on('draw', function (data) {\r\n            if (data.type === 'bar') {\r\n                data.element.animate({\r\n                    x2: {\r\n                        begin: 200 * data.index,\r\n                        dur: 1000,\r\n                        from: data.x1,\r\n                        to: data.x2,\r\n                        easing: Chartist.Svg.Easing.easeOutQuint\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return chart;\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div className=\"chart-tile\">\r\n                <div className=\"title\">{this.props.title}</div>\r\n                <div className=\"horizontalchart\"></div>\r\n                <div className=\"legend\">\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-a legend-box\"></div>\r\n                        {this.props.data.legends[0]}</div>\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-b legend-box\"></div>\r\n                        {this.props.data.legends[1]}</div>\r\n                    <div className=\"legendItem\">\r\n                        <div className=\"ct-series-c legend-box\"></div>\r\n                        {this.props.data.legends[2]}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/HorizontalBarChart.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nvar ImagePopup = require('../components/ImagePopup.jsx');\r\nvar UploadPopup = require('../components/UploadPopup.jsx');\r\nvar ConfirmPopup = require('../components/ConfirmPopup');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'PromotionAttachments',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            selectedAttachment: null,\r\n            selectedAttachmentIndex: null,\r\n            onFileHoverClass: false,\r\n            newAttachment: this.getEmptyAttachment(),\r\n            modalOpen: false,\r\n            uploading: false,\r\n            confirmMessage: false,\r\n            attachments: this.getAttachments(this.props.promotion.attachments)\r\n        };\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        this.deactivateAttachments();\r\n    },\r\n\r\n    componentWillMount: function () {\r\n        this.selectAttachment(this.state.attachments[0]);\r\n    },\r\n\r\n    componentWillReceiveProps: function (props) {\r\n        var state = {\r\n            attachments: this.getAttachments(props.promotion.attachments)\r\n        };\r\n        this.setState(state);\r\n        if (this.state.newAttachment.file) {\r\n            let i = _.findIndex(state.attachments, att =>\r\n                att.Name == this.state.newAttachment.file.name /* && ... */\r\n            );\r\n            if (i != -1) {\r\n                this.selectAttachment(state.attachments[i]);\r\n                this.setState({\r\n                    newAttachment: this.getEmptyAttachment()\r\n                });\r\n            } else this.selectAttachment(state.attachments[0]);\r\n        } else this.selectAttachment(state.attachments[0]);\r\n    },\r\n\r\n    getEmptyAttachment: function () {\r\n        return {\r\n            previewUrl: null,\r\n            attachmentUrl: null,\r\n            Description_Language_1__c: '',\r\n            Type__c: '',\r\n            Size__c: 0,\r\n            Name: null,\r\n            CreatedDate: new Date(),\r\n            LastModifiedDate: new Date()\r\n        };\r\n    },\r\n\r\n    getAttachments: function (attachments) {\r\n        return attachments.map(att => {\r\n            att = Object.create(att, {_model: {value: att}});\r\n            if (typeof localVF !== 'undefined') {\r\n                if (att.attachmentUrl) att.attachmentUrl = `https://${VF_REMOTING_HOST}${att.attachmentUrl}`;\r\n                if (att.previewUrl) att.previewUrl = `https://${VF_REMOTING_HOST}${att.previewUrl}`;\r\n            }\r\n            return att;\r\n        });\r\n    },\r\n\r\n    isReadable: function (attachment) {\r\n        var isReadable = true;\r\n        try {\r\n            new FileReader().readAsBinaryString(attachment.slice(0, 5));\r\n        } catch (e) {\r\n            isReadable = false;\r\n        }\r\n        return isReadable;\r\n    },\r\n\r\n    onFileSelection: function (event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var files = event.target.files || event.dataTransfer.files;\r\n\r\n        if (files.length < 2 && this.isReadable(files[0])) {\r\n            if (files[0].name.length <= 80) {\r\n                if (files[0].size > 0 && files[0].size < 26214400) {\r\n\r\n                    this.setState({\r\n                        newAttachment: _.assign(this.state.newAttachment, {\r\n                            file: files[0],\r\n                            Type__c: files[0].type,\r\n                            Name: files[0].name,\r\n                            Size__c: files[0].size,\r\n                            Description_Language_1__c: files[0].name,\r\n                            Description_Language_2__c: files[0].name,\r\n                            Description_Language_3__c: files[0].name,\r\n                            Description_Language_4__c: files[0].name\r\n                        }),\r\n                        onFileHoverClass: false\r\n                    });\r\n\r\n                    this.openUploadModal();\r\n\r\n                } else {\r\n                    UI_EVENT_BUS.put(EVENTS.UI_ERROR, {\r\n                        title: (AppManager.getLabel(\"PP_TIT_UPLOAD_ATTACHMENT_ERROR\") || 'Upload Error'),\r\n                        message: (AppManager.getLabel(\"PP_LBL_UPLOAD_ATTACHMENT_SIZE_ERROR\") || 'File incorrect size. The attachment has to be less than 25MB.'),\r\n                        type: 'E'\r\n                    });\r\n                }\r\n            } else {\r\n                UI_EVENT_BUS.put(EVENTS.UI_ERROR, {\r\n                    title: (AppManager.getLabel(\"PP_TIT_UPLOAD_ATTACHMENT_ERROR\") || 'Upload Error'),\r\n                    message: (AppManager.getLabel(\"PP_LBL_UPLOAD_ATTACHMENT_FILENAME_SIZE_ERROR\") || 'The filename is too long (max. 80 chars)'),\r\n                    type: 'E'\r\n                });\r\n            }\r\n        } else {\r\n            UI_EVENT_BUS.put(EVENTS.UI_ERROR, {\r\n                title: (AppManager.getLabel(\"PP_TIT_UPLOAD_ATTACHMENT_ERROR\") || 'Upload Error'),\r\n                message: (AppManager.getLabel(\"PP_LBL_UPLOAD_ATTACHMENT_NUMBER_OF_FILES_ERROR\") || 'Only one file allowed per upload'),\r\n                type: 'E'\r\n            });\r\n        }\r\n\r\n        if (event.target.files) event.target.value = '';\r\n\r\n    },\r\n\r\n    onFileLeave: function () {\r\n        this.setState({onFileHoverClass: false});\r\n    },\r\n\r\n    onFileHover: function (event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        var itemKind = event.dataTransfer.items[0].kind;\r\n        if (itemKind == 'file') {\r\n            this.setState({onFileHoverClass: true});\r\n        }\r\n    },\r\n\r\n    deactivateAttachments: function () {\r\n        for (var i = 0; i < this.state.attachments.length; ++i) {\r\n            this.state.attachments[i].active = false;\r\n        }\r\n    },\r\n\r\n    selectAttachment: function (attachment) {\r\n        this.deactivateAttachments();\r\n        if (attachment) attachment.active = true;\r\n        this.setState({selectedAttachment: attachment});\r\n    },\r\n\r\n    openAttachment: function (attachment) {\r\n        window.open(attachment.attachmentUrl);\r\n    },\r\n\r\n    renderOpenAttachment: function (attachment, index) {\r\n        if (attachment.Type__c.indexOf('image') != -1) {\r\n            this.setState({\r\n                modalOpen: true,\r\n                selectedAttachment: attachment,\r\n                selectedAttachmentIndex: index\r\n            });\r\n        } else {\r\n            this.setState({modalOpen: false});\r\n            window.open(attachment.attachmentUrl);\r\n        }\r\n    },\r\n\r\n    closeImagesModal: function () {\r\n        this.setState({modalOpen: false});\r\n    },\r\n\r\n    getFileIcon: function (file) {\r\n        let icon = \"unknown\",\r\n            mimeType = file.Type__c,\r\n            fileExt = file.Name.split('.').pop(),\r\n            type = (mimeType.split('/'))[0],\r\n            subtype = (mimeType.split('/')[1]);\r\n        if (fileExt && _.indexOf(['exe', 'csv', 'zip', 'ai', 'eps'], fileExt) != -1) {\r\n            icon = fileExt;\r\n        } else if (subtype && _.indexOf(['pdf', 'xml', 'rtf', 'html'], subtype) != -1) {\r\n            icon = subtype;\r\n        } else if (subtype && (subtype.indexOf('psd') != -1 || subtype.indexOf('photoshop') != -1)) {\r\n            icon = \"psd\";\r\n        } else if (subtype && (subtype.indexOf('ms-msword') != -1 || subtype.indexOf('wordprocessingml') != -1)) {\r\n            icon = \"word\";\r\n        } else if (subtype && (subtype.indexOf('ms-powerpoint') != -1 || subtype.indexOf('presentationml') != -1)) {\r\n            icon = \"ppt\";\r\n        } else if (subtype && (subtype.indexOf('ms-excel') != -1 || subtype.indexOf('spreadsheetml') != -1)) {\r\n            icon = \"excel\";\r\n        } else if (type && _.indexOf(['image', 'video', 'audio'], type) != -1) {\r\n            icon = type;\r\n        } else if (type == \"text\") {\r\n            icon = \"txt\";\r\n        }\r\n        return icon;\r\n    },\r\n\r\n    deleteAttachment: function (attachmentID) {\r\n        var me = this;\r\n        var confirmMessage = {\r\n            title: (AppManager.getLabel(\"PP_TIT_CONFIRMATION\") || 'Confirmation'),\r\n            message: (AppManager.getLabel(\"PP_LBL_CONFIRMATION_DELETE_ATTACHMENT\") || 'Do you want to delete selected attachment?'),\r\n            cancelHandler: function () {\r\n                me.setState({confirmMessage: null});\r\n            },\r\n            okHandler: function () {\r\n                me.setState({confirmMessage: null});\r\n                PromotionActions.deleteAttachment(attachmentID);\r\n            }\r\n        };\r\n        this.setState({confirmMessage: confirmMessage});\r\n    },\r\n\r\n    openUploadModal: function () {\r\n        this.setState({uploading: true});\r\n    },\r\n\r\n    closeUploadModal: function () {\r\n        this.setState({uploading: false});\r\n    },\r\n\r\n    renderPreview: function () {\r\n        var attachment = this.state.selectedAttachment ? this.state.selectedAttachment : this.state.attachments[0];\r\n        var previewThumbnail = null;\r\n        if (attachment) {\r\n            if (attachment.previewUrl && (attachment.Type__c.indexOf('image') == 0 || attachment.Type__c.indexOf('video') == 0)) {\r\n                previewThumbnail = <a onClick={(event) => {event.preventDefault()}}\r\n                                      href={attachment.attachmentUrl}\r\n                                      className=\"ui-previewThumbnail\"\r\n                                      style={{backgroundImage: `url('${attachment.previewUrl}')`}}/>\r\n            } else {\r\n                previewThumbnail =\r\n                    <Icon style={{width: '150px', height: '150px'}} icon={this.getFileIcon(attachment)}\r\n                          category=\"doctype\"/>\r\n            }\r\n\r\n            return (\r\n                <div className=\"tile tile--responsive\">\r\n                    <div className=\"slds-grid slds-wrap\">\r\n                        <div className=\"slds-size--1-of-1 slds-medium-size--1-of-1 slds-large-size--1-of-3 tile-item__borderBottom\">\r\n                            {this.renderEditList()}\r\n                        </div>\r\n                        <div className=\"slds-grid slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs slds-col--no-padded slds-grid--vertical-align-center slds-grid--align-center\">\r\n                            {previewThumbnail}\r\n                        </div>\r\n                        <div className=\"ui-attachment-edit__description slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs\">\r\n                            <div className=\"slds-grid slds-p-bottom--medium\">\r\n                                <div className=\"slds-col--padded-right--small slds-size--1-of-2\">\r\n                                    <Input label={AppManager.getLabel(\"PP_LBL_NAME_ATTACHMENT\") || 'Name'}\r\n                                           disabled='true'\r\n                                           type='text'\r\n                                           placeholder={AppManager.getLabel(\"PP_LBL_NAME_ATTACHMENT\") || 'Name'}\r\n                                           onClick={(e) => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                                           value={attachment.Name}\r\n                                           readOnly=\"true\"/>\r\n                                </div>\r\n                                <div className=\"slds-col--padded-left--small slds-size--1-of-2\">\r\n                                    <Input label={AppManager.getLabel(\"PP_LBL_SIZE_ATTACHMENT\") || 'Size'}\r\n                                           disabled='true'\r\n                                           type='text'\r\n                                           placeholder={AppManager.getLabel(\"PP_LBL_SIZE_ATTACHMENT\") || 'Size'}\r\n                                           onClick={(e) => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                                           value={attachment.Size__c}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-p-bottom--medium\">\r\n                                <Input label={AppManager.getLabel(\"PP_LBL_DESCRIPTION_ATTACHMENT\") || 'Description'}\r\n                                       type='text'\r\n                                       placeholder={AppManager.getLabel(\"PP_LBL_DESCRIPTION_ATTACHMENT\") || 'Description'}\r\n                                       onClick={(e) => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                                       onChange={ (e, value) => {\r\n                                           attachment._model.setDescription_Language_1__c(value);\r\n                                           this.setState({});\r\n                                       } }\r\n                                       value={attachment.Description_Language_1__c}/>\r\n                            </div>\r\n                            <div className=\"slds-grid\">\r\n                                <div className=\"slds-col--padded-right--small slds-size--1-of-2\">\r\n                                    <Input\r\n                                        label={AppManager.getLabel(\"PP_LBL_CREATION_DATE_ATTACHMENT\") || 'Creation Date'}\r\n                                        type='text' disabled='true'\r\n                                        value={Utils.Converters.TS2Date(attachment.CreatedDate, 'YYYY-MM-DD')}/>\r\n                                </div>\r\n                                <div className=\"slds-col--padded-left--small slds-size--1-of-2\">\r\n                                    <Input\r\n                                        label={AppManager.getLabel(\"PP_LBL_LAST_UPDATE_DATE_ATTACHMENT\") || 'Last Update Date'}\r\n                                        type='text' disabled='true'\r\n                                        value={Utils.Converters.TS2Date(attachment.LastModifiedDate, 'YYYY-MM-DD')}/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return null;\r\n        }\r\n    },\r\n\r\n    renderEditList: function () {\r\n        return (\r\n            <ul className=\"ui-attachment-edit__fileList slds-has-dividers--bottom slds-scrollable--y\">\r\n                {this.state.attachments.map(file =>\r\n                    <li ref={li => li && file.active && li.scrollIntoViewIfNeeded ? li.scrollIntoViewIfNeeded() : null}\r\n                        onClick={() => this.selectAttachment(file)}\r\n                        className={`ui-attachment-edit__fileItems slds-item ${file.active ? \"is-Selected\" : \"\"}`}>\r\n                        <div className=\"slds-grid slds-p-around--x-small slds-grid--vertical-align-center\">\r\n                            <div className=\"slds-col slds-truncate\">\r\n                                <Icon icon={this.getFileIcon(file)} className=\"ui-icon__attachment\"\r\n                                      category=\"doctype\"/>\r\n                                <span className=\"slds-m-left--small\"> {file.Name} </span>\r\n                            </div>\r\n                            <div className=\"slds-col--bump-left\">\r\n                                <Icon icon='delete' className=\"ui-icon__attachment ui-icon__attachment--deleted\"\r\n                                      category=\"utility\"\r\n                                      onClick={() => this.deleteAttachment(file.Id)}/>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        )\r\n    },\r\n\r\n    renderEdit: function () {\r\n        return (\r\n            <div className=\"ui-attachments__edit\">\r\n                <div className={`ui-attachments__add-box slds-align--absolute-center ${this.state.onFileHoverClass ? \"is-Hover\" : \"\"}`}\r\n                    onDragOver={this.onFileHover} onDragLeave={this.onFileLeave} onDrop={this.onFileSelection}>\r\n                    {AppManager.getLabel(\"PP_LBL_DRAG_ATTACHMENTS\") || 'Drag attachments here or'}\r\n                    <a className=\"slds-m-left--x-small\">\r\n                        <div className=\"slds-file-selector slds-file-selector--files\">\r\n                            <input className=\"slds-file-selector__input slds-assistive-text\" accept=\"*/*\" type=\"file\"\r\n                                   id=\"file-upload-input-01\" aria-describedby=\"file-selector-id\"\r\n                                   onChange={this.onFileSelection}/>\r\n                            <label className=\"ui-file-selector__text slds-text-link\" htmlFor=\"file-upload-input-01\">\r\n                                {AppManager.getLabel(\"PP_LBL_UPLOAD_ATTACHMENTS\") || 'Upload Files'}\r\n                            </label>\r\n                        </div>\r\n                    </a>\r\n                </div>\r\n                {this.renderPreview()}\r\n                {(this.state.uploading) ?\r\n                    <UploadPopup title={AppManager.getLabel(\"PP_LBL_UPLOADING_ATTACHMENTS\") || 'Uploading...'}\r\n                                 onClose={() => this.closeUploadModal()}\r\n                                 file={this.state.newAttachment} fileIcon={this.getFileIcon(this.state.newAttachment)}/>\r\n                    :\r\n                    null}\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderView: function () {\r\n        var images = _.filter(this.state.attachments, (item) => item.Type__c.indexOf('image') != -1);\r\n        var videos = _.filter(this.state.attachments, (item) => item.Type__c.indexOf('video') != -1);\r\n        var files = _.difference(this.state.attachments, _.concat(images, videos));\r\n\r\n        return (\r\n            <div className=\"ui-attachments__view\">\r\n                { this.state.attachments.length ?\r\n                    <div className=\"slds-grid slds-wrap\">\r\n                        <div className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3\">\r\n                            <div className=\"ui-attachment__title slds-text-heading--small slds-m-bottom--small\">\r\n                                <Icon icon=\"image\"\r\n                                      category=\"utility\"/> {AppManager.getLabel(\"PP_LBL_IMAGES_ATTACHMENTS\") || 'Images'}\r\n                            </div>\r\n                            <div className=\"ui-attachment__list slds-grid slds-wrap\">\r\n                                {images.map((image, i) => {\r\n                                        return <a onClick={(event) => {\r\n                                            event.preventDefault()\r\n                                        }}\r\n                                                  href={image.attachmentUrl}\r\n                                                  className=\"ui-attachment__listItem slds-grid--vertical-align-center\">\r\n                                            {(image.previewUrl && image.previewUrl.length > 1) ?\r\n                                                <div onClick={() => this.renderOpenAttachment(image, i)}\r\n                                                     style={{backgroundImage: `url('${image.previewUrl}')`}}\r\n                                                     className=\"ui-attachment__listThumbnail\">\r\n                                                    <span className=\"ui-overlay\">\r\n                                                        <Icon icon='search' category='utility'/>\r\n                                                    </span>\r\n                                                </div>\r\n                                                :\r\n                                                //Show Icon as we don't have a thumbnail.\r\n                                                <div className=\"ui-attachment__listThumbnail\"\r\n                                                     onClick={() => this.renderOpenAttachment(image, i)}>\r\n                                                    <span>\r\n                                                      <Icon icon='photo' category='utility'/>\r\n                                                    </span>\r\n                                                    <span className=\"ui-overlay\">\r\n                                                        <Icon icon='search' category='utility'/>\r\n                                                    </span>\r\n                                                </div>\r\n                                            }\r\n                                        </a>\r\n                                    }\r\n                                )}\r\n                                { (images.length % 3 == 1 || images.length % 3 == 2) ?\r\n                                    <div className=\"slds-col--padded-right slds-size--1-of-3\"></div> : null }\r\n                                { (images.length % 3 == 1) ?\r\n                                    <div className=\"slds-col--padded-right slds-size--1-of-3\"></div> : null }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs\">\r\n                            <div className=\"ui-attachment__title slds-text-heading--small slds-m-bottom--small\">\r\n                                <Icon icon=\"video\"\r\n                                      category=\"utility\"/> {AppManager.getLabel(\"PP_LBL_VIDEOS_ATTACHMENTS\") || 'Videos'}\r\n                            </div>\r\n                            <ul className=\"slds-has-dividers--bottom\">\r\n                                {videos.map((video) =>\r\n                                    <li onClick={() => this.openAttachment(video)}\r\n                                        className=\"slds-grid slds-grid--vertical-align-center slds-m-bottom--small slds-p-bottom--x-small slds-item\">\r\n                                        <div className=\"ui-previewThumbnail-wrapper\">\r\n                                            {(video.previewUrl && video.previewUrl.length > 1) ?\r\n                                                <div className=\"ui-previewThumbnail ui-previewThumbnail--video\"\r\n                                                     style={{backgroundImage: `url('${video.previewUrl}')`}}/>\r\n                                                :\r\n                                                <Icon icon=\"video\" category=\"doctype\"\r\n                                                      className=\"slds-icon slds-icon-text-default ui-icon__attachment\"/>\r\n                                            }\r\n                                        </div>\r\n                                        <span className=\"slds-link slds-truncate\"> {video.Name} </span>\r\n                                    </li>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                        <div\r\n                            className=\"ui-attachment-file slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs slds-col--no-padded\">\r\n                            <div className=\"ui-attachment__title slds-text-heading--small slds-m-bottom--small\">\r\n                                <Icon icon=\"file\"\r\n                                      category=\"utility\"/> {AppManager.getLabel(\"PP_LBL_FILES_ATTACHMENTS\") || 'Files'}\r\n                            </div>\r\n                            <ul className=\"ui-attachment-file__list slds-has-dividers--bottom\">\r\n                                {files.map((file) =>\r\n                                    <li onClick={() => this.openAttachment(file)}\r\n                                        className=\"ui-attachment-file__listItem slds-grid slds-grid--vertical-align-center slds-m-bottom--small slds-p-bottom--x-small slds-item\">\r\n                                        <div className=\"ui-icon__wrapper\">\r\n                                            <Icon icon={this.getFileIcon(file)} category=\"doctype\"\r\n                                                  className=\"ui-icon__attachment\"/>\r\n                                        </div>\r\n                                        <span className=\"ui-attachment-file__listName slds-link slds-truncate\"> {file.Name} </span>\r\n                                    </li>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"slds-grid slds-wrap\">\r\n                        <div className=\"ui-attachments__edit-box slds-align--absolute-center\">\r\n                            {AppManager.getLabel(\"PP_LBL_NO_ATTACHMENTS_UPLOADED_1\") || 'No Attachments uploaded, yet. Switch to the'}\r\n                            <label className=\"ui-file-selector__text slds-p-left--xx-small slds-p-right--xx-small slds-text-link\"\r\n                                onClick={() => this.props.editToggle()}>{AppManager.getLabel(\"PP_LBL_EDIT_MODE_ATTACHMENTS\") || 'Edit Mode'}</label>{AppManager.getLabel(\"PP_LBL_NO_ATTACHMENTS_UPLOADED_2\") || 'to Upload some Files.'}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderSpinner: function () {\r\n        return (\r\n            <div className=\"ui-spinner_container\">\r\n                <div className=\"slds-spinner--brand slds-spinner slds-spinner--large\" aria-hidden=\"false\" role=\"alert\">\r\n                    <div className=\"slds-spinner__dot-a\"></div>\r\n                    <div className=\"slds-spinner__dot-b\"></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    },\r\n\r\n    render: function () {\r\n        var images = _.filter(this.state.attachments, (item) => item.Type__c.indexOf('image') != -1);\r\n\r\n        return (\r\n            <div className=\"tile tile--responsive slds-m-bottom--medium animated\">\r\n                <div className=\"title slds-grid\">\r\n                    <label>{AppManager.getLabel(\"PP_TIT_ATTACHMENTS\") || 'Attachments'}</label>\r\n                </div>\r\n                <div className=\"ui-attachments slds-grid slds-grid--vertical-align-center slds-grid--align-center\"\r\n                     key=\"attachments\">\r\n                    {\r\n                        this.props.promotion.loadPhase == 'preload' ? this.renderSpinner()\r\n                            :\r\n                            (this.props.editMode) ? this.renderEdit() : this.renderView()\r\n                    }\r\n                </div>\r\n                {(this.state.confirmMessage) ?\r\n                    <ConfirmPopup title={this.state.confirmMessage.title}\r\n                                  message={this.state.confirmMessage.message}\r\n                                  cancelHandler={this.state.confirmMessage.cancelHandler}\r\n                                  okHandler={this.state.confirmMessage.okHandler}/>\r\n                    : null}\r\n                {(this.state.modalOpen) ?\r\n                    <ImagePopup onClose={() => this.closeImagesModal()}\r\n                                images={images} selectedImage={this.state.selectedAttachment}\r\n                                selectedImageIndex={this.state.selectedAttachmentIndex}/> : null}\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/PromotionAttachments.jsx","\"use strict\";\r\n\r\nglobal._ = require('lodash');\r\n_.mixin({keyMirror: require('fbjs/lib/keyMirror')});\r\n\r\nglobal.PromotionActionConstants = _.keyMirror({\r\n    PROMOTION_LOAD: null,\r\n    PROMOTION_LOAD_GRID: null,\r\n    PROMOTION_SAVE: null,\r\n    PROMOTION_SAVE_AND_REFRESH: null,\r\n    PROMOTION_CANCEL: null,\r\n    PROMOTION_SET_FIELD: null,\r\n    TACTIC_SET_FIELD: null,\r\n    TACTIC_ADD: null,\r\n    TACTIC_DUPLICATE: null,\r\n    TACTIC_DELETE: null,\r\n    TACTIC_SELECTED: null,\r\n    APPLY_PRODUCT_FILTER: null,\r\n    SEARCH_FOR_PRODUCTS: null,\r\n    CLEAR_SEARCH_FOR_PRODUCTS: null,\r\n    ADD_PRODUCTS: null,\r\n    SEARCH_FOR_FUNDS: null,\r\n    ADD_FUNDS: null,\r\n    DELETE_FUNDS: null,\r\n    CHANGE_TACTIC_PRODUCT_RELATIONSHIP: null,\r\n    TOGGLE_TACTIC_PRODUCT_FILTER: null,\r\n    /*  Unilever Start */\r\n    // Workflow function\r\n    CHANGE_WF_STATE: null,\r\n    //CopyLift\r\n    COPY_PROMOTION_LIFT_TO_TACTICS: null,\r\n    //Attachments\r\n    UPLOAD_ATTACHMENT: null,\r\n    CANCEL_UPLOAD: null,\r\n    ATTACHMENT_DELETE: null,\r\n    //Child accounts\r\n    PUSH_CHILD_ACCOUNT: null,\r\n    FINALIZE_PUSH_CHILD_ACCOUNTS: null,\r\n    TOGGLE_CHILD_ACCOUNT: null,\r\n    TOGGLE_ALL_CHILD_ACCOUNTS: null,\r\n    UPDATE_ENABLE_PUSH: null,\r\n    //Tactic tiers\r\n    VALIDATE_TACTIC_TIERS: null,\r\n    //PMA - START CODE - 2017-01-12 - Copy date from Promotion to Tactic\r\n    COPY_PROMOTION_DATEFROM_TO_TACTICS: null,\r\n    COPY_PROMOTION_DATETHRU_TO_TACTICS: null,\r\n    COPY_PROMOTION_SHIPMENTDATEFROM_TO_TACTICS: null,\r\n    COPY_PROMOTION_SHIPMENTDATETHRU_TO_TACTICS: null,\r\n    COPY_PROMOTION_INSTOREDATEFROM_TO_TACTICS: null,\r\n    COPY_PROMOTION_INSTOREDATETHRU_TO_TACTICS: null,\r\n    //PMA - START CODE - 2017-01-12 - Copy date from Promotion to Tactic\r\n    //PMA - START CODE - 2017-01-13 - Threshold button\r\n    BTN_INVOKETHRESHOLD: null,\r\n    BTN_INVOKEAUDITTRAIL: null,\r\n    //PMA - END CODE - 2017-01-13 - Threshold button\r\n    VALIDATE_FUNDS: null\r\n});\r\n\r\nvar PromotionActions = {\r\n\r\n    load: function (payload) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PROMOTION_LOAD,\r\n            payload: payload\r\n        });\r\n    },\r\n\r\n    loadPromotionGrid: function (promotionId, Manual_Calculation_Input) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PROMOTION_LOAD_GRID,\r\n            payload: {Id: promotionId, Manual_Calculation_Input: Manual_Calculation_Input}\r\n        });\r\n    },\r\n\r\n    save: function (id) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PROMOTION_SAVE,\r\n            payload: {Id: id}\r\n        });\r\n    },\r\n\r\n    saveAndRefresh: function (id) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PROMOTION_SAVE_AND_REFRESH,\r\n            payload: {Id: id}\r\n        });\r\n    },\r\n\r\n    cancelEdit: function (id, context) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PROMOTION_CANCEL,\r\n            payload: {Id: id, Context: context}\r\n        });\r\n    },\r\n\r\n    setPromotionField: function (id, fieldName, fieldValue) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PROMOTION_SET_FIELD,\r\n            payload: {Id: id, fieldName: fieldName, fieldValue: fieldValue}\r\n        });\r\n    },\r\n\r\n    selectPromotion: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TACTIC_SELECTED,\r\n            payload: null\r\n        });\r\n    },\r\n\r\n    selectTactic: function (id) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TACTIC_SELECTED,\r\n            payload: {Id: id}\r\n        });\r\n    },\r\n\r\n    setTacticField: function (id, fieldName, fieldValue) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TACTIC_SET_FIELD,\r\n            payload: {Id: id, fieldName: fieldName, fieldValue: fieldValue}\r\n        });\r\n    },\r\n\r\n    addTactic: function (tacticTemplate) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TACTIC_ADD,\r\n            payload: tacticTemplate\r\n        });\r\n    },\r\n\r\n    duplicateTactic: function (tacticId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TACTIC_DUPLICATE,\r\n            payload: tacticId\r\n        });\r\n    },\r\n\r\n    deleteTactic: function (tacticId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TACTIC_DELETE,\r\n            payload: tacticId\r\n        });\r\n    },\r\n\r\n    applyProductFilter: function (tacticId, productFilter) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.APPLY_PRODUCT_FILTER,\r\n            payload: {tacticId: tacticId, productFilter: productFilter}\r\n        });\r\n    },\r\n\r\n    searchForProducts: function (productSample) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.SEARCH_FOR_PRODUCTS,\r\n            payload: productSample\r\n        });\r\n    },\r\n\r\n    clearSearchForProducts: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.CLEAR_SEARCH_FOR_PRODUCTS,\r\n            payload: null\r\n        });\r\n    },\r\n\r\n    addProducts: function (products, tacticID) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.ADD_PRODUCTS,\r\n            payload: {tacticId: tacticID, products: products}\r\n        });\r\n    },\r\n\r\n    changeTacticProductRelationship(productID, tacticID, relationship){\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.CHANGE_TACTIC_PRODUCT_RELATIONSHIP,\r\n            payload: {tacticId: tacticID, productId: productID, relationship: relationship}\r\n        });\r\n    },\r\n\r\n    toggleTacticProductFilter(filterID, filterValue, tacticObj, bselected){\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TOGGLE_TACTIC_PRODUCT_FILTER,\r\n            payload: {filterId: filterID, filterValueId: filterValue, tactic: tacticObj, selected: bselected}\r\n        });\r\n    },\r\n\r\n    searchForFunds: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.SEARCH_FOR_FUNDS,\r\n            payload: null\r\n        });\r\n    },\r\n\r\n    addFunds: function (funds, tacticID) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.ADD_FUNDS,\r\n            payload: {tacticId: tacticID, funds: funds}\r\n        });\r\n    },\r\n\r\n    deleteFunds: function (fundsId, tacticID) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.DELETE_FUNDS,\r\n            payload: {tacticId: tacticID, fundsId: fundsId}\r\n        });\r\n\r\n    },\r\n\r\n    validateFunds: function (funds, tacticID) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.VALIDATE_FUNDS,\r\n            payload: {tacticId: tacticID, funds: funds}\r\n        });\r\n    },\r\n\r\n    //Workflow Function call\r\n    changeWfState: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.CHANGE_WF_STATE,\r\n            payload: {wfstate: value}\r\n        });\r\n    },\r\n\r\n    //Copy Promotion Lift\r\n    copyLiftToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_LIFT_TO_TACTICS,\r\n            payload: {lift: value}\r\n        });\r\n    },\r\n\r\n    uploadAttachment: function (attachment, uploadId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.UPLOAD_ATTACHMENT,\r\n            payload: {attachment, uploadId}\r\n        });\r\n    },\r\n\r\n    cancelUpload: function (uploadId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.CANCEL_UPLOAD,\r\n            payload: {uploadId}\r\n        });\r\n    },\r\n\r\n    deleteAttachment: function (attachmentId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.ATTACHMENT_DELETE,\r\n            payload: attachmentId\r\n        });\r\n    },\r\n\r\n    pushChildAccount: function (uploadId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.PUSH_CHILD_ACCOUNT,\r\n            payload: {uploadId}\r\n        });\r\n    },\r\n\r\n    finalizePushChildAccounts: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.FINALIZE_PUSH_CHILD_ACCOUNTS,\r\n            payload: {promotionId}\r\n        });\r\n    },\r\n\r\n    toggleChildAccount: function (childAccountId, included) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TOGGLE_CHILD_ACCOUNT,\r\n            payload: {ChildAccountID: childAccountId, Included: included}\r\n        });\r\n    },\r\n\r\n    toggleAllChildAccounts: function (childAccounts, included) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.TOGGLE_ALL_CHILD_ACCOUNTS,\r\n            payload: {ChildAccounts: childAccounts, Included: included}\r\n        });\r\n    },\r\n\r\n    updateEnablePush: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.UPDATE_ENABLE_PUSH,\r\n            payload: {}\r\n        });\r\n    },\r\n\r\n    validateTacticTiers: function (tacticTiers, tacticId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.VALIDATE_TACTIC_TIERS,\r\n            payload: {TacticTiers: tacticTiers, TacticId: tacticId}\r\n        });\r\n    },\r\n\r\n    openPromotion: function (promotionId) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromCalendarActionConstants.OPEN_PROMOTION,\r\n            payload: promotionId\r\n        });\r\n    },\r\n\r\n    //PMA - START CODE - 2017-01-12 - Copy date from Promotion to Tactic\r\n    copyDateFromToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_DATEFROM_TO_TACTICS,\r\n            payload: {date: value}\r\n        });\r\n    },\r\n\r\n    copyDateThruToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_DATETHRU_TO_TACTICS,\r\n            payload: {date: value}\r\n        });\r\n    },\r\n\r\n    copyDeliveryDateFromToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_SHIPMENTDATEFROM_TO_TACTICS,\r\n            payload: {date: value}\r\n        });\r\n    },\r\n\r\n    copyDeliveryDateThruToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_SHIPMENTDATETHRU_TO_TACTICS,\r\n            payload: {date: value}\r\n        });\r\n    },\r\n\r\n    copyInstoreDateFromToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_INSTOREDATEFROM_TO_TACTICS,\r\n            payload: {date: value}\r\n        });\r\n    },\r\n\r\n    copyInstoreDateThruToTactics: function (value) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.COPY_PROMOTION_INSTOREDATETHRU_TO_TACTICS,\r\n            payload: {date: value}\r\n        });\r\n    },\r\n    //PMA - END CODE - 2017-01-12 - Copy date from Promotion to Tactic\r\n\r\n    //PMA - START CODE - 2017-01-13 - Threshold button\r\n    invokeThreshold: function (objectid, prmobj) {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.BTN_INVOKETHRESHOLD,\r\n            payload: {objectid: objectid, prmobj: prmobj}\r\n        });\r\n    },\r\n    //PMA - END CODE - 2017-01-13 - Threshold button\r\n \r\n    invokeAuditTrail: function () {\r\n        UI_EVENT_BUS.put(EVENTS.FLUX, {\r\n            actionType: PromotionActionConstants.BTN_INVOKEAUDITTRAIL,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n};\r\n\r\nmodule.exports.PromotionActions = PromotionActions;\r\nmodule.exports.PromotionActionConstants = PromotionActionConstants;\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/actions/PromotionActions.js","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Modal = require('react-lightning-design-system').Modal;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nconst {Header, Content, Footer} = Modal;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'ImagePopup',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            selectedImage: this.props.selectedImage,\r\n            selectedImageIndex: this.props.selectedImageIndex,\r\n            images: this.props.images\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        var images = this.state.images;\r\n        for (var i = 0, len = images.length; i < len; ++i) {\r\n            images[i].active = false;\r\n        }\r\n        images[this.state.selectedImageIndex].active = true;\r\n        this.setState({images: images});\r\n        document.body.classList.add('no-scroll');\r\n    },\r\n\r\n    componentWillReceiveProps: function (props) {\r\n        this.setState({selectedImage: props.selectedImage})\r\n    },\r\n\r\n    changeImage: function (image, index, event) {\r\n        var images = this.state.images;\r\n        event.preventDefault();\r\n        for (var i = 0, len = images.length; i < len; ++i) {\r\n            images[i].active = false;\r\n        }\r\n        images[index].active = true;\r\n        this.setState({selectedImage: image, images: images});\r\n    },\r\n\r\n    getWidthCarouselList: function () {\r\n        if (this.refs.carouselList) {\r\n            var carouselListItem = this.refs.carouselList,\r\n                nodes = carouselListItem.querySelectorAll('.ui-modal-carousel__listItem'),\r\n                carouselListWidth = 0;\r\n            for (var i = 0; nodes[i]; i++) {\r\n                carouselListWidth += nodes[i].clientWidth + 6;\r\n            }\r\n        }\r\n        return carouselListWidth;\r\n    },\r\n\r\n    closeModal: function () {\r\n        this.props.onClose();\r\n        document.body.classList.remove('no-scroll');\r\n    },\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal opened={true} onHide={() => this.closeModal()} className=\"ui-modal-carousel\">\r\n                    <Header title={this.state.selectedImage.Name} closeButton />\r\n                    <Content className=\"ui-modal-carousel__container\">\r\n                        <a onClick={(event) => {\r\n                                        event.preventDefault();\r\n                                }}\r\n                           href={this.state.selectedImage.attachmentUrl}\r\n                           className=\"ui-modal-carousel__picture slds-grid slds-grid--vertical-align-center\"\r\n                           style={{backgroundImage: `url('${this.state.selectedImage.attachmentUrl}')`}}>\r\n                        </a>\r\n                        <div className=\"ui-modal-carousel__content slds-scrollable--x\">\r\n                            <ul className=\"ui-modal-carousel__list\" ref=\"carouselList\"\r\n                                style={{'width': this.getWidthCarouselList()}}>\r\n                                {this.props.images.map((image, i) =>\r\n                                    <li ref={li => li && image.active && li.scrollIntoViewIfNeeded ? li.scrollIntoViewIfNeeded() : null}\r\n                                        className=\"ui-modal-carousel__listItem\">\r\n                                        <a onClick={(event) => this.changeImage(image, i, event)}\r\n                                             href={image.attachmentUrl}\r\n                                             style={(image.previewUrl && image.previewUrl.length > 1) ?\r\n                                                 {backgroundImage: `url('${image.previewUrl}')`} : {}\r\n                                             }\r\n                                             className={`ui-modal-carousel__thumbnail ${image.active ? \"is-Selected\" : \"\"}`}>\r\n                                            {(image.previewUrl && image.previewUrl.length > 1) ? null :\r\n                                                <Icon icon='photo' category='utility' />}\r\n                                        </a>\r\n                                    </li>\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                    </Content>\r\n                    <Footer className=\"slds-modal__footer--white\">\r\n                        <div className=\"slds-grid slds-wrap ui-modal-carousel__info\">\r\n                            <div className=\"slds-size--1-of-1 slds-p-bottom--x-small\">\r\n                                <p className=\"ui-modal-carousel__infoLabel slds-form-element__label\">{AppManager.getLabel('PP_LBL_IMAGE_DESCRIPTION') || 'Description'}</p>\r\n                                <div className=\"ui-modal-carousel__infoInput slds-truncate\">{this.state.selectedImage.Description_Language_1__c}</div>\r\n                            </div>\r\n                            <div className=\"slds-size--1-of-2 slds-col--padded-right--small\">\r\n                                <p className=\"ui-modal-carousel__infoLabel slds-form-element__label\">{AppManager.getLabel('PP_LBL_IMAGE_CREATION_DATE') || 'Creation Date'}</p>\r\n                                <div className=\"ui-modal-carousel__infoInput\">{Utils.Formatters.formatDate(this.state.selectedImage.CreatedDate)}</div>\r\n                            </div>\r\n                            <div className=\"slds-size--1-of-2 slds-col--padded-left--small\">\r\n                                <p className=\"ui-modal-carousel__infoLabel slds-form-element__label\">{AppManager.getLabel('PP_LBL_IMAGE_LAST_UPDATE') || 'Last Update'}</p>\r\n                                <div className=\"ui-modal-carousel__infoInput\">{Utils.Formatters.formatDate(this.state.selectedImage.LastModifiedDate)}</div>\r\n                            </div>\r\n                        </div>\r\n                    </Footer>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/ImagePopup.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Modal = require('react-lightning-design-system').Modal;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nvar {Header, Content} = Modal,\r\n    {UI_EVENT_BUS} = global;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'UploadPopup',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            progress: 0\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        var uploadId = Utils.guid();\r\n\r\n        this._subscription = UI_EVENT_BUS.subscribe(uploadId, progress => {\r\n            this.setState({\r\n                progress: (progress * 100).toFixed(3)\r\n            });\r\n            if (progress == 1) {\r\n                this.props.onClose();\r\n                document.body.classList.remove('no-scroll');\r\n            }\r\n        });\r\n\r\n        this._uploadId = uploadId;\r\n        PromotionActions.uploadAttachment(this.props.file, uploadId);\r\n        document.body.classList.add('no-scroll');\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        UI_EVENT_BUS.unsubscribe(this._subscription);\r\n    },\r\n\r\n    cancelUpload: function () {\r\n        PromotionActions.cancelUpload(this._uploadId);\r\n        this.props.onClose();\r\n        document.body.classList.remove('no-scroll');\r\n    },\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal opened={true} onHide={() => this.cancelUpload()} className=\"ui-uploadPopup\">\r\n                    <Header title={this.props.title} closeButton />\r\n                    <Content className=\"ui-uploadPopup__attachment slds-p-around--none\">\r\n                        <div className=\"ui-uploadPopup__attachmentInfo slds-grid--vertical-align-center slds-grid--vertical-align-start slds-truncate\">\r\n                            <span>\r\n                                <span className=\"ui-uploadPopup__attachmentIcon\">\r\n                                    <Icon icon={this.props.fileIcon} category=\"doctype\"/>\r\n                                </span>\r\n                                <span className=\"ui-uploadPopup__attachmentName\">{this.props.file.Name}</span>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"ui-progressBar\">\r\n                            <span className=\"ui-progressMeter\" style={{width: this.state.progress + '%'}}>\r\n                            </span>\r\n                        </div>\r\n                    </Content>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n});\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/UploadPopup.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Variant = require('../components/Variant.jsx');\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nmodule.exports = React.createClass({\r\n    getInitialState: function () {\r\n        return {\r\n            promotion: this.props.promotion,\r\n        };\r\n    },\r\n\r\n    componentWillReceiveProps: function (nextProps) {\r\n        if (nextProps.promotion != null) this.setState({promotion: nextProps.promotion});\r\n    },\r\n\r\n    onFieldChange: function (name, e, value) {\r\n        var obj = this.state.promotion;\r\n\r\n        this.props.update(obj.Id, name, value);\r\n\r\n        //Unilver changes for copy lift factor\r\n        if (name == \"UL_Lift__c\")\r\n            PromotionActions.copyLiftToTactics(value);\r\n\r\n        //PMA - START CODE - 2017-01-12 - Copy date from Promotion to Tactic\r\n        if (name == \"Date_From__c\") PromotionActions.copyDateFromToTactics(value);\r\n        if (name == \"Date_Thru__c\") PromotionActions.copyDateThruToTactics(value);\r\n        if (name == \"Delivery_Date_From__c\") PromotionActions.copyDeliveryDateFromToTactics(value);\r\n        if (name == \"Delivery_Date_Thru__c\") PromotionActions.copyDeliveryDateThruToTactics(value);\r\n        if (name == \"Placement_Date_From__c\") PromotionActions.copyInstoreDateFromToTactics(value);\r\n        if (name == \"Placement_Date_Thru__c\") PromotionActions.copyInstoreDateThruToTactics(value);\r\n        //PMA - END CODE - 2017-01-12 - Copy date from Promotion to Tactic\r\n    },\r\n\r\n    getContent: function () {\r\n        return this.state.promotion;\r\n    },\r\n\r\n    render: function () {\r\n        if (this.state.promotion == null) {\r\n            return (\r\n                <div style={{flex: '1 0 0'}}\r\n                     className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center\">\r\n                    <div>{AppManager.getLabel('PP_TIT_NOCONTENT') || 'NO CONTENT'}</div>\r\n                </div>)\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"tile\">\r\n                    <div className=\"slds-grid title\">{AppManager.getLabel('PP_LBL_MAIN_INFO') || 'Main Information'}</div>\r\n                    <div className=\"slds-m-top--medium\"/>\r\n                    <div className=\"slds-grid slds-wrap\">\r\n                        <div className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3\">\r\n                            {/* <div className=\"slds-form-element__label slds-form-element__label--title\">{AppManager.getLabel('PP_LBL_MAIN_INFO') || 'Main Information'}</div> */}\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <Variant object={this.state.promotion} field=\"Slogan__c\" onValueChange={this.onFieldChange}\r\n                                     editable={this.props.editMode }/>\r\n\r\n                            {this.state.promotion.Anchor_Account__c ?\r\n                                <div>\r\n                                    <div className=\"slds-m-top--medium\"/>\r\n                                    <Variant object={this.state.promotion} field=\"Anchor_Account__c\" editable={false }/>\r\n                                </div>\r\n                                : <div>\r\n                                    <div className=\"slds-m-top--medium\"/>\r\n                                    <Variant object={this.state.promotion} field=\"Anchor_Account_Set__c\"\r\n                                             editable={false }/>\r\n                                </div> }\r\n\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"Promotion_Template__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Lift__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Volume_Type__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Front_Margin__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left\">\r\n                            <div className=\"slds-form-element__label slds-form-element__label--title\">{AppManager.getLabel('PP_LBL_DATES') || 'Dates'}</div>\r\n                            \r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"Date_From__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"Date_Thru__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"Placement_Date_From__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"Placement_Date_Thru__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"Delivery_Date_From__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"Delivery_Date_Thru__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div\r\n                            className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs  slds-col--padded-left\">\r\n\r\n                            {AppManager.getLabel('PP_LBL_STATUS') || 'Status'}\r\n\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Current_Status__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"Phase__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_ThresholdViolated__c\"\r\n                                        onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"Active__c\"\r\n                                        onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.promotion} field=\"Parent_Promotion__c\"\r\n                                        onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"slds-m-top--large\">\r\n                        <Variant object={this.state.promotion} field=\"UL_Free_Text__c\"\r\n                                 onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                        <div className=\"slds-m-top--large\">\r\n                            <Variant object={this.state.promotion} field=\"UL_Delivery_Profile__c\"\r\n                                     onValueChange={this.onFieldChange}\r\n                                     editable={this.props.editMode }/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* UKI fields start */}\r\n                    <div className=\"slds-grid\">\r\n                        <div className=\"slds-m-top--large\">\r\n                        </div>\r\n                        <div\r\n                            className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs \">\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Mechanic__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Cannibalisation_Override__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-grid \">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.promotion} field=\"UL_Promotion_Type__c\"\r\n                                             onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div\r\n                            className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs slds-col--padded-right \">\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.promotion} field=\"UL_Sub_Mechanic__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.promotion} field=\"UL_Feature__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.promotion} field=\"UL_Account__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 \">\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.promotion} field=\"UL_Primary_Objective__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.promotion} field=\"UL_Post_Dip_End_Date__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.promotion} field=\"UL_Pre_Evaluation_Comment__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div\r\n                            className=\"slds-size--1-of-1 slds-medium-size--1-of-2 slds-large-size--1-of-3 slds-col--padded-left--xs\">\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <Variant object={this.state.promotion} field=\"UL_Secondary_Objective__c\"\r\n                                     onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            {/* PMA - START CODE - 2017-01-12 - New custom field */}\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <Variant object={this.state.promotion} field=\"UL_Cannibalisation_Rate__c\"\r\n                                     onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <Variant object={this.state.promotion} field=\"UL_Market__c\"\r\n                                     onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            {/* PMA - END CODE - 2017-01-12 - New custom field */}\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <Variant object={this.state.promotion} field=\"UL_Category__c\"\r\n                                     onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            <div className=\"slds-m-top--medium\"/>\r\n                            <Variant object={this.state.promotion} field=\"UL_Brand__c\"\r\n                                     onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                        </div>\r\n                    </div>\r\n                    {/* UKI fields end */}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n});\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/PromotionPlanningPromotionEdit.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar FieldSet = require('react-lightning-design-system').FieldSet;\r\nvar Row = require('react-lightning-design-system').Row;\r\nvar DateInput = require('react-lightning-design-system').DateInput;\r\nvar Picklist = require('react-lightning-design-system').Picklist;\r\nvar PicklistItem = require('react-lightning-design-system').PicklistItem;\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\n\r\nmodule.exports = React.createClass({\r\n    propTypes: {\r\n        object: React.PropTypes.object, // This must be the BO/LI associated\r\n        field: React.PropTypes.string, // The field associated\r\n        onValueChange: React.PropTypes.func,\r\n        editable: React.PropTypes.bool\r\n    },\r\n\r\n    isEditable: function () {\r\n        if (this.props.object._acl) {\r\n            if (this.props['editable'] !== undefined)\r\n                return this.props['editable'] && this.props.object._acl.isEditable(1, this.props.field);\r\n            else\r\n                return this.props.object._acl.isEditable(1, this.props.field);\r\n        }\r\n        else return true;\r\n    },\r\n\r\n    isVisible: function () {\r\n        if (this.props.object._acl) {\r\n            var acl = this.props.object._acl;\r\n            return acl.isVisible(1, this.props.field);\r\n        }\r\n        else return true;\r\n    },\r\n\r\n    render: function () {\r\n        var metadata = this.props.object._meta[this.props.field];\r\n        if (!this.isVisible())\r\n            return null;\r\n        else {\r\n            if (metadata.type.toLowerCase() == \"string\" || metadata.type.toLowerCase() == \"reference\") {\r\n                return (\r\n                    <Input\r\n                        label={metadata.label} disabled={!this.isEditable()}\r\n                        type='text' placeholder={metadata.label}\r\n                        onChange={ (e, value) => this.props.onValueChange(this.props.field, {}, value) }\r\n                        onClick={(e) => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                        value={this.props.object[this.props.field]}\r\n                        title={this.props.object[this.props.field]}\r\n                    />\r\n                )\r\n            }\r\n            else if (metadata.type.toLowerCase() == \"double\" || metadata.type.toLowerCase() == \"percent\") {\r\n                return (\r\n                    <Input\r\n                        label={metadata.label} disabled={!this.isEditable()}\r\n                        type='text' placeholder={metadata.label}\r\n                        onChange={ (e, value) => this.props.onValueChange(this.props.field, {}, value) }\r\n                        onClick={(e) => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                        onKeyPress={Utils.Validators.onlyKeyEventNumber}\r\n                        value={this.isEditable() ? this.props.object[this.props.field] : Utils.Formatters.formatNumber(this.props.object[this.props.field])}\r\n                    />\r\n                );\r\n            }\r\n\r\n            else if (metadata.type.toLowerCase() == \"date\") {\r\n                if (!this.isEditable()) {\r\n                    return (\r\n                        <Input className=\"variant-input-placeholder\"\r\n                               label={metadata.label}\r\n                               disabled={!this.isEditable()}\r\n                               type='text'\r\n                               placeholder={metadata.label}\r\n                               title={this.props.object[this.props.field]}\r\n                               value={Utils.Converters.TS2Date(this.props.object[this.props.field], AppSettings.get('dateFormat') || 'YYYY-MM-DD')}\r\n                        />\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <DateInput label={metadata.label}\r\n                                   placeholder={AppSettings.get('dateFormat')}\r\n                                   disabled={!this.isEditable()}\r\n                                   onValueChange={ (value) => this.props.onValueChange(this.props.field, {}, value) }\r\n                                   dateFormat={AppSettings.get('dateFormat')}\r\n                                   onClick={(e) => e.currentTarget.setSelectionRange(0, e.currentTarget.value.length)}\r\n                                   value={Utils.Converters.TS2Date(this.props.object[this.props.field], 'YYYY-MM-DD')}\r\n                        />\r\n                    );\r\n                }\r\n            }\r\n            else if (metadata.type.toLowerCase() == \"picklist\") {\r\n                if (this.isEditable()) {\r\n                    return (\r\n                        <Picklist label={metadata.label}\r\n                                  value={ this.props.object[this.props.field] }\r\n                                  onValueChange={ (value) => this.props.onValueChange(this.props.field, {}, value) }>\r\n                            { metadata.picklistValues.map((a, i) => {\r\n                                return <PicklistItem key={ i + 1 } value={a.value} label={a.label}/>;\r\n                            })}\r\n                        </Picklist>);\r\n                } else {\r\n                    return (\r\n                        <Input label={metadata.label} type='text' disabled=\"true\"\r\n                               value={ this.props.object[this.props.field]}/>\r\n\r\n                    );\r\n                }\r\n            }\r\n            else if (metadata.type.toLowerCase() == \"boolean\") {\r\n                return (\r\n                    <Checkbox disabled={!this.isEditable()}\r\n                              label={metadata.label} checked={this.props.object[this.props.field]}\r\n                              onChange={ () => this.props.onValueChange(this.props.field, {}, !this.props.object[this.props.field]) }/>\r\n                );\r\n            }\r\n            else {\r\n                return (<div> FIELD TYPE {metadata.type} NOT SUPPORTED </div>);\r\n            }\r\n        }\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Variant.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Modal = require('react-lightning-design-system').Modal;\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nvar ConfirmPopup = require('../components/ConfirmPopup');\r\n\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nvar {Header, Content} = Modal,\r\n    {UI_EVENT_BUS} = global;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'PromotionChildAccounts',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            confirmMessage: null,\r\n            pushed: 0,\r\n            total: _.filter(this.props.promotion.ChildAccounts, function(childAccount) {\r\n                return childAccount.Included;\r\n            }).length\r\n        };\r\n    },\r\n\r\n    componentWillReceiveProps: function (props) {\r\n        if (props.pushMode) {\r\n\r\n            var uploadId = Utils.guid();\r\n            if (this._subscription) UI_EVENT_BUS.unsubscribe(this._subscription);\r\n            this._subscription = UI_EVENT_BUS.subscribe(uploadId, ({total, done}) => {\r\n                this.setState({\r\n                    total: total,\r\n                    pushed: done\r\n                });\r\n                if (total == done) {\r\n                    this.cancelPush();\r\n                }\r\n            });\r\n            this._uploadId = uploadId;\r\n\r\n            PromotionActions.pushChildAccount(uploadId);\r\n            document.body.classList.add('no-scroll');\r\n        }\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        if (this.props.pushMode)\r\n            UI_EVENT_BUS.unsubscribe(this._subscription);\r\n    },\r\n\r\n    cancelPush: function () {\r\n        PromotionActions.cancelUpload(this._uploadId);\r\n        document.body.classList.remove('no-scroll');\r\n        this.props.pushModeEnd();\r\n        var confirmMessage = {\r\n            title: (AppManager.getLabel(\"PP_TIT_CONFIRMATION\") || 'Confirmation'),\r\n            message: (AppManager.getLabel(\"PP_LBL_PUSH_FINALIZED\") || 'Push child promotion accounts finalized'),\r\n            okHandler: () => {\r\n                this.setState({confirmMessage: null});\r\n                PromotionActions.finalizePushChildAccounts(this.props.promotion.Id);\r\n                PromotionActions.save(this.props.promotion.Id);\r\n            }\r\n        };\r\n        this.setState({confirmMessage: confirmMessage});\r\n    },\r\n\r\n    allChildAccountsIncluded: function () {\r\n        return _.every(this.props.promotion.ChildAccounts, {'Included': true});\r\n    },\r\n\r\n    toggleChildAccount: function (childAccount) {\r\n        PromotionActions.toggleChildAccount(childAccount.ChildAccountID, childAccount.Included);\r\n    },\r\n\r\n    toggleAllChildAccounts: function (Included) {\r\n        PromotionActions.toggleAllChildAccounts(this.props.promotion.ChildAccounts, Included);\r\n    },\r\n\r\n    renderProgressModal: function () {\r\n        var progress = (this.state.pushed * 100) / this.state.total;\r\n        return (\r\n            <Modal opened={true} onHide={() => this.cancelPush()} className=\"ui-pushModal\">\r\n                <Header title={AppManager.getLabel(\"PP_TIT_PUSH_PROMOTION\") || 'Push Promotion'} closeButton/>\r\n                <Content className=\"slds-p-around--none\">\r\n                    <div className=\"ui-pushModal__info slds-grid--vertical-align-center slds-grid--vertical-align-start slds-truncate\">\r\n                        {AppManager.getLabel(\"PP_LBL_PUSH_PROCESS_PROGRESS\") || 'Push process progress.'}\r\n                        &nbsp;{this.state.pushed} / {this.state.total}&nbsp;\r\n                        {AppManager.getLabel(\"PP_LBL_PROMOTIONS_DONE\") || 'Promotions done'}\r\n                    </div>\r\n                    <div className=\"ui-progressBar\">\r\n                        <span className=\"ui-progressMeter\" style={{width: progress + '%'}}>\r\n                        </span>\r\n                    </div>\r\n                </Content>\r\n            </Modal>\r\n        );\r\n    },\r\n\r\n    renderChildRow: function (childAccount, ix) {\r\n        return (\r\n            <tr key={\"ChildAccountRow_\" + ix}>\r\n                <td>\r\n                    <div className=\"slds-truncate\">\r\n                        <div className=\"slds-button-group\" role=\"group\">\r\n                            {!(this.props.editMode) ? ((childAccount.Included) ?\r\n                                    <Icon className=\"slds-m-right--medium\" category=\"standard\" fillColor=\"none\"\r\n                                          icon=\"task2\" size=\"x-medium\"/> : null) :\r\n                                <Checkbox checked={(childAccount.Included)}\r\n                                          onChange={(e) => this.toggleChildAccount(childAccount)}/>}\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{childAccount.ChildAccountName}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{childAccount.CustomerUnique}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">\r\n                        <span className=\"slds-text-link\"\r\n                              onClick={(e) => PromotionActions.openPromotion(childAccount.PushedPromoID)}>\r\n                            {childAccount.PushedPromoID}\r\n                        </span>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{childAccount.PromotionSlogan}</div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    },\r\n\r\n    scrollTable: function (e) {\r\n        var offset = - e.target.scrollLeft;\r\n        var headers = e.target.querySelectorAll('table thead th');\r\n\r\n        for (var i = 0; i < headers.length; i++) {\r\n            headers[i].querySelector('div').style.left = offset + 'px';\r\n            offset += headers[i].offsetWidth;\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        var titleCols = [\r\n            AppManager.getLabel('PP_LBL_INCLUDED'),\r\n            AppManager.getLabel('PP_TIT_ACCOUNT'),\r\n            AppManager.getLabel('PP_LBL_CUSTOMER_UNIQUE'),\r\n            AppManager.getLabel('PP_LBL_PROMOTION_ID'),\r\n            AppManager.getLabel('PP_TIT_PROMOTION_SLOGAN')\r\n        ];\r\n\r\n        return (\r\n            <div className=\"ui-child-accounts tile slds-m-top--medium\">\r\n                <div className=\"title slds-grid\">\r\n                    <label>{AppManager.getLabel(\"PP_TIT_CHILD_PROMOTION_ACCOUNTS\") || 'Child Promotion Accounts'}</label>\r\n                </div>\r\n                <div className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center\">\r\n                    <div className=\"table--fixed-header slds-m-vertical--large slds-m-top--large\">\r\n                        <section className={(this.props.editMode) ? 'editMode' : 'viewMode'}\r\n                                 onScroll={(event) => this.scrollTable(event)}>\r\n                            <table className=\"slds-table--bordered slds-table--cell-buffer\">\r\n                                <thead>\r\n                                <tr className=\"slds-text-heading--label\">\r\n                                    {titleCols.map((title, ix) =>\r\n                                        <th key={ix} scope=\"col\"\r\n                                            title={(this.props.editMode && ix == 0) ? AppManager.getLabel(\"PP_TIT_INCLUDE_EXCLUDE_ALL\") || 'Include/Exclude All': title}>\r\n                                            {title}\r\n                                            <div className=\"slds-truncate\">\r\n                                                {(this.props.editMode && ix == 0) ?\r\n                                                    <Checkbox checked={this.allChildAccountsIncluded()}\r\n                                                              onChange={(e) => this.toggleAllChildAccounts(this.allChildAccountsIncluded())}/> :\r\n                                                    title}\r\n                                            </div>\r\n                                        </th>)}\r\n                                </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                {this.props.promotion.ChildAccounts.map((childAccount, ix) => this.renderChildRow(childAccount, ix))}\r\n                                </tbody>\r\n                            </table>\r\n                        </section>\r\n                    </div>\r\n                </div>\r\n                {(this.state.confirmMessage) ?\r\n                    <div>\r\n                        <div aria-hidden=\"false\" aria-labelledby=\"prompt-heading-id\"\r\n                             aria-describedby=\"prompt-message-wrapper\"\r\n                             role=\"alertdialog\" className=\"slds-modal slds-modal--prompt slds-fade-in-open\">\r\n                            <div className=\"slds-modal__container slds-modal--prompt\" role=\"document\"\r\n                                 id=\"prompt-message-wrapper\" tabIndex=\"0\">\r\n                                <div className=\"slds-modal__header slds-theme--warning slds-theme--alert-texture\">\r\n                                    <h2 className=\"slds-text-heading--medium\"\r\n                                        id=\"prompt-heading-id\">{this.state.confirmMessage.title}</h2>\r\n                                </div>\r\n                                <div className=\"slds-modal__content slds-p-around--medium\">\r\n                                    <div><p>{this.state.confirmMessage.message}</p></div>\r\n                                </div>\r\n                                <div className=\"slds-modal__footer slds-theme--default\">\r\n                                    <button className=\"slds-button slds-button--neutral\"\r\n                                            onClick={() => this.state.confirmMessage.okHandler()}>\r\n                                        {AppManager.getLabel(\"PP_BTN_OK\") || 'Ok'}\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n                    </div>\r\n                    : null}\r\n                {(this.props.pushMode) ? this.renderProgressModal() : null}\r\n            </div>\r\n        )\r\n    },\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/PromotionChildAccounts.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Tile = require('../components/Tile');\r\nvar ReactCSSTransitionGroup = require('react-addons-css-transition-group');\r\n\r\nvar HorizontalChart = require('../components/HorizontalChart');\r\nvar TacticFunds = require('./TacticFunds');\r\nvar TacticTiers = require('./TacticTiers');\r\nvar PromotionPlanningTacticEdit = require('./PromotionPlanningTacticEdit');\r\n\r\nmodule.exports = new React.createClass({\r\n    displayName: 'TacticOverview',\r\n\r\n    propTypes: {\r\n        item: React.PropTypes.object, //Promotion details\r\n        editMode: React.PropTypes.bool //Flag for showing Edit window\r\n    },\r\n\r\n    render: function () {\r\n        return (<div className=\"slds-grid slds-wrap tile-area\">\r\n            <ReactCSSTransitionGroup component=\"div\"\r\n                                     className=\"slds-size--1-of-1\"\r\n                                     transitionName={{enter: \"animated\", enterActive: \"flipInX\", leave: \"animated\",leaveActive: \"flipOutX\"}}\r\n                                     transitionEnterTimeout={500} transitionLeaveTimeout={500}>\r\n\r\n                <PromotionPlanningTacticEdit ref='editPanel' tactic={this.props.item}\r\n                                             update={this.props.update} {...this.props}/>\r\n            </ReactCSSTransitionGroup>\r\n\r\n            <div className=\"slds-size--1-of-1 slds-col--padded-top\">\r\n                <ReactCSSTransitionGroup transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                         transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                         transitionLeaveTimeout={1500}>\r\n\r\n                    <Tile key='tile21' animated={true}>\r\n                        <TacticTiers item={this.props.item} editMode={this.props.editMode}/>\r\n                    </Tile>\r\n                </ReactCSSTransitionGroup>\r\n            </div>\r\n\r\n            <div className=\"slds-size--1-of-1 slds-col--padded-top\">\r\n                <ReactCSSTransitionGroup transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                         transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                         transitionLeaveTimeout={1500}>\r\n\r\n                    <Tile key='tile21' animated={true}>\r\n                        <TacticFunds {...this.props}/>\r\n                    </Tile>\r\n                </ReactCSSTransitionGroup>\r\n            </div>\r\n\r\n            <div className=\"slds-size--1-of-2 slds-col--padded-top\">\r\n                <ReactCSSTransitionGroup transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                         transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                         transitionLeaveTimeout={1500}>\r\n                    <Tile key='tile21' animated={true}>\r\n                        <HorizontalChart title={AppManager.getLabel('PP_TIT_CHART_ROI')||'ROI'}\r\n                                         formatter={Utils.Formatters.formatPct}\r\n                                         positiveKPI={true}\r\n                                         mainvalue={this.props.item.AggregatedKPIs.LROI}\r\n                                         planned={this.props.item.AggregatedKPIs.PROI}/>\r\n                    </Tile>\r\n                </ReactCSSTransitionGroup>\r\n            </div>\r\n\r\n            <div className=\"slds-size--1-of-2 slds-col--padded-left slds-col--padded-top\">\r\n                <ReactCSSTransitionGroup transitionName={{appear: \"zoomIn\"}} transitionAppear={true}\r\n                                         transitionAppearTimeout={1500} transitionEnterTimeout={1500}\r\n                                         transitionLeaveTimeout={1500}>\r\n                    <Tile key='tile31' animated={true}>\r\n                        <HorizontalChart title={AppManager.getLabel('PP_TIT_CHART_COSTS')||'COSTS'}\r\n                                         formatter={Utils.Formatters.formatCurrency}\r\n                                         positiveKPI={false}\r\n                                         mainvalue={this.props.item.AggregatedKPIs.LETP}\r\n                                         planned={this.props.item.AggregatedKPIs.PTPC}/>\r\n                    </Tile>\r\n                </ReactCSSTransitionGroup>\r\n            </div>\r\n        </div>)\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/TacticOverview.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar FundLookup = require('./FundLookup');\r\n\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'TacticFunds',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            editingFunds: false\r\n        }\r\n    },\r\n\r\n    componentWillReceiveProps: function (nextProps) {\r\n        if (nextProps.item.InvalidFunds) this.setState({editingFunds: true});\r\n        else this.setState({editingFunds: false});\r\n    },\r\n\r\n    componentWillMount: function () {\r\n        PromotionActions.searchForFunds();\r\n    },\r\n\r\n    openFundsLookup: function () {\r\n        this.setState({editingFunds: true});\r\n    },\r\n\r\n    onCancelFundsLookup: function () {\r\n        this.setState({editingFunds: false});\r\n    },\r\n\r\n    onApplyFundsLookup: function (funds) {\r\n        PromotionActions.validateFunds(funds, this.props.item.Id);\r\n    },\r\n\r\n    isVisible(attribute){\r\n        var acl = this.props.item._acl;\r\n        return acl.isVisible(1, attribute);\r\n    },\r\n\r\n    render: function () {\r\n        if (this.props.item == null) return null;\r\n\r\n        return (\r\n            <div>\r\n                {this.state.editingFunds ?\r\n                    <FundLookup applyHandler={this.onApplyFundsLookup} cancelHandler={this.onCancelFundsLookup}\r\n                                item={this.props.item}/> : null}\r\n                <div className=\"tactic-tile\">\r\n                    <div className=\"title slds-grid\">\r\n                        <label>Funds</label>\r\n                        {(this.props.editMode && this.isVisible(\"TACTIC_BTN_MANAGE_TIERS\")) ?\r\n                            <Button className=\"slds-container--right\" type='neutral' icon='custom_apps' iconAlign='left'\r\n                                    onClick={() => this.openFundsLookup()}>\r\n                                {AppManager.getLabel('PP_BTN_MANAGE_FUND') || 'Manage Funds'}\r\n                            </Button> : null}\r\n\r\n                    </div>\r\n                    {this.props.item.funds.length > 0 ?\r\n                        <div className=\"funds-grid slds-scrollable slds-m-vertical--medium\">\r\n                            {this.props.item.funds.map((fund, i) =>\r\n                                <div className=\"funds-props\" key={i}>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Fund Name</label>\r\n                                        <span>{fund.Name}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Description</label>\r\n                                        <span>{fund.Description__c}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Fund Type</label>\r\n                                        <span>{fund.Fund_Template_Description__c}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Available to Spend</label>\r\n                                        <span>{fund.Amount__c}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>% Allocated</label>\r\n                                        <span>{fund.Allocation__c}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Amount Allocated</label>\r\n                                        <span>{fund.Amount_Allocated__c}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Anchor Customer</label>\r\n                                        <span>{fund.Anchor_Customer__c}</span>\r\n                                    </div>\r\n                                    <div className=\"tactic-item\">\r\n                                        <label>Anchor Product</label>\r\n                                        <span>{fund.Anchor_Product__c}</span>\r\n                                    </div>\r\n                                </div>)}\r\n                        </div>\r\n                        :\r\n                        <div className=\"slds-m-vertical--medium\">\r\n                            <span>{AppManager.getLabel('PP_LBL_NO_FUNDS') || 'No Funds associated to this tactic'}</span>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/TacticFunds.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'FundLookup',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            funds: this.getFunds(this.props.item.availableFunds),\r\n            invalidFields: [],\r\n            focusIn: ''\r\n        }\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        this.setState({invalidFields: [], focusIn: ''});\r\n    },\r\n\r\n    componentDidUpdate: function () {\r\n        if (typeof(this.state.focusIn) != 'undefined' && this.state.focusIn !== '')\r\n            document.getElementsByClassName(this.state.focusIn)[0].focus();\r\n        else if (this.state.funds.length > 0 && this.state.invalidFields.length > 0)\r\n            document.getElementsByClassName(this.state.invalidFields[0])[0].focus();\r\n        this.state.focusIn = '';\r\n    },\r\n\r\n    getFunds: function (funds) {\r\n        var collection = [];\r\n        _.forEach(funds, (fund) => {\r\n            let selected = _.filter(fund.Tactics, (item) => item.tacticId == this.props.item.Id).length > 0;\r\n            collection.push({\r\n                Id: fund.Id,\r\n                Name: fund.Name,\r\n                Description__c: fund.Description__c,\r\n                Fund_Template_Description__c: fund.Fund_Template_Description__c,\r\n                Amount__c: fund.Amount__c,\r\n                Allocation__c: fund.Allocation__c,\r\n                Amount_Allocated__c: fund.Amount_Allocated__c,\r\n                Anchor_Customer__c: fund.Anchor_Customer__c,\r\n                Anchor_Product__c: fund.Anchor_Product__c,\r\n                selected: selected\r\n            });\r\n        });\r\n        return collection;\r\n    },\r\n\r\n    applyFundsLookup: function () {\r\n        if (!this.hasInvalidFields(false)) {\r\n            this.props.applyHandler(_.filter(this.state.funds, 'selected'));\r\n        }\r\n    },\r\n\r\n    cancelFundsLookup: function () {\r\n        this.props.cancelHandler();\r\n    },\r\n\r\n    toggleSelection: function (fund) {\r\n        fund.selected = !fund.selected;\r\n        fund.Allocation__c = fund.Allocation__c || 0;\r\n        fund.Amount_Allocated__c = fund.Amount_Allocated__c || 0.00;\r\n        this.forceUpdate();\r\n    },\r\n\r\n    fieldChange: function (fund, val) {\r\n        let calc = (parseInt(val) * parseFloat(fund.Amount__c)) / 100;\r\n        fund['Allocation__c'] = parseInt(val);\r\n        fund['Amount_Allocated__c'] = calc < 0 ? 0 : parseFloat(calc).toFixed(2);\r\n        this.hasInvalidFields(fund.Id);\r\n    },\r\n\r\n    isValidPercentage: function (n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n) && n > 0 && n <= 100;\r\n    },\r\n\r\n    hasInvalidFields: function (focusIn) {\r\n        var fields = [];\r\n        for (var i = 0; i < this.state.funds.length; i++) {\r\n            var fund = this.state.funds[i];\r\n            if (fund.selected && !this.isValidPercentage(fund.Allocation__c))\r\n                fields.push(fund.Id);\r\n        }\r\n        this.setState({invalidFields: fields, focusIn: focusIn ? focusIn : ((fields.length > 0) ? fields[0] : '')});\r\n        return fields.length > 0;\r\n    },\r\n\r\n    scrollTable: function (e) {\r\n        var offset = -e.target.scrollLeft;\r\n        var headers = e.target.querySelectorAll('table thead th');\r\n\r\n        for (var i = 0; i < headers.length; i++) {\r\n            headers[i].querySelector('div').style.left = offset + 'px';\r\n            offset += headers[i].offsetWidth;\r\n        }\r\n    },\r\n\r\n    renderFundRow: function (fund, ix) {\r\n        return (\r\n            <tr key={\"fund_\" + ix}>\r\n                <td>\r\n                    <Checkbox className=\"slds-text-align--lef\" onChange={() => this.toggleSelection(fund)}\r\n                              checked={fund.selected}/>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-text-align--left\">{fund.Name}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-text-align--left slds-truncate\">{fund.Description__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-text-align--left slds-truncate\">{fund.Fund_Template_Description__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-m-horizontal--small\">{fund.Amount__c}</div>\r\n                </td>\r\n                <td>\r\n                    {!fund.selected ?\r\n                        <div className=\"slds-m-horizontal--small\"></div>\r\n                        :\r\n                        <div className=\"slds-form-element\">\r\n                            <Input type='number' defaultValue={fund.Allocation__c} className={fund.Id}\r\n                                   onChange={(e, value) => this.fieldChange(fund, value)}\r\n                                   error={this.state.invalidFields.indexOf(fund.Id) != -1}\r\n                                   onClick={() => this.state.focusIn = fund.Id}\r\n                                   ref={i => i && i.scrollIntoViewIfNeeded ? i.scrollIntoViewIfNeeded() : null}/>\r\n                            <Icon icon='edit' size=\"x-small\" className=\"slds-icon--left\"/>\r\n                        </div>\r\n                    }\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-m-horizontal--small\">{fund.selected ? fund.Amount_Allocated__c : null}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-text-align--left\">{fund.Anchor_Customer__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-text-align--left\">{fund.Anchor_Product__c}</div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    },\r\n\r\n    renderFundSearchGrid: function () {\r\n        var titleCols = [\r\n            AppManager.getLabel('PP_LBL_SELECT') || 'Select',\r\n            'Fund Name',\r\n            'Description',\r\n            'Fund Type',\r\n            'Available to Spend',\r\n            '% Allocated',\r\n            'Amount Allocated',\r\n            'Anchor Customer',\r\n            'Anchor Product'\r\n        ];\r\n\r\n        return (\r\n            <div className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center funds-lookup\">\r\n                <div className=\"table--fixed-header slds-m-vertical--medium slds-m-top--medium\">\r\n                    <section onScroll={(event) => this.scrollTable(event)}>\r\n                        <table className=\"slds-table--bordered slds-table--cell-buffer\">\r\n                            <thead>\r\n                            <tr className=\"slds-text-heading--label\">\r\n                                {titleCols.map((title, ix) => <th key={ix} scope=\"col\" title={title}>\r\n                                    {title}\r\n                                    <div className=\"slds-truncate\">{title}</div>\r\n                                </th>)}\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody >\r\n                            { this.state.funds.map((fund, ix) => this.renderFundRow(fund, ix)) }\r\n                            </tbody>\r\n                        </table>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div>\r\n                <div className=\"slds-modal slds-fade-in-open\" aria-hidden=\"false\" role=\"dialog\">\r\n                    <div className=\"slds-modal__container\" style={{minWidth: '70rem'}}>\r\n                        <div className=\"slds-modal__header\">\r\n                            <h2 className=\"slds-text-heading--medium\">{AppManager.getLabel('PP_TIT_FUND_LOOKUP') || 'Fund Lookup'}</h2>\r\n                        </div>\r\n                        <div className=\"slds-modal__content\">\r\n                            {this.renderFundSearchGrid()}\r\n                        </div>\r\n                        <div className=\"slds-modal__footer\">\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={() => this.cancelFundsLookup()}>{AppManager.getLabel('PP_BTN_CANCEL') || 'Cancel'}</button>\r\n                            <button className=\"slds-button slds-button--neutral slds-button--brand\"\r\n                                    onClick={() => this.applyFundsLookup()}>{AppManager.getLabel('PP_BTN_APPLY_FUND') || 'Apply Fund'}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/FundLookup.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\nvar Button = require('react-lightning-design-system').Button;\r\n\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'TacticTiers',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            tacticTiers: this.getTacticTiers(this.props.item.TacticTiers),\r\n            managingTiers: false,\r\n            selectedTiers: [],\r\n            invalidFields: [],\r\n            focusIn: ''\r\n        };\r\n    },\r\n\r\n    componentWillReceiveProps: function (nextProps) {\r\n        if (nextProps.item.InvalidTacticTiers) this.setState({managingTiers: true});\r\n        else this.setState({managingTiers: false, selectedTiers: [], focusIn: ''});\r\n    },\r\n\r\n    componentDidUpdate: function () {\r\n        if (this.state.managingTiers && !this.state.tacticTiers.length > 0)\r\n            this.newTier();\r\n        else if (this.state.managingTiers && typeof(this.state.focusIn) != 'undefined' && this.state.focusIn !== '')\r\n            document.getElementsByClassName(this.state.focusIn)[0].focus();\r\n        else if (this.state.managingTiers && this.state.tacticTiers.length > 0 && this.state.invalidFields.length > 0)\r\n            document.getElementsByClassName(this.state.invalidFields[0])[0].focus();\r\n        this.state.focusIn = '';\r\n    },\r\n\r\n    getTacticTiers: function (tacticTiers) {\r\n        var collection = [];\r\n        _.forEach(tacticTiers, function (tacticTier) {\r\n            collection.push({\r\n                fromValue: tacticTier.fromValue,\r\n                toValue: tacticTier.toValue,\r\n                amount: tacticTier.amount\r\n            });\r\n        });\r\n        return collection;\r\n    },\r\n\r\n    manageTiers: function () {\r\n        this.setState({managingTiers: true});\r\n    },\r\n\r\n    fieldChange: function (tacticTier, name, value, ix) {\r\n        tacticTier[name] = value ? ((name == \"amount\") ? parseFloat(value) : parseInt(value)) : null;\r\n        this.hasInvalidFields(name + '_' + ix);\r\n    },\r\n\r\n    toggleSelection: function (ix) {\r\n        let tacticTierIndex = this.state.selectedTiers.indexOf(ix);\r\n        if (tacticTierIndex == -1)\r\n            this.state.selectedTiers.push(ix);\r\n        else\r\n            this.state.selectedTiers.splice(tacticTierIndex, 1);\r\n        this.forceUpdate();\r\n    },\r\n\r\n    deleteTiers: function () {\r\n        let me = this,\r\n            selectedTiers = _.sortBy(this.state.selectedTiers);\r\n        for (var i = this.state.tacticTiers.length; i--;) {\r\n            if (selectedTiers.indexOf(i) != -1) {\r\n                me.state.tacticTiers.splice(i, 1);\r\n            }\r\n        }\r\n        this.forceUpdate();\r\n        this.setState({selectedTiers: [], focusIn: ''});\r\n        if (this.state.tacticTiers.length == 0) {\r\n            this.newTier();\r\n        }\r\n        this.hasInvalidFields(false);\r\n    },\r\n\r\n    cancelTiers: function () {\r\n        this.setState({\r\n            tacticTiers: this.getTacticTiers(this.props.item.TacticTiers),\r\n            managingTiers: false,\r\n            selectedTiers: [],\r\n            invalidFields: [],\r\n            focusIn: ''\r\n        });\r\n    },\r\n\r\n    newTier: function () {\r\n        if (!this.hasInvalidFields(false)) {\r\n            let tacticTiers = this.state.tacticTiers,\r\n                lastToValue = tacticTiers.length > 0 ? _.last(tacticTiers).toValue : 0;\r\n            this.state.tacticTiers.push({\r\n                fromValue: lastToValue + 1,\r\n                toValue: null,\r\n                amount: null\r\n            });\r\n            this.forceUpdate();\r\n            this.setState({focusIn: 'toValue_' + (tacticTiers.length - 1)});\r\n        }\r\n    },\r\n\r\n    applyTiers: function () {\r\n        if (!this.hasInvalidFields(false)) {\r\n            PromotionActions.validateTacticTiers(this.state.tacticTiers, this.props.item.Id);\r\n        }\r\n    },\r\n\r\n    isNumber: function (n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    },\r\n\r\n    hasInvalidFields: function (focusIn) {\r\n        var fields = [];\r\n        for (var i = 0; i < this.state.tacticTiers.length; i++) {\r\n            var tacticTier = this.state.tacticTiers[i];\r\n            if (!this.isNumber(tacticTier.fromValue))\r\n                fields.push('fromValue_' + i);\r\n            if (!this.isNumber(tacticTier.toValue))\r\n                fields.push('toValue_' + i);\r\n            if (!this.isNumber(tacticTier.amount))\r\n                fields.push('amount_' + i);\r\n        }\r\n        this.setState({invalidFields: fields, focusIn: focusIn ? focusIn : ((fields.length > 0) ? fields[0] : '')});\r\n        return fields.length > 0;\r\n    },\r\n\r\n    scrollTable: function (e) {\r\n        var offset = -e.target.scrollLeft;\r\n        var headers = e.target.querySelectorAll('table thead th');\r\n\r\n        for (var i = 0; i < headers.length; i++) {\r\n            headers[i].querySelector('div').style.left = offset + 'px';\r\n            offset += headers[i].offsetWidth;\r\n        }\r\n    },\r\n    renderRow: function (tacticTier, ix) {\r\n        return (\r\n            <tr key={Utils.guid()} onClick={() => this.toggleSelection(ix)}\r\n                className={this.state.selectedTiers.indexOf(ix) != -1 ? 'selectedTacticTier' : ''}>\r\n                <td>\r\n                    <div className=\"slds-form-element\">\r\n                        <Input type='number' defaultValue={tacticTier.fromValue} className={\"fromValue_\" + ix}\r\n                               onChange={(e, value) => this.fieldChange(tacticTier, 'fromValue', value, ix)}\r\n                               error={this.state.invalidFields.indexOf(\"fromValue_\" + ix) != -1}\r\n                               onClick={() => this.state.focusIn = \"fromValue_\" + ix}\r\n                               ref={i => i && i.scrollIntoViewIfNeeded ? i.scrollIntoViewIfNeeded() : null}/>\r\n                        <Icon icon='edit' size=\"x-small\" className=\"slds-icon--left\"/>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-form-element\">\r\n                        <Input type='number' defaultValue={tacticTier.toValue} className={\"toValue_\" + ix}\r\n                               onChange={(e, value) => this.fieldChange(tacticTier, 'toValue', value, ix)}\r\n                               error={this.state.invalidFields.indexOf(\"toValue_\" + ix) != -1}\r\n                               onClick={() => this.state.focusIn = \"toValue_\" + ix}\r\n                               ref={i => i && i.scrollIntoViewIfNeeded ? i.scrollIntoViewIfNeeded() : null}/>\r\n                        <Icon icon='edit' size=\"x-small\" className=\"slds-icon--left\"/>\r\n                    </div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-form-element\">\r\n                        <Input type='number' defaultValue={tacticTier.amount} className={\"amount_\" + ix}\r\n                               onChange={(e, value) => this.fieldChange(tacticTier, 'amount', value, ix)}\r\n                               error={this.state.invalidFields.indexOf(\"amount_\" + ix) != -1}\r\n                               onClick={() => this.state.focusIn = \"amount_\" + ix}\r\n                               ref={i => i && i.scrollIntoViewIfNeeded ? i.scrollIntoViewIfNeeded() : null}/>\r\n                        <Icon icon='edit' size=\"x-small\" className=\"slds-icon--left\"/>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    },\r\n\r\n    renderEditDialog: function () {\r\n        var titleCols = [\r\n            AppManager.getLabel('PP_TIT_VOLUME_MIN') || 'Volume Min',\r\n            AppManager.getLabel('PP_TIT_VOLUME_MAX') || 'Volume Max',\r\n            AppManager.getLabel('PP_TIT_AMOUNT') || 'Amount'\r\n        ];\r\n\r\n        return (\r\n            <div ref=\"TacticTiersEditDialog\">\r\n                <div className=\"slds-modal slds-fade-in-open\" aria-hidden=\"false\" role=\"dialog\">\r\n                    <div className=\"slds-modal__container\" style={{minWidth: '50rem'}}>\r\n                        <div className=\"slds-modal__header\">\r\n                            <h2 className=\"slds-text-heading--medium\">{AppManager.getLabel('PP_TIT_TIERED_INFORMATION') || 'Tiered Information'}</h2>\r\n                        </div>\r\n                        <div className=\"slds-modal__content slds-p-around--medium\">\r\n                            <div>\r\n                                <div className=\"slds-grid slds-grid--vertical-align-center\">\r\n                                    <div className='slds-col--bump-right'/>\r\n                                    <button className=\"slds-button slds-float--right slds-button--neutral\"\r\n                                            disabled={this.state.invalidFields.length > 0}\r\n                                            onClick={() => this.newTier()}>\r\n                                        {AppManager.getLabel('PP_BTN_NEW') || 'New'}\r\n                                    </button>\r\n                                    <button className=\"slds-button slds-float--right slds-button--neutral\"\r\n                                            onClick={() => this.deleteTiers()}>\r\n                                        {AppManager.getLabel('PP_BTN_DELETE') || 'Delete'}\r\n                                    </button>\r\n                                </div>\r\n                                <div className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center\">\r\n                                    <div className=\"table--fixed-header slds-m-vertical--medium slds-m-top--medium\">\r\n                                        <section className=\"editMode\" onScroll={(event) => this.scrollTable(event)}>\r\n                                            <table className=\"slds-table--bordered slds-table--cell-buffer\">\r\n                                                <thead>\r\n                                                <tr className=\"slds-text-heading--label\">\r\n                                                    {titleCols.map((title, ix) =>\r\n                                                        <th key={ix} scope=\"col\" title={title}>\r\n                                                            {title}\r\n                                                            <div className=\"slds-truncate\">{title}</div>\r\n                                                        </th>)}\r\n                                                </tr>\r\n                                                </thead>\r\n                                                <tbody>\r\n                                                {this.state.tacticTiers.map((tacticTier, ix) => this.renderRow(tacticTier, ix))}\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </section>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-modal__footer\">\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={() => this.cancelTiers()}>\r\n                                {AppManager.getLabel('PP_BTN_CANCEL') || 'Cancel'}\r\n                            </button>\r\n                            <button className=\"slds-button slds-button--neutral slds-button--brand\"\r\n                                    disabled={this.state.invalidFields.length > 0} onClick={() => this.applyTiers()}>\r\n                                {AppManager.getLabel('PP_BTN_APPLY_TIERS') || 'Apply Tiers'}\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n            </div>\r\n        );\r\n    },\r\n\r\n    isVisible(attribute){\r\n        var acl = this.props.item._acl;\r\n        return acl.isVisible(1, attribute);\r\n    },\r\n\r\n    render: function () {\r\n        var titleCols = [\r\n            AppManager.getLabel('PP_TIT_VOLUME_MIN') || 'Volume Min',\r\n            AppManager.getLabel('PP_TIT_VOLUME_MAX') || 'Volume Max',\r\n            AppManager.getLabel('PP_TIT_AMOUNT') || 'Amount'\r\n        ];\r\n\r\n        return (\r\n            <div className=\"ui-tactic-tiers\">\r\n                <div className=\"title slds-grid\">\r\n                    <label>{AppManager.getLabel(\"PP_TIT_TIERED_INFORMATION\") || 'Tiered Information'}</label>\r\n                    {(this.props.editMode && this.isVisible(\"TACTIC_BTN_MANAGE_TIERS\")) ?\r\n                        <div className=\"slds-container--right\">\r\n                            <Button type='neutral' icon='custom_apps' iconAlign='left'\r\n                                    onClick={() => this.manageTiers()}>\r\n                                {AppManager.getLabel('PP_BTN_MANAGE_TIERS') || 'Manage Tiers'}\r\n                            </Button>\r\n                        </div>\r\n                        : null }\r\n                </div>\r\n                {this.props.item.TacticTiers.length > 0 ?\r\n                    <div className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center\">\r\n                        <div className=\"table--fixed-header slds-m-vertical--medium slds-m-top--medium\">\r\n                            <section className=\"viewMode\" onScroll={(event) => this.scrollTable(event)}>\r\n                                <table className=\"slds-table--bordered slds-table--cell-buffer\">\r\n                                    <thead>\r\n                                    <tr className=\"slds-text-heading--label\">\r\n                                        {titleCols.map((title, ix) =>\r\n                                            <th key={ix} scope=\"col\" title={title}>\r\n                                                {title}\r\n                                                <div className=\"slds-truncate\">{title}</div>\r\n                                            </th>)}\r\n                                    </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                    {this.props.item.TacticTiers.map((tacticTier, ix) => {\r\n                                        return (\r\n                                            <tr key={\"TacticTier_\" + ix}>\r\n                                                <td>\r\n                                                    <div className=\"slds-truncate\">{tacticTier.fromValue}</div>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <div className=\"slds-truncate\">{tacticTier.toValue}</div>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <div className=\"slds-truncate\">{tacticTier.amount}</div>\r\n                                                </td>\r\n                                            </tr>\r\n                                        );\r\n                                    })}\r\n                                    </tbody>\r\n                                </table>\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div className=\"slds-m-vertical--medium\">\r\n                        <span>{AppManager.getLabel('PP_LBL_NO_TIERS') || 'No Tiers associated to this tactic'}</span>\r\n                    </div>\r\n                }\r\n                {(this.state.managingTiers) ? this.renderEditDialog() : null}\r\n            </div>\r\n        )\r\n    },\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/TacticTiers.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Input = require('react-lightning-design-system').Input;\r\nvar FieldSet = require('react-lightning-design-system').FieldSet;\r\nvar Row = require('react-lightning-design-system').Row;\r\nvar DateInput = require('react-lightning-design-system').DateInput;\r\nvar Picklist = require('react-lightning-design-system').Picklist;\r\nvar PicklistItem = require('react-lightning-design-system').PicklistItem;\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\n\r\nvar ProductGrid = require('./ProductGrid');\r\nvar ProductFilter = require('./ProductFilter');\r\nvar ProductLookup = require('./ProductLookup');\r\nvar ConfirmPopup = require('../components/ConfirmPopup');\r\n\r\nvar Variant = require('../components/Variant.jsx');\r\n\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nmodule.exports = React.createClass({\r\n    getInitialState: function () {\r\n        return {\r\n            tactic: this.props.tactic,\r\n            confirmMessage: null,\r\n            showManageProducts: false\r\n        };\r\n    },\r\n\r\n    componentWillReceiveProps: function (nextProps) {\r\n        if (nextProps.tactic != null) this.setState({tactic: nextProps.tactic});\r\n    },\r\n\r\n    onFieldChange: function (name, e, value) {\r\n        var obj = this.state.tactic;\r\n        this.props.update(obj.Id, name, value);\r\n    },\r\n\r\n    getContent: function () {\r\n        return this.state.tactic;\r\n    },\r\n\r\n    manageProducts: function () {\r\n        this.setState({showManageProducts: !this.state.showManageProducts});\r\n    },\r\n\r\n    openAddProducts: function () {\r\n        this.setState({addingProduct: true});\r\n    },\r\n\r\n    searchForProducts: function (productSample) {\r\n        PromotionActions.searchForProducts(productSample);\r\n    },\r\n\r\n    cancelAddProducts: function () {\r\n        this.setState({addingProduct: false});\r\n    },\r\n\r\n    addProducts: function (products) {\r\n        this.setState({addingProduct: false});\r\n        PromotionActions.addProducts(products, this.props.tactic.Id);\r\n    },\r\n\r\n    applyFilterProducts: function () {\r\n        PromotionActions.applyProductFilter(this.props.tactic.Id, this.refs.prodFilter.getFilterState());\r\n    },\r\n\r\n    toggleProduct: function (product) {\r\n        var me = this;\r\n        var confirmMessage = {\r\n            title: (AppManager.getLabel('PP_TIT_CONFIRMATION') || 'Confirmation'),\r\n            message: (AppManager.getLabel('PP_LBL_CONFIRMATION_EXCLUDE_PRODUCT') || 'Do you want to exclude the product?'),\r\n            cancelHandler: function () {\r\n                me.setState({confirmMessage: null});\r\n            },\r\n            okHandler: function () {\r\n                //TODO\r\n                me.setState({confirmMessage: null});\r\n                PromotionActions.changeTacticProductRelationship(product.Id, me.props.tactic.Id, product.relationship)\r\n            }\r\n        };\r\n\r\n        if (product.relationship == 'MATCH') {\r\n            //confirmMessage.message='Do you want to exclude the product?'\r\n            PromotionActions.changeTacticProductRelationship(product.Id, me.props.tactic.Id, product.relationship)\r\n        }\r\n        else if (product.relationship == 'EXCLUDED') {\r\n            confirmMessage.message = 'Do you want to remove the exclusion for the product?';\r\n            PromotionActions.changeTacticProductRelationship(product.Id, me.props.tactic.Id, product.relationship)\r\n        }\r\n        else if (product.relationship == 'INCLUDED') {\r\n            confirmMessage.message = 'Do you want to remove the manually included product?';\r\n            this.setState({confirmMessage: confirmMessage})\r\n        }\r\n    },\r\n\r\n    renderManageProducts: function () {\r\n        return (\r\n            <div>\r\n                <ProductFilter ref=\"prodFilter\" tactic={this.state.tactic} {...this.props}/>\r\n\r\n                <section className=\"slds-clearfix slds-m-top--small\">\r\n                    <div className=\"slds-float--right\">\r\n                        <Button type='neutral'\r\n                                onClick={() =>this.openAddProducts()}>{AppManager.getLabel('PP_BTN_ADD') || 'Add'}</Button>\r\n                        <Button type='neutral'\r\n                                onClick={() =>this.applyFilterProducts()}>{AppManager.getLabel('PP_BTN_APPLY_FILTER') || 'Apply Filter'}</Button>\r\n                    </div>\r\n                </section>\r\n                {(this.state.confirmMessage) ?\r\n                    <ConfirmPopup title={this.state.confirmMessage.title} message={this.state.confirmMessage.message}\r\n                                  cancelHandler={this.state.confirmMessage.cancelHandler}\r\n                                  okHandler={this.state.confirmMessage.okHandler}/> : null}\r\n                <ProductGrid tactic={this.state.tactic} {...this.props} toggleHandler={this.toggleProduct}/>\r\n                {(this.state.addingProduct) ?\r\n                    <ProductLookup addHandler={this.addProducts} cancelHandler={this.cancelAddProducts}\r\n                                   searchHandler={this.searchForProducts} {...this.props}/> : null}\r\n            </div>\r\n        );\r\n    },\r\n\r\n    isEditable(attribute){\r\n        var acl = this.state.tactic._acl;\r\n        return this.props.editMode && acl.isEditable(0, \"Tactic__c\") && acl.isEditable(1, attribute);\r\n    },\r\n\r\n    isVisible(attribute){\r\n        var acl = this.state.tactic._acl;\r\n        return acl.isVisible(1, attribute);\r\n    },\r\n\r\n    render: function () {\r\n        var tacticData = this.state.tactic;\r\n        var metadata = tacticData._meta;\r\n        var acl = this.state.tactic._acl;\r\n\r\n        return (\r\n            <div className=\"tile\">\r\n                <div className=\" title slds-grid\">{AppManager.getLabel('PP_TIT_TACTIC_INFO') || 'Tactic Information'}</div>\r\n                <div className=\"slds-m-top--medium\"/>\r\n                <div className=\"slds-grid \">\r\n                    <div className=\"slds-col--padded-right slds-size--1-of-3\">\r\n                        <Variant object={this.state.tactic} field=\"Tactic_Template__c\" editable={false}/>\r\n                        <div className=\"slds-m-top--medium\"/>\r\n                        <Variant object={this.state.tactic} field=\"Amount__c\" onValueChange={this.onFieldChange}\r\n                                 editable={this.props.editMode }/>\r\n\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.tactic} field=\"UL_Off_On_Invoice__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-col\">\r\n                                <Variant object={this.state.tactic} field=\"UL_Take_Up_Rate__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.tactic} field=\"UL_Redemption__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"slds-col--padded slds-size--1-of-3\">\r\n                        <div className=\"slds-grid \">\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.tactic} field=\"Lift__c\" onValueChange={this.onFieldChange}\r\n                                         editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-col\">\r\n                                <Variant object={this.state.tactic} field=\"Pct_of_Stores__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.tactic} field=\"Date_From__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-col\">\r\n                                <Variant object={this.state.tactic} field=\"Date_Thru__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* soco start */}\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.tactic} field=\"Instore_Date_From__c\"   onValueChange={this.onFieldChange}  editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.tactic} field=\"Instore_Date_Thru__c\"   onValueChange={this.onFieldChange}  editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.tactic} field=\"Shipment_Date_From__c\"   onValueChange={this.onFieldChange}  editable={this.props.editMode }/>\r\n                                </div>\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.tactic} field=\"Shipment_Date_Thru__c\"   onValueChange={this.onFieldChange}  editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>        \r\n                        {/*}\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                                <div className=\"slds-col--padded-right\">\r\n                                    <Variant object={this.state.tactic} field=\"UL_Order_Date_From__c\"   onValueChange={this.onFieldChange}  editable={this.props.editMode }/>\r\n                                </div>\r\n\r\n\r\n                                <div className=\"slds-col\">\r\n                                    <Variant object={this.state.tactic} field=\"UL_Order_Date_Thru__c\"   onValueChange={this.onFieldChange}  editable={this.props.editMode }/>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        */}\r\n                        {/* soco end */}\r\n\r\n                    </div>\r\n                    <div className=\"slds-col--padded slds-size--1-of-3\">\r\n                        <Variant object={this.state.tactic} field=\"Compensation_Model__c\"\r\n                                 onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                        <div className=\"slds-m-top--medium\"/>\r\n                        {/* PMA - START CODE - 2017-01-12 - New custom field */}\r\n                        <Variant object={this.state.tactic} field=\"Payment_Method__c\" onValueChange={this.onFieldChange}\r\n                                 editable={this.props.editMode }/>\r\n                        {/* PMA - END CODE - 2017-01-12 - New custom field */}\r\n\r\n                        <div className=\"slds-grid slds-m-top--medium\">\r\n                            <div className=\"slds-col--padded-right\">\r\n                                <Variant object={this.state.tactic} field=\"UL_Condition_Type__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                            <div className=\"slds-col\">\r\n                                <Variant object={this.state.tactic} field=\"UL_Investment_Method__c\"\r\n                                         onValueChange={this.onFieldChange} editable={this.props.editMode }/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-m-top--medium\"></div>\r\n                {(this.props.editMode && this.isVisible(\"TACTIC_BTN_MANAGE_PRODS\")) ?\r\n                <div className=\"slds-grid\">\r\n                        <Button type='neutral' icon='custom_apps' iconAlign='left'\r\n                                onClick={() => this.manageProducts()}>{AppManager.getLabel('PP_BTN_MANAGE_PRODS') || 'Manage Products'}</Button>\r\n                </div>\r\n                : null}\r\n\r\n                {this.props.editMode && this.state.showManageProducts ?\r\n                    <div className=\"slds-m-top--medium\">{this.renderManageProducts()}</div> : null}\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/PromotionPlanningTacticEdit.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'ProductGrid',\r\n\r\n    getInitialState: function () {\r\n        var itemsToAdd = 50;\r\n        return {\r\n            items: [],\r\n            itemsToAdd: itemsToAdd\r\n        };\r\n    },\r\n\r\n    componentWillMount: function () {\r\n        //this._loadItems();\r\n    },\r\n\r\n    renderProductRow: function (product, ix) {\r\n        var icon = 'task2';\r\n        var textColor = 'default';\r\n        if (product.relationship == 'INCLUDED') {\r\n            icon = 'task';\r\n        }\r\n        if (product.relationship == 'EXCLUDED') {\r\n            icon = 'unmatched';\r\n            textColor = 'error'\r\n        }\r\n        if (product.relationship == 'DELETED') {\r\n            return null;\r\n        }\r\n        return (\r\n            <tr key={\"productGrid\" + ix}>\r\n                <td>\r\n                    <Icon onClick={()=>this.props.toggleHandler(product)} category=\"standard\" fillColor=\"none\"\r\n                          textColor={textColor} icon={icon} size=\"x-medium\" className=\"slds-m-right--medium\"/>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Name}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Description_1}</div>\r\n                </td>\r\n\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Pack_Size}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Pack_Size_Unit}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Container_Size}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Container_Size_Unit}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Product_Form}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Container_Type}</div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    },\r\n\r\n    _loadItems: function () {\r\n        var me = this;\r\n        var length = me.state.items.length + me.state.itemsToAdd;\r\n        var list = me.state.items;\r\n\r\n        for (var i = list.length; i < length; i++) {\r\n            if (i < me.props.productFilters.products.length) {\r\n                list.push(me.renderProductRow(me.props.productFilters.products[i], i));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        me.setState({items: list});\r\n    },\r\n\r\n    scrollTable: function (e) {\r\n        var offset = - e.target.scrollLeft;\r\n        var headers = e.target.querySelectorAll('table thead th');\r\n\r\n        for (var i = 0; i < headers.length; i++) {\r\n            headers[i].querySelector('div').style.left = offset + 'px';\r\n            offset += headers[i].offsetWidth;\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        var me = this;\r\n        var productMeta = this.props.productFilters.productMetadata;\r\n        //var titleCols=['Select','Description','Brand','Pack Size', 'Pack Size Unit','Container Size', 'Container Size Unit','Category','Container Type']\r\n        var titleCols = [AppManager.getLabel('PP_LBL_INCLUDED'), productMeta.Name.label, productMeta.Description_1__c.label, productMeta.Pack_Size__c.label,\r\n            productMeta.Pack_Size_Unit__c.label, productMeta.Container_Size__c.label, productMeta.Container_Size_Unit__c.label, productMeta.Product_Form__c.label,\r\n            productMeta.Container_Type__c.label];\r\n\r\n        return (\r\n            <div className=\"table-wrapper\"> \r\n              <div className=\"slds-grid slds-scrollable--x\">\r\n                <div className=\"table--fixed-header slds-m-vertical--large slds-m-top--large\">\r\n                    <section onScroll={(event) => this.scrollTable(event)}>\r\n                        <table className=\"slds-table--bordered slds-table--cell-buffer\">\r\n                            <thead>\r\n                            <tr className=\"slds-text-heading--label\">\r\n                                {titleCols.map((title, ix)=> <th key={ix} scope=\"col\" title={title}>\r\n                                    {title}\r\n                                    <div className=\"slds-truncate\">{title}</div>\r\n                                </th>)}\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {me.props.productFilters.products.map((product, ix) => me.renderProductRow(product, ix))}\r\n                            {this.state.items}\r\n                            </tbody>\r\n                        </table>\r\n                    </section>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/ProductGrid.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\nvar PromotionActions = require('../../actions/PromotionActions').PromotionActions;\r\n\r\nmodule.exports = React.createClass({\r\n\r\n    displayName: 'ProductFilter',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            productFilters: this.props.productFilters.filters,\r\n        };\r\n    },\r\n\r\n    componentWillReceiveProps: function (props) {\r\n        this.setState({productFilters: props.productFilters.filters})\r\n    },\r\n\r\n    toggleFilterValue: function (category, value) {\r\n        //TODO SEND EVENT\r\n        //var productFilters = this.state.productFilters;\r\n        var categoryArray = _.groupBy(this.props.productFilters.filters, 'filterId')[category];\r\n        var item = _.find(categoryArray, {filterValueId: value});\r\n        item.selected = (!item.selected);\r\n        PromotionActions.toggleTacticProductFilter(category, value, this.props.item, item.selected);\r\n        //this.setState({productFilters: productFilters});\r\n    },\r\n\r\n    getFilterState: function () {\r\n        return this.state.productFilters;\r\n    },\r\n\r\n    render: function () {\r\n        var categories = _.toPairs(_.groupBy(this.props.productFilters.filters, 'filterId'));\r\n        return (\r\n            <div className=\"slds-grid slds-scrollable--x product-filter\">\r\n                {\r\n                    categories.map((productFilterPair, ix) => {\r\n                        //var category = productFilterPair[0];\r\n                        var values = productFilterPair[1];\r\n                        return (\r\n                              <div key={'categoryFilter' + ix} className=\"slds-col--filter\">\r\n                                <div className=\"slds-text-heading--small\">{values[0].filterLabel}</div>\r\n                                <div className=\"slds-m-top--small\"></div>\r\n                                <div className=\"slds-scrollable--y filter-category\">\r\n                                  {\r\n                                        _.sortBy(values, 'filterValueLabel').map((filterItem, ix) => {\r\n                                          return <Checkbox key={'FilterItem' + ix} label={filterItem.filterValueLabel}\r\n                                                           checked={(filterItem.selected)}\r\n                                                           onChange={ () => this.toggleFilterValue(filterItem.filterId, filterItem.filterValueId) } />\r\n                                        })\r\n                                  }\r\n                                </div>\r\n                              </div>\r\n\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n});\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/ProductFilter.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\nvar Input = require('react-lightning-design-system').Input;\r\n\r\nvar Picklist = require('react-lightning-design-system').Picklist;\r\nvar PicklistItem = require('react-lightning-design-system').PicklistItem;\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar Checkbox = require('react-lightning-design-system').Checkbox;\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'ProductLookup',\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            productSample: {\r\n                Description_1__c: '',\r\n                Name: '',\r\n                Pack_Size__c: '',\r\n                Pack_Size_Unit__c: '',\r\n                Container_Size__c: '',\r\n                Container_Size_Unit__c: '',\r\n                Product_Form__c: '',\r\n                Container_Type__c: ''\r\n            },\r\n            selectedProducts: [],\r\n            productSearch: []\r\n        }\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        PromotionActions.clearSearchForProducts(); //Clearing the collection\r\n    },\r\n\r\n    onFieldChange: function (name, value) {\r\n        this.state.productSample[name] = value;\r\n        this.setState({productSample: this.state.productSample});\r\n    },\r\n\r\n    onAdd: function () {\r\n        this.props.addHandler(this.state.selectedProducts);\r\n    },\r\n\r\n    onSearch: function () {\r\n        this.props.searchHandler(this.state.productSample);\r\n    },\r\n\r\n    onCancel: function () {\r\n        this.props.cancelHandler();\r\n    },\r\n\r\n    toggleSelection: function (product) {\r\n        var productIndex = this.state.selectedProducts.indexOf(product);\r\n        if (productIndex == -1) {\r\n            this.state.selectedProducts.push(product);\r\n        }\r\n        else {\r\n            this.state.selectedProducts.splice(productIndex, 1);\r\n        }\r\n        this.forceUpdate();\r\n    },\r\n\r\n    renderProductRow: function (product, ix) {\r\n        return (\r\n            <tr key={\"productGrid\" + ix}>\r\n                <td>\r\n                    <Checkbox onChange={()=>this.toggleSelection(product)}\r\n                              checked={this.state.selectedProducts.indexOf(product) != -1}/>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Name}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Description_1__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Pack_Size__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Pack_Size_Unit__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Container_Size__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Container_Size_Unit__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Product_Form__c}</div>\r\n                </td>\r\n                <td>\r\n                    <div className=\"slds-truncate\">{product.Container_Type__c}</div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    },\r\n\r\n    scrollTable: function (e) {\r\n        var offset = - e.target.scrollLeft;\r\n        var headers = e.target.querySelectorAll('table thead th');\r\n\r\n        for (var i = 0; i < headers.length; i++) {\r\n            headers[i].querySelector('div').style.left = offset + 'px';\r\n            offset += headers[i].offsetWidth;\r\n        }\r\n    },\r\n\r\n    renderProductSearchGrid: function () {\r\n        var me = this;\r\n        var productMeta = this.props.productFilters.productMetadata;\r\n        var titleCols = [AppManager.getLabel('PP_LBL_SELECT') || 'Select', productMeta.Name.label, productMeta.Description_1__c.label, productMeta.Pack_Size__c.label,\r\n            productMeta.Pack_Size_Unit__c.label, productMeta.Container_Size__c.label, productMeta.Container_Size_Unit__c.label,\r\n            productMeta.Product_Form__c.label, productMeta.Container_Type__c.label];\r\n        return (\r\n            <div className=\"table--fixed-header slds-m-vertical--large slds-m-top--large\" style={{height: '334px'}}>\r\n                <section onScroll={(event) => this.scrollTable(event)} style={{height: '299px'}}>\r\n                    <table className=\"slds-table--bordered slds-table--cell-buffer\">\r\n                        <thead>\r\n                        <tr className=\"slds-text-heading--label\">\r\n                            {titleCols.map((title, ix)=> <th key={ix} scope=\"col\" title={title}>\r\n                                {title}\r\n                                <div className=\"slds-truncate\">{title}</div>\r\n                            </th>)}\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        { this.props.productSearch.map((product, ix) => me.renderProductRow(product, ix)) }\r\n                        </tbody>\r\n                    </table>\r\n                </section>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    renderProductSearchForm: function () {\r\n        var productMeta = this.props.productFilters.productMetadata;\r\n        return (\r\n            <div className=\"slds-grid \">\r\n                <div className=\"slds-col--padded\">\r\n                    <Input label={productMeta.Description_1__c.label} type='text' value={ this.state.Description_1__c }\r\n                           onChange={ (e, value) => this.onFieldChange('Description_1__c', value) }/>\r\n                    <Input label={productMeta.Name.label} type='text' value={ this.state.Name }\r\n                           onChange={ (e, value) => this.onFieldChange('Name', value) }/>\r\n                </div>\r\n                <div className=\"slds-col--padded\">\r\n\r\n                    <div className=\"slds-grid \">\r\n                        <div className=\"slds-col--padded\">\r\n                            <Input label={productMeta.Pack_Size__c.label} type='text' value={ this.state.Pack_Size__c }\r\n                                   onChange={ (e, value) => this.onFieldChange('Pack_Size__c', value) }/>\r\n                        </div>\r\n                        <div className=\"slds-col--padded\">\r\n                            <Picklist label={productMeta.Pack_Size_Unit__c.label} value={ this.state.Pack_Size_Unit__c }\r\n                                      onValueChange={ (value) => this.onFieldChange('Pack_Size_Unit__c', value) }>\r\n                                <PicklistItem key='0' value='' label='All'/>\r\n                                { productMeta.Pack_Size_Unit__c.picklistValues.map((a, i) => {\r\n                                    return <PicklistItem key={ i + 1 } value={a.value} label={a.label}/>;\r\n                                })}\r\n                            </Picklist>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"slds-grid \">\r\n                        <div className=\"slds-col--padded\">\r\n                            <Input label={productMeta.Container_Size__c.label} type='text'\r\n                                   value={ this.state.Container_Size__c }\r\n                                   onChange={ (e, value) => this.onFieldChange('Container_Size__c', value) }/>\r\n                        </div>\r\n                        <div className=\"slds-col--padded\">\r\n                            <Picklist label={productMeta.Container_Size_Unit__c.label}\r\n                                      value={ this.state.Container_Size_Unit__c }\r\n                                      onValueChange={ (value) => this.onFieldChange('Container_Size_Unit__c', value) }>\r\n                                <PicklistItem key='0' value='' label='All'/>\r\n                                { productMeta.Container_Size_Unit__c.picklistValues.map((a, i) => {\r\n                                    return <PicklistItem key={ i + 1 } value={a.value} label={a.label}/>;\r\n                                })}\r\n                            </Picklist>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-col--padded\">\r\n                    <Picklist label={productMeta.Product_Form__c.label} value={ this.state.Product_Form__c }\r\n                              onValueChange={ (value) => this.onFieldChange('Product_Form__c', value) }>\r\n                        <PicklistItem key='0' value='' label='All'/>\r\n                        { productMeta.Product_Form__c.picklistValues.map((a, i) => {\r\n                            return <PicklistItem key={ i + 1 } value={a.value} label={a.label}/>;\r\n                        })}\r\n                    </Picklist>\r\n\r\n                    <Picklist label={productMeta.Container_Type__c.label} value={ this.state.Container_Type__c }\r\n                              onValueChange={ (value) => this.onFieldChange('Container_Type__c', value) }>\r\n                        <PicklistItem key='0' value='' label='All'/>\r\n                        { productMeta.Container_Type__c.picklistValues.map((a, i) => {\r\n                            return <PicklistItem key={ i + 1 } value={a.value} label={a.label}/>;\r\n                        })}\r\n                    </Picklist>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div>\r\n                <div className=\"slds-modal slds-fade-in-open\" aria-hidden=\"false\" role=\"dialog\">\r\n                    <div className=\"slds-modal__container\" style={{minWidth: '70rem'}}>\r\n                        <div className=\"slds-modal__header\">\r\n                            <h2 className=\"slds-text-heading--medium\">{AppManager.getLabel('PP_TIT_PROD_LOOKUP') || 'Product Lookup'}</h2>\r\n                        </div>\r\n                        <div className=\"slds-modal__content slds-p-around--medium\">\r\n                            <div>\r\n                                {this.renderProductSearchForm()}\r\n\r\n                                <section className=\"slds-clearfix slds-m-top--medium\">\r\n                                    <div className=\"slds-float--right\">\r\n                                        <Button type='neutral'\r\n                                                onClick={() =>this.onSearch()}>{AppManager.getLabel('PP_BTN_SEARCH') || 'Search'}</Button>\r\n                                    </div>\r\n                                </section>\r\n                                <div className=\"slds-m-top--medium\"></div>\r\n\r\n                                {this.renderProductSearchGrid()}\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"slds-modal__footer\">\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={() =>this.onCancel()}>{AppManager.getLabel('PP_BTN_CANCEL') || 'Cancel'}</button>\r\n                            <button className=\"slds-button slds-button--neutral slds-button--brand\"\r\n                                    onClick={() =>this.onAdd()}>{AppManager.getLabel('PP_BTN_ADD') || 'Add'}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/promotion/ProductLookup.jsx","'use strict';\r\nvar React = require('react');\r\nvar ReactDOM = require('react-dom');\r\nvar Button = require('react-lightning-design-system').Button;\r\nvar Icon = require('react-lightning-design-system').Icon;\r\nvar _ = require('lodash');\r\nvar classNames = require('classnames');\r\n\r\nvar HighlightCells = false;\r\n\r\n/*******************************\r\n *  Main component for the Grid page.\r\n */\r\nvar PromotionPlanningCalculationGridPage = React.createClass({\r\n    propTypes: {\r\n        tree: React.PropTypes.object, //MAtrix object for calculation\r\n        editMode: React.PropTypes.bool //Flag for enabling editing window\r\n    },\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            tree: this.props.tree,\r\n            editMode: this.props.editMode\r\n        }\r\n    },\r\n\r\n    render: function () {\r\n        return (\r\n            <div className='tpm-calc-grid'>\r\n                {(this.props.tree == null) ?\r\n                    <div style={{flex:'1 0 0',paddingTop:'15em'}}\r\n                         className=\"slds-grid slds-grid--vertical-align-center slds-grid--align-center\">\r\n                        <div className=\"slds-spinner_container\">\r\n                            <div className=\"slds-spinner--brand slds-spinner slds-spinner--large\" aria-hidden=\"false\"\r\n                                 role=\"alert\">\r\n                                <div className=\"slds-spinner__dot-a\"></div>\r\n                                <div className=\"slds-spinner__dot-b\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div style={{fontSize:'2em',marginLeft:'2em'}}>Loading content...</div>\r\n                    </div>\r\n                    : <PromotionPlanningCalculationGrid tree={this.props.tree}\r\n                                                        object={this.props.tree.getRootNode()}\r\n                                                        editMode={this.props.editMode}\r\n                                                        idToLabelMapping={this.props.idToLabelMapping}\r\n                                                        acl={this.props.acl}/>}\r\n                                                        \r\n            </div>\r\n        )\r\n    }\r\n});\r\n\r\n/*******************************\r\n *  Grid component for the Calculation of KPIs.\r\n */\r\nvar PromotionPlanningCalculationGrid = React.createClass({\r\n    MAXIMUM_NUMBER_OF_COLUMNS_TO_DISPLAY: 6,\r\n\r\n    propTypes: {\r\n        tree: React.PropTypes.object,   // Reference to the Tree\r\n        object: React.PropTypes.object, // Reference to the RootNode of the Tree\r\n        editMode: React.PropTypes.bool  // Defines whether the editMode is active or not\r\n    },\r\n\r\n    getInitialState: function () {\r\n        var maxCols = this.MAXIMUM_NUMBER_OF_COLUMNS_TO_DISPLAY;\r\n        var timeDetails = this.props.tree.getTimeDetails();\r\n        var numberOfDataColumns = timeDetails.length; //(excluding the totalcolumn)\r\n        var dataEndIndex = _.min([numberOfDataColumns, maxCols]);\r\n\r\n        return {\r\n            dataStartIndex: 0,\r\n            dataEndIndex: dataEndIndex,\r\n            numberOfDataColumns: numberOfDataColumns,\r\n            numberOfColumnsToDisplay: maxCols\r\n        }\r\n    },\r\n\r\n    getMaxCols: function () {\r\n\r\n        var MAX_NUMBER_COLS = this.MAXIMUM_NUMBER_OF_COLUMNS_TO_DISPLAY;\r\n        var maxNumberOfColumns = this.getPossibleDisplayableNumberOfColumns();\r\n\r\n        return _.min([maxNumberOfColumns, MAX_NUMBER_COLS]);\r\n    },\r\n\r\n    getPossibleDisplayableNumberOfColumns: function() {\r\n        var sizePerColumn = 110;\r\n        var assumedUsedPageSize = 550; // does not consider a collapsed sidebar\r\n\r\n        var screenWidth = window.innerWidth;\r\n        var nodeRect = ReactDOM.findDOMNode(this).getBoundingClientRect();\r\n        var dataWidth = screenWidth - assumedUsedPageSize - nodeRect.left;\r\n\r\n        return Math.floor(dataWidth / sizePerColumn);\r\n    },\r\n\r\n    handleResize: function (e) {\r\n        this.calculateResizedValues(this.state.numberOfDataColumns);\r\n    },\r\n\r\n    calculateResizedValues: function(numberOfDataColumns) {\r\n        var maxCols = this.getMaxCols();\r\n        var dataStartIndex = this.state.dataStartIndex;\r\n\r\n        // update the EndIndex based on the new viewable number of columns and the original StartIndex\r\n        var dataEndIndex = dataStartIndex + maxCols;\r\n\r\n        // update the StartIndex in case the end of the grid has been reached but more columns could be displayed\r\n        if(dataEndIndex > numberOfDataColumns) {\r\n            var difference = dataEndIndex - numberOfDataColumns;\r\n\r\n            dataStartIndex = _.max([0, dataStartIndex - difference]);\r\n            dataEndIndex = numberOfDataColumns;\r\n        }\r\n\r\n        this.setState({\r\n            dataStartIndex: dataStartIndex,\r\n            dataEndIndex: dataEndIndex,\r\n            numberOfColumnsToDisplay: maxCols\r\n        });\r\n    },\r\n\r\n    componentWillReceiveProps: function(nextProps) {\r\n        if(nextProps.tree !== null && nextProps.tree !== undefined) {\r\n            var newTimeDetails = nextProps.tree.getTimeDetails();\r\n            var numberOfDataColumns = newTimeDetails.length;\r\n\r\n            if(this.state.numberOfDataColumns !== numberOfDataColumns) {\r\n                this.setState({numberOfDataColumns: numberOfDataColumns});\r\n                this.calculateResizedValues(numberOfDataColumns);\r\n            }\r\n        }\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        window.addEventListener('resize', this.handleResize);\r\n        this.handleResize();\r\n    },\r\n\r\n    componentDidUpdate: function () {\r\n        HighlightCells = true;\r\n    },\r\n\r\n    componentWillUnmount: function () {\r\n        window.removeEventListener('resize', this.handleResize);\r\n    },\r\n\r\n    //Shouldn't be weeks, redundant code.\r\n    prevWeeks: function () {\r\n        HighlightCells = false;\r\n\r\n        var dataStartIndex = this.state.dataStartIndex - this.state.numberOfColumnsToDisplay;\r\n        dataStartIndex = _.max([dataStartIndex, 0]);\r\n\r\n        var dataEndIndex = dataStartIndex + this.state.numberOfColumnsToDisplay;\r\n        dataEndIndex = _.min([dataEndIndex, this.state.numberOfDataColumns]);\r\n\r\n        this.setState({\r\n            dataStartIndex: dataStartIndex,\r\n            dataEndIndex: dataEndIndex\r\n        })\r\n    },\r\n\r\n    nextWeeks: function () {\r\n        HighlightCells = false;\r\n\r\n        var dataStartIndex = this.state.dataStartIndex + this.state.numberOfColumnsToDisplay;\r\n        dataStartIndex = _.min([dataStartIndex, this.state.numberOfDataColumns]);\r\n\r\n        var dataEndIndex = dataStartIndex + this.state.numberOfColumnsToDisplay;\r\n        dataEndIndex = _.min([dataEndIndex, this.state.numberOfDataColumns]);\r\n\r\n        this.setState({\r\n            dataStartIndex: dataStartIndex,\r\n            dataEndIndex: dataEndIndex\r\n        })\r\n    },\r\n\r\n    renderHeader: function () {\r\n        var timeDetails = this.props.tree.getTimeDetails();\r\n        // Get only a part of the data which shall be visible (excluding the TotalColumn)\r\n        var shownColumnHeaderValues = timeDetails.slice(this.state.dataStartIndex, this.state.dataEndIndex);\r\n        var disablePrev = (this.state.dataStartIndex === 0);\r\n        var disableNext = (this.state.dataEndIndex === this.state.numberOfDataColumns);\r\n\r\n        // FixMe: Localize the Buttons!\r\n        return (\r\n            <div className=\"grid-header\">\r\n                <div className=\"grid-header-row\">\r\n                    <div className=\"grid-header-label-cell\">\r\n                        {<Button type='neutral' icon='chevronleft' size='x-small' iconAlign='left'\r\n                                 disabled={disablePrev}\r\n                                 onClick={() => this.prevWeeks()}>Previous</Button>}\r\n                        {<Button type='neutral' icon='chevronright' size='x-small' iconAlign='left'\r\n                                 disabled={disableNext}\r\n                                 onClick={() => this.nextWeeks()}>Next</Button>}\r\n                    </div>\r\n                    {<div className=\"grid-header-cell\" key={0}><ColumnHead value={\"Total\"}/></div>}\r\n                    {shownColumnHeaderValues.map((columnHeaderValue, columnHeaderIndex) => {\r\n                        return (<div className=\"grid-header-cell\" key={columnHeaderIndex}><ColumnHead\r\n                            value={columnHeaderValue.calendaryear+\"/\"+columnHeaderValue.week}/></div>)\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    },\r\n\r\n    render: function () {\r\n        var acl = this.props.acl;\r\n        return (\r\n            <div style={{position:'absolute',height:100+'%',display:'flex',flexDirection:'column'}}>\r\n                <div className='grid-table' style={{height:100+'%'}}>\r\n                    {this.renderHeader()}\r\n                    <div className='grid-body  slds-scrollable--y'>\r\n                        {this.props.object.getChildren().map((treeNode) => {\r\n                            return (<PromotionPlanningCalculationRow\r\n                                key={treeNode.id}\r\n                                treeNode={treeNode}\r\n                                root={true}\r\n                                dataStartIndex={this.state.dataStartIndex}\r\n                                dataEndIndex={this.state.dataEndIndex}\r\n                                editMode={this.props.editMode}\r\n                                idToLabelMapping={this.props.idToLabelMapping}\r\n                                editable = {acl.isEditable(1,treeNode._measureDefinition.name)}\r\n                                />)\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\r\nvar ColumnHead = React.createClass({\r\n    propTypes: {\r\n        value: React.PropTypes.string // Title of column\r\n    },\r\n\r\n    render: function () {\r\n        return <div>{this.props.value}</div>\r\n    }\r\n});\r\n\r\n/*******************************\r\n *  Auxiliary component for the returning different DOM elements.\r\n */\r\nfunction statelessWrapper(props) {\r\n    return props.children;\r\n}\r\n\r\n/*******************************\r\n *  Row component for the Calculation grid.\r\n */\r\nvar rootLevelNodes = [];\r\n\r\nvar PromotionPlanningCalculationRow = React.createClass({\r\n    propTypes: {\r\n        dataStartIndex: React.PropTypes.number,\r\n        dataEndIndex: React.PropTypes.number,\r\n        editMode: React.PropTypes.bool,\r\n        root: React.PropTypes.bool, // Indicates if this element is the root of the grid-rows\r\n        treeNode: React.PropTypes.object, //Matrix.js object\r\n        parentUpdate: React.PropTypes.func // Function to update the parent\r\n    },\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            opened: false,\r\n            version: 0\r\n        }\r\n    },\r\n\r\n    toggle: function () {\r\n        this.setState({opened: !this.state.opened});\r\n    },\r\n\r\n    update: function () {\r\n        this.setState({version: this.state.version + 1});\r\n\r\n        // If the method to update the parent node is specified execute it\r\n        if (this.props.parentUpdate) {\r\n            this.props.parentUpdate();\r\n        }\r\n        else {\r\n            var measureDefinition = this.props.treeNode.getMeasureDefinition();\r\n            var dependingMeasures = measureDefinition.dependingMeasures;\r\n\r\n            for (var measureIndex = 0; measureIndex < dependingMeasures.length; measureIndex++) {\r\n                if (dependingMeasures[measureIndex] !== undefined) {\r\n                    rootLevelNodes.forEach(function (keyValuePair) {\r\n                        if (keyValuePair[1] === dependingMeasures[measureIndex].name) {\r\n                            keyValuePair[0].update();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the current level\r\n     * 1-based!\r\n     * @return {number}\r\n     */\r\n    getLevel: function () {\r\n        return this.props.treeNode.getLevel() + 1;\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        if (this.props.root) {\r\n            rootLevelNodes.push([this, this.props.treeNode.getMeasureDefinition().name]);\r\n        }\r\n    },\r\n\r\n    createPadders: function (currentLevel) {\r\n        var padders = [];\r\n\r\n        for (var i = 1; i < currentLevel; i++) {\r\n            padders.push(<div key={i} className=\"padder\"></div>)\r\n        }\r\n\r\n        return padders;\r\n    },\r\n\r\n    createChildSelector: function () {\r\n        var childSelector = null;\r\n\r\n        if (this.props.treeNode.showChildren()) {\r\n            childSelector = ((this.state.opened) ? <Icon key=\"open\" className=\"handler\" icon=\"chevrondown\" size='x-small'/> :\r\n                <Icon key=\"closed\" className=\"handler\" icon=\"chevronright\" size='x-small'/>);\r\n        }\r\n\r\n        return childSelector;\r\n    },\r\n\r\n    renderLabelCell: function (level) {\r\n        var nodeLabel = this.props.treeNode.getLabel();\r\n\r\n        //root labels are coming from configuration itself\r\n\r\n       // if (boPromotion) {\r\n         //   var text = boPromotion.LOExtProduct.getLabel(nodeLabel);\r\n        if (this.props.idToLabelMapping) {\r\n            var text =this.props.idToLabelMapping[nodeLabel];\r\n            if (text == undefined)\r\n                text = '#' + nodeLabel;\r\n        }\r\n        else\r\n            text = '#' + nodeLabel;\r\n        var padders = this.createPadders(level);\r\n        var childSelector = this.createChildSelector();\r\n\r\n        return (\r\n            <div className=\"sub-row\">\r\n                {padders}\r\n                <div className=\"label-cell\" onClick={()=>this.toggle()}><span>{childSelector} {text}</span></div>\r\n            </div>);\r\n    },\r\n\r\n    renderValueCells: function (treeNode, showData) {\r\n        var version = this.state.version;\r\n        var Rounding = treeNode.getRounding();\r\n        return showData.map((cellValue, cellIndex) => {\r\n            var correctedCellIndex = cellIndex + this.props.dataStartIndex;\r\n            return (\r\n                <div className=\"data-cell\" key={treeNode.id + \".\" + correctedCellIndex}>\r\n                    <PromotionPlanningCalculationCell\r\n                        className=\"cellValue\"\r\n                        precision={Rounding}\r\n                        value={cellValue}\r\n                        editable={this.props.editMode  && this.props.editable && treeNode.isEditAllowed(correctedCellIndex)}\r\n                        version={version}\r\n                        setter={value => {treeNode.set(correctedCellIndex, value);\r\n                                    this.update();\r\n                                }}/>\r\n                </div>); //TODO\r\n        });\r\n    },\r\n\r\n    render: function () {\r\n        var treeNode = this.props.treeNode;\r\n        var data = treeNode.getData();\r\n\r\n        var showData = data.slice(this.props.dataStartIndex + 1, this.props.dataEndIndex + 1);\r\n        showData.unshift(data[0]);\r\n\r\n        var level = this.getLevel();\r\n\r\n        var rowClassName = 'level' + level + '-row row';\r\n        var measureEAR = this.props.editable;\r\n        var currentRow = (!treeNode.showInUI() ? null :\r\n            <div className={rowClassName}>\r\n                {this.renderLabelCell(level)}\r\n                {this.renderValueCells(treeNode, showData)}\r\n            </div>);\r\n\r\n        var childrenRows = (this.state.opened) ?\r\n            this.props.treeNode.getChildren().map((childNode) => {\r\n                return (<PromotionPlanningCalculationRow\r\n                    key={childNode.id}\r\n                    treeNode={childNode}\r\n                    root={false}\r\n                    dataStartIndex={this.props.dataStartIndex}\r\n                    dataEndIndex={this.props.dataEndIndex}\r\n                    parentUpdate={this.update}\r\n                    editMode={this.props.editMode}\r\n                    idToLabelMapping={this.props.idToLabelMapping}\r\n                    editable={measureEAR}\r\n                    />)\r\n            })\r\n            : null;\r\n\r\n        return (currentRow ? <statelessWrapper>{currentRow}{childrenRows}</statelessWrapper> : null)\r\n    }\r\n});\r\n\r\n/*******************************\r\n *  Cell component for the Calculation grid.\r\n */\r\nvar PromotionPlanningCalculationCell = React.createClass({\r\n    propTypes: {\r\n        className: React.PropTypes.string,\r\n        precision: React.PropTypes.number,\r\n        editable: React.PropTypes.bool,\r\n        version: React.PropTypes.number,\r\n        setter: React.PropTypes.func,\r\n        value: React.PropTypes.number\r\n    },\r\n\r\n    getInitialState: function () {\r\n        return {\r\n            clickedOn: false,\r\n            value: this.props.value,\r\n            version: this.props.version\r\n        }\r\n    },\r\n\r\n    close: function () {\r\n        var newValue = parseFloat(this.state.value);\r\n        if (Number.isNaN(newValue)) {\r\n            newValue = null;\r\n        }\r\n\r\n        if (newValue + '' != this.props.value) {\r\n            this.props.setter(newValue);\r\n        }\r\n        this.setState({clickedOn: false});\r\n    },\r\n\r\n    componentWillReceiveProps: function (next) {\r\n        if (this.props.value != next.value && HighlightCells) {\r\n            var node = ReactDOM.findDOMNode(this);\r\n            node = this.props.rowCell ? node : node.parentNode;\r\n            node.className += \" HighlightedCell\";\r\n            setTimeout(() => node.className = node.className.replace(\" HighlightedCell\", \"\"), 1500);\r\n        }\r\n        this.setState({\r\n            value: next.value,\r\n            version: next.version\r\n        });\r\n    },\r\n\r\n    componentDidUpdate: function () {\r\n        if (this.state.clickedOn) {\r\n            ReactDOM.findDOMNode(this.refs.inputCell).focus();\r\n        }\r\n    },\r\n\r\n    changeValue: function (event) {\r\n        this.setState({value: event.target.value});\r\n    },\r\n\r\n    closeOnEnterKey: function (event) {\r\n        if (event.key == \"Enter\") {\r\n            this.close();\r\n        }\r\n    },\r\n\r\n    onKeyPress: function (e) {\r\n        Utils.Validators.onlyKeyEventNumber(e);\r\n    },\r\n\r\n    setAsClickedIfEditable: function () {\r\n        return this.props.editable && this.setState({clickedOn: true});\r\n    },\r\n\r\n    render: function () {\r\n        var props = this.props;\r\n        var resultElement;\r\n\r\n        if (this.state.clickedOn) {\r\n            var inputValue = '';\r\n            if (this.state.value !== null && this.state.value !== undefined && !isNaN(this.state.value)) {\r\n                inputValue = Utils.Converters.NumberRound(this.state.value, props.precision);\r\n            }\r\n\r\n            resultElement =\r\n                <div className={classNames(props.className)}>\r\n                    <input type=\"text\" ref=\"inputCell\"\r\n                           value={inputValue} size=\"8\"\r\n                           className=\"EdiCellInput\"\r\n                           onKeyDown={this.closeOnEnterKey}\r\n                           onBlur={this.close}\r\n                           onKeyPress={this.onKeyPress}\r\n                           onChange={this.changeValue}/>\r\n                </div>;\r\n        } else {\r\n            var displayValue = '';\r\n            if (this.state.value !== null && this.state.value !== undefined && !isNaN(this.state.value)) {\r\n                displayValue = Utils.Formatters.formatNumber(this.state.value, this.props.precision, this.props.precision);\r\n            } else {\r\n                displayValue = \"\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\";\r\n            }\r\n\r\n            resultElement = <span className={classNames(props.className,{'editableValue': props.editable})}\r\n                                  onClick={this.setAsClickedIfEditable}>\r\n                                {displayValue}\r\n                            </span>;\r\n        }\r\n\r\n        return resultElement;\r\n    }\r\n});\r\n\r\nmodule.exports = PromotionPlanningCalculationGridPage;\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/calculationgrid/PromotionPlanningCalculationGridPage.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nmodule.exports = React.createClass({\r\n    displayName: 'MessagePopup',\r\n\r\n    componentDidMount: function () {\r\n    },\r\n\r\n    render: function () {\r\n        var message = this.props.message;\r\n\r\n        if(this.props.messagejson != ''){\r\n            var jsonTable = '';\r\n            var jsonVar = [];\r\n            var jsonParsed = JSON.parse(this.props.messagejson);\r\n            for(var x in jsonParsed){ jsonVar.push(jsonParsed[x]); }\r\n            \r\n            jsonTable += '<div class=\"bPageBlock brandSecondaryBrd apexDefaultPageBlock secondaryPalette\">';\r\n            jsonTable += '<div class=\"pbBody\">';\r\n            jsonTable += '<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"list\">';\r\n            jsonTable += '<colgroup span=\"'+(jsonVar.length)+'\"></colgroup>';\r\n            jsonTable += '<thead class=\"\">';\r\n            jsonTable += '<tr class=\"headerRow\">';\r\n            for (var key in jsonVar[0]) {\r\n                jsonTable += '<th class=\"headerRow\" style=\"text-transform: capitalize;\" scope=\"col\" colspan=\"1\">'+key+'</th>';\r\n            }\r\n            jsonTable += '<tr></thead>';\r\n\r\n            jsonTable += '<tbody>';\r\n            for (var i = 0; i < jsonVar.length-1; i++){\r\n                jsonTable += '<tr class=\" dataRow odd \" onmouseover=\"if (window.hiOn){hiOn(this);} \" onmouseout=\"if (window.hiOff){hiOff(this);} \" onblur=\"if (window.hiOff){hiOff(this);}\" onfocus=\"if (window.hiOn){hiOn(this);}\">';\r\n                for (var key in jsonVar[i]) {\r\n                    jsonTable += '<td class=\"dataCell\" colspan=\"1\">'+jsonVar[i][key]+'</td>';\r\n                }\r\n                jsonTable += '<tr>';\r\n            }\r\n            jsonTable += '</tbody>';\r\n            jsonTable += '</table>';\r\n            jsonTable += '</div>';\r\n            jsonTable += '</div>';\r\n            message += jsonTable;\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div aria-hidden=\"false\" aria-labelledby=\"prompt-heading-id\" aria-describedby=\"prompt-message-wrapper\"\r\n                     role=\"alertdialog\" className=\"slds-modal slds-modal--prompt slds-fade-in-open\">\r\n                    <div className=\"slds-modal__container slds-modal--prompt\" role=\"document\"\r\n                         id=\"prompt-message-wrapper\" tabIndex=\"0\">\r\n                        <div className=\"slds-modal__header slds-theme--warning slds-theme--alert-texture\">\r\n                            <h2 className=\"slds-text-heading--medium\" id=\"prompt-heading-id\">{this.props.title}</h2>\r\n                        </div>\r\n                        <div className=\"slds-modal__content slds-p-around--medium\">\r\n                            <div dangerouslySetInnerHTML={{__html: message}} />\r\n                        </div>\r\n                        <div className=\"slds-modal__footer slds-theme--default\">\r\n                            <button className=\"slds-button slds-button--neutral\"\r\n                                    onClick={()=>this.props.cancelHandler()}>{AppManager.getLabel(\"PP_BTN_CANCEL\") || 'Cancel'}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n            </div>\r\n        )\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/MessagePopup.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\nmodule.exports = React.createClass({\r\n    getInitialState: function () {\r\n        return {\r\n            messages: [],\r\n            updateToggleFlag: false\r\n        };\r\n    },\r\n\r\n    componentDidMount: function () {\r\n        UI_EVENT_BUS.subscribe(EVENTS.UI_ERROR, this.onUIError);\r\n    },\r\n\r\n    onUIError: function (error) {\r\n        this.state.messages.push(error);\r\n        this.setState({updateToggleFlag: !this.state.updateToggleFlag});\r\n    },\r\n\r\n    onClick: function() {\r\n        this.state.messages.shift();\r\n        this.setState({updateToggleFlag: !this.state.updateToggleFlag});\r\n    },\r\n\r\n    render: function () {\r\n        if (this.state.messages.length == 0) {\r\n            return null;\r\n        } else {\r\n            var message = this.state.messages[0];\r\n            var msgLines = message.message.split('\\n');\r\n\r\n            var headerCls = (message.type == 'E') ? 'error' : 'warning';\r\n\r\n            return (\r\n                <div >\r\n                    <div aria-hidden=\"false\" aria-labelledby=\"prompt-heading-id\"\r\n                         aria-describedby=\"prompt-message-wrapper\"\r\n                         role=\"alertdialog\" className=\"slds-modal slds-modal--prompt slds-fade-in-open\"\r\n                         style={{zIndex: 9003}}>\r\n                        <div className=\"slds-modal__container slds-modal--prompt\" role=\"document\"\r\n                             id=\"prompt-message-wrapper\" tabIndex=\"0\" style={{width: '30rem', textAlign: 'center'}}>\r\n                            <div\r\n                                className={'slds-modal__header slds-theme--' + headerCls + ' slds-theme--alert-texture'}>\r\n                                <h2 className=\"slds-text-heading--medium\" id=\"prompt-heading-id\">{message.title}</h2>\r\n                            </div>\r\n                            <div className=\"slds-modal__content slds-p-around--medium\">\r\n                                <div>\r\n                                    {msgLines.map((msg)=>\r\n                                        <p>{msg}</p>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"slds-modal__footer slds-theme--default\">\r\n                                <button className=\"slds-button slds-button--neutral\"\r\n                                        onClick={this.onClick}> Ok\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"slds-backdrop slds-backdrop--open\"></div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Modal.jsx","\"use strict\";\r\n\r\nvar React = require('react');\r\n\r\n\r\nmodule.exports = React.createClass({\r\n\r\n    getInitialState:function(){\r\n        return {\r\n            page:null\r\n        }\r\n    },\r\n    componentDidMount: function () {\r\n        ReactDOM.render(React.createElement(Modal), document.getElementById('modal'));\r\n        var me=this;\r\n        window.onhashchange = function () {\r\n             me.processHashUrl(window.location.hash.substring(1))\r\n         }\r\n        \r\n        this.processHashUrl(window.location.hash.substring(1))\r\n    },\r\n\r\n    processHashUrl:function(hash){\r\n        var params=hash.split('/');\r\n        hash=params[0];\r\n        params=params.slice(1);\r\n\r\n        switch (hash) {\r\n            \r\n            case 'PromotionCalendar':\r\n                this.loadPage('PromotionCalendar','BOExtPromotionCalendar',params); //This could be optimized by naming convention\r\n               break;\r\n\r\n\r\n\r\n            case 'PromotionPlanning':\r\n            default:\r\n                this.loadPage('PromotionPlanning','BOPromotion',params); //This could be optimized by naming convention\r\n                break;\r\n\r\n\r\n        }\r\n\r\n    },\r\n\r\n   \r\n    //Generic method for loading pages\r\n     loadPage: function(controllerId, boId, params){\r\n        this.setState({page:controllerId});\r\n        AppManager.load([boId]).then(function (res) {\r\n            BOFactory.instantiate(boId,params)\r\n        });\r\n       \r\n    },\r\n\r\n\r\n    render: function () {\r\n        if (this.state.page==null)\r\n            return null;\r\n        else\r\n            return React.createElement(window[this.state.page]);\r\n        \r\n    }\r\n});\n\n\n// WEBPACK FOOTER //\n// app/src/ui/components/Top.jsx"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC7BA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AANA;AADA;AANA;AAkBA;AArFA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAHA;AADA;AAgBA;AA9BA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AAAA;AAAA;AAAA;AAEA;AAnzXA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AAAA;AAAA;AACA;AADA;AATA;AAcA;AAnBA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAFA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AADA;AAaA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AATA;AAhBA;AAkCA;AA1DA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAaA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AA3EA;AACA;AA6EA;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AATA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAXA;AAaA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAhGA;AAkGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AACA;AAgBA;AAAA;AAAA;AACA;AADA;AAIA;AAtSA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AAXA;AAieA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AARA;AAUA;AACA;AAAA;AAAA;AACA;AAbA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AADA;AAVA;AALA;AAyBA;AACA;AAAA;AAAA;AACA;AA5BA;AA+BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAJA;AAWA;AACA;AAbA;AAgBA;AACA;AACA;AAHA;AACA;AAMA;AACA;AAAA;AACA;AADA;AAIA;AA9KA;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AADA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AACA;AADA;AAHA;AATA;AAiBA;AAtCA;;;;;;;ACJA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AAaA;AACA;AAAA;AAAA;AAAA;AAfA;AAoBA;AACA;AAjCA;AACA;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAZA;AAgBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAEA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAxBA;AAJA;AAkjBA;AAsbA;AAgBA;AArDA;AAyDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AARA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAJA;AAKA;AANA;AAfA;AA0BA;AAjaA;;;;;;;AChfA;AAHA;AADA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AADA;AAHA;AA5CA;AAwDA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AALA;AANA;AAgBA;AAzEA;AALA;AAkFA;AA/HA;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAHA;AAVA;AAFA;AAoBA;AArBA;AAwBA;AAhCA;;;;;;;ACJA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAjBA;AADA;AADA;AA6BA;AA3CA;AACA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AANA;AADA;AAUA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAaA;AACA;AAAA;AACA;AACA;AAFA;AAEA;AAFA;AA3BA;AAiCA;AAhGA;AACA;AAkGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAHA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAJA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AADA;AAnBA;AAwCA;AAjDA;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AALA;AAOA;AATA;AADA;AAHA;AAmBA;AAjDA;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AALA;AAFA;AAeA;AArBA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAHA;AAJA;AADA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AANA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAPA;AA3BA;AA2CA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAHA;AAPA;AADA;AAgBA;AAjBA;AAoBA;AA/GA;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AAAA;AACA;AADA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAjCA;AAFA;AAuCA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAZA;AAiBA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAKA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AA/CA;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAHA;AADA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AADA;AADA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAGA;AAdA;AAiBA;AA1cA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcpBA;AADA;AALA;AAiCA;AAlCA;AADA;AAuCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AADA;AADA;AASA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAQA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAEA;AAMA;AAdA;AADA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAKA;AAhSA;;;;;;;ACRA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAIA;AAVA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAVA;AAaA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AADA;AADA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AADA;AADA;AAnDA;AAqEA;AA/EA;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAGA;AALA;AAQA;AAbA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AATA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAJA;AAHA;AAaA;AAvDA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAVA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAPA;AAHA;AAgBA;AA3DA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AACA;AADA;AAFA;AAHA;AAJA;AAeA;AA9DA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAnBA;AACA;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAPA;AAHA;AAgBA;AApEA;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAXA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAPA;AASA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAVA;AAmBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAPA;AA/BA;AAPA;AADA;AAyDA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AANA;AAHA;AADA;AADA;AAqBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAHA;AAcA;AACA;AAEA;AAAA;AAAA;AACA;AAnBA;AAwBA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAHA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AALA;AAfA;AA0BA;AAEA;AAEA;AAhCA;AALA;AAyCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAGA;AANA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXA;AADA;AADA;AALA;AAuBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAEA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AADA;AADA;AANA;AAjEA;AAsFA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AACA;AAHA;AADA;AAxFA;AAkGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAEA;AAHA;AAQA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AArBA;AAwBA;AAnfA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AACA;AAogTA;;;;;;;;;AC3WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AANA;AAFA;AADA;AAFA;AADA;AARA;AA4BA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AATA;AADA;AA9BA;AADA;AAkDA;AAxGA;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAJA;AADA;AAQA;AAAA;AAAA;AACA;AADA;AATA;AAFA;AADA;AAoBA;AA3DA;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AA7BA;AAyCA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAWA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAWA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AA5BA;AAwCA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAUA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AA/BA;AAlFA;AAyHA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAHA;AAWA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAjBA;AAwBA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAbA;AAkBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAZA;AAkBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlBA;AA/DA;AAvIA;AA8NA;AACA;AA3QA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AASA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AANA;AASA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AANA;AASA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AA9GA;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAEA;AAFA;AAEA;AAFA;AAGA;AAHA;AAKA;AAAA;AAAA;AACA;AADA;AANA;AAFA;AAeA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AALA;AADA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AA1BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAHA;AAHA;AADA;AADA;AADA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAhBA;AAFA;AADA;AADA;AA2BA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AADA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AADA;AATA;AAHA;AAoBA;AArBA;AAwBA;AAxDA;AA2DA;AAzMA;;;;;;;;ACfA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AANA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAJA;AADA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AADA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAHA;AADA;AA9CA;AA4DA;AArEA;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAHA;AASA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AA7BA;AADA;AADA;AAsCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAjDA;AAJA;AA4DA;AAnGA;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AAJA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AArCA;AA0CA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAWA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AATA;AADA;AADA;AADA;AAoBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAHA;AAPA;AADA;AAgBA;AAjBA;AAoBA;AApMA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AADA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AANA;AADA;AAtBA;AAkCA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAPA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AADA;AADA;AADA;AASA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAVA;AADA;AADA;AADA;AAbA;AADA;AAoCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AALA;AAxCA;AADA;AAqDA;AAtDA;AAyfA;AAVA;AADA;AADA;AADA;AAmCA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AApDA;AAuDA;AAjTA;;;;;;;ACTA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAHA;AADA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAlBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AADA;AAhBA;AAwBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAUA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AAYA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAJA;AA/BA;AAuDA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AALA;AATA;AAhFA;AAqGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AAMA;AACA;AAAA;AAAA;AAAA;AAjHA;AAoHA;AAzOA;;;;;;;ACrgCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AATA;AADA;AADA;AADA;AADA;AAuBA;AAzHA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAHA;AAeA;AArBA;AAyBA;AACA;AAzDA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAZA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AA1BA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AADA;AADA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AATA;AADA;AADA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAJA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AADA;AALA;AAeA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AADA;AANA;AAjBA;AAmCA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAQA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AATA;AA1CA;AA8DA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAMA;AAEA;AAXA;AADA;AAgBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAHA;AApBA;AADA;AA6BA;AA9BA;AAiCA;AAlOA;;;;;;;ACVA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AATA;AAYA;AACA;AACA;AACA;AAjBA;AAqBA;AApCA;AACA;AAsCA;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAbA;AADA;AAkBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAZA;AAFA;AADA;AAoBA;AAhLA;AACA;AAkLA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AACA;AASA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA9JA;AACA;AAgKA;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAtGA;AACA;AAwGA;;;;;;;AC7gBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AARA;AAFA;AAgBA;AAjBA;AAoBA;AA9DA;;;;;;;ACJA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AADA;AADA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AADA;AAbA;AAJA;AAwBA;AAzBA;AA4BA;AACA;AA7DA;;;;;;;ACJA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAZA;AAgBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AAzDA;;;;","sourceRoot":""}