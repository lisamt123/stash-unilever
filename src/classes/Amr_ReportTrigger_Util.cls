public with sharing class Amr_ReportTrigger_Util {

    public static void amr_report_trigger_method(List<Amr_Job_Details__c > newAmr_Job_Details, List<Amr_Job_Details__c > oldAmr_Job_Details){
          Map<String,Map<String,Integer>> mapCategoryCluster = new Map<String,Map<String,Integer>>();
          Map<String,Map<String,Integer>> totalCategoryMap = new Map<String,Map<String,Integer>>();
          
          
          //GOOD IN TIME REPORT BD
          Map<String,Map<String,Integer>> categoryStageInvolvedMap = new Map<String,Map<String,Integer>>();
          Map<String,Map<String,Integer>> categoryStageOneToTwoMap = new Map<String,Map<String,Integer>>();
          Map<String,Map<String,Integer>> categoryAllStage = new Map<String,Map<String,Integer>>();
          
          //GOOD IN TIME REPORT BB
          Map<String,Map<String,Integer>> categoryStageInvolvedMapBB = new Map<String,Map<String,Integer>>();
          Map<String,Map<String,Integer>> categoryStageOneToTwoMapBB = new Map<String,Map<String,Integer>>();
          Map<String,Map<String,Integer>> categoryAllStageBB = new Map<String,Map<String,Integer>>();
          
          integer yearValue;
          for(Amr_Job_Details__c jobObj:newAmr_Job_Details){
              system.debug('=========>'+jobObj.CreatedDate);
              yearValue = jobObj.CreatedDate.year();
              break;
          }
          
          List<Amr_Job_Details__c> jobDetailList = [select Stage_of_Production_Activity__c,Budget_Responsibility__c,ProductCategory__r.name,
                                   id,Project_Leader_Cluster__c,Function_You_Are_Part__c,CreatedDate from Amr_Job_Details__c limit 50000];
            
            Amr_ReportHelper helperClass = new Amr_ReportHelper();
            
            mapCategoryCluster = helperClass.mapCategoryClusterData(jobDetailList,yearValue);
            system.debug('=====mapCategoryCluster==>'+mapCategoryCluster);
            
          
            
            totalCategoryMap = helperClass.totalCategoryMapData(jobDetailList,yearValue);
            system.debug('=====totalCategoryMap==>'+totalCategoryMap);
          
          //GOOD IN TIME REPORT BD
          String BudgetResponBD = 'BD';
          
          categoryStageInvolvedMap = helperClass.categoryStageInvolvedMapData(jobDetailList,yearValue,BudgetResponBD);
         
          
          categoryStageOneToTwoMap = helperClass.categoryStageOneToTwoMapData(jobDetailList,yearValue,BudgetResponBD);
          system.debug('=====categoryStageOneToTwoMap==>'+categoryStageOneToTwoMap);
          Map<String,Map<String,Integer>> test = new Map<String,Map<String,Integer>>();
          test = categoryStageOneToTwoMap;
         
          categoryAllStage = helperClass.categoryAllStageData(jobDetailList,yearValue,BudgetResponBD);
          system.debug('=====categoryAllStage==>'+categoryAllStage);
           
           
           
          //GOOD IN TIME REPORT BB
          String BudgetResponBB = 'BB';
          categoryStageInvolvedMapBB = helperClass.categoryStageInvolvedMapData(jobDetailList,yearValue,BudgetResponBB);
         
          
          categoryStageOneToTwoMapBB = helperClass.categoryStageOneToTwoMapData(jobDetailList,yearValue,BudgetResponBB);
          system.debug('=====categoryStageOneToTwoMap BB==>'+categoryStageOneToTwoMapBB);
          
          categoryAllStageBB =  helperClass.categoryAllStageData(jobDetailList,yearValue,BudgetResponBB);
          system.debug('=====categoryAllStage BB ==>'+categoryAllStageBB);
           
          List<Amr_Summary_Plan__c> planList = [select id,Year__c,ProductCategory__c,ProductCategory__r.name,Actual_BD__c,Actual_BB__c from Amr_Summary_Plan__c limit 50000];
          system.debug('test1'+test);
          List<Amr_Summary_Plan__c> planListNew = new List<Amr_Summary_Plan__c>();
          planListNew = helperClass.updatePlanList(planList,totalCategoryMap,yearValue);
          planListNew  = helperClass.totalBDAndBB(planListNew);
          system.debug(planListNew);
         // upsert planListNew;
          
          //Update plan for Good In Time BD
          List<Amr_Summary_Plan__c> planNew = new List<Amr_Summary_Plan__c>();
         
          planNew = helperClass.updatePlanListGoodInTime(planList,categoryStageOneToTwoMap,categoryAllStage,yearValue);
          system.debug('planNew ==>'+planNew);
          upsert planNew;
          
          //Update plan for Good In Time BB
          List<Amr_Summary_Plan__c> planNewBB = new List<Amr_Summary_Plan__c>();
          system.debug(categoryStageOneToTwoMapBB+'category BB===IN MAIN CLASS'+categoryAllStageBB);
          planNewBB = helperClass.updatePlanListGoodInTimeBB(planList,categoryStageOneToTwoMapBB,categoryAllStageBB,yearValue);
          system.debug('planNewBB ==>'+planNewBB);
          upsert planNewBB;
          
          
          List<Amr_Summary_Plan__c> planTotalBBAndBD = new List<Amr_Summary_Plan__c>();
          planTotalBBAndBD = helperClass.updatePlanListTotalBDAndBB(planListNew,categoryStageOneToTwoMap,categoryStageOneToTwoMap);
          upsert planTotalBBAndBD;
          
          //for cluster
          List<Amr_Summary_Plan__c> planCategoryCluster = new List<Amr_Summary_Plan__c>(); 
          planCategoryCluster = helperClass.updatePlanCluster(planList,mapCategoryCluster,yearValue);
          upsert planCategoryCluster;
    }
}