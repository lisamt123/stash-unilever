/*Code generated by ForceXtra.com */
/**********************************************************************
Name: Kun_HomeView_CC ()
Copyright Â© 2016 unilever
======================================================
======================================================
Purpose: To get the data from the database with respect to the record type.
-------
======================================================
======================================================
History
-------
VERSION AUTHOR DATE DETAIL Description
1.0 Name 04/07/2016 INITIAL DEVELOPMENT CSR:
******************************************************************************************************************************************/
public with sharing class Kun_HomeView_CC{
/***************************************************************************************************************************************
Property   :  UserProfile
Purpose    :  To store User KUN Profile attribute in view State for page rendering purposes
****************************************************************************************************************************************/
    public KUN_Profile__C UserProfile{get;set;}
    
    
/**************************************************************************************************************************************
Property   : MyEvents
Purpose    : This property used to get and set events created by Administrators / users based on specific duration
***************************************************************************************************************************************/
    public List<KUN_Links> MyEvents{get;set;}
/**************************************************************************************************************************************
Property   : Question
Purpose    : This property used to get and set the question entered by user for Ask the Expert Component
***************************************************************************************************************************************/
    public string Question{get;set;}
    
/**************************************************************************************************************************************
Property   : MyEvents
Purpose    : This property used to highlights the dates on Visual force Page Calendar Component
***************************************************************************************************************************************/
    public List<KUN_Links> HighlightEvents{get;set;}
    
/**************************************************************************************************************************************
Property   : DateFrom
Purpose    : This property used to get and set dates selected by User using Visual force Page Calendar Component
***************************************************************************************************************************************/
    public string DateFrom{get;set;}
/**************************************************************************************************************************************
Property   : DateTo
Purpose    : This property used to get and set dates selected by User using Visual force Page Calendar Component
***************************************************************************************************************************************/
    public string DateTo{get;set;}
/**************************************************************************************************************************************
Property   : DocumentType
Purpose    : This property used to get and set document type selected by User from Visual force Page
***************************************************************************************************************************************/
    public string DocumentType{get;set;}
/**************************************************************************************************************************************
Property   : DocumentType
Purpose    : Get the standard page link based on User agent (desktop Visual force / Desktop Lighting / Salesforce Mobile 1 App)
***************************************************************************************************************************************/
    public string TaskLink{
        get{
            string strLinkURL='/00T/e?retURL='+EncodingUtil.urlEncode('/apex/Kun_HomeView','UTF-8');
            if(!getIsForceUI())strLinkURL='javascript:sforce.one.createRecord(\''+'Task'+'\')';
            return strLinkURL;
        }
        set;
    }
    
        public Boolean  IsTest {get;set;}
/**************************************************************************************************************************************
Property   : getDocumentTypes
Purpose    : Read-only property to get the specific record type defined in the object to search the document.
***************************************************************************************************************************************/
    public list<selectOption> getDocumentTypes(){
        List<selectOption> molstDocumentTypes=new  List<selectOption>();
        molstDocumentTypes.add(new  selectOption('KUN_Training_Documents','Training Documents'));
        molstDocumentTypes.add(new  selectOption('KUN_Compliance_Process_Indicator','Compliance Process Indicator'));
        molstDocumentTypes.add(new  selectOption('KUN_IT_Project_Portfolios','IT Project Portfolios'));
        molstDocumentTypes.add(new  selectOption('KUN_User_Education_Tickets','User Education Tickets'));
        return molstDocumentTypes;
    }
    public PageReference RefreshEvents(){
        try{
            DateFrom=Apexpages.currentPage().getParameters().get('DateFrom');
            DateTo=Apexpages.currentPage().getParameters().get('DateTo');
            Datetime firstDate=setStringToDateFormat(DateFrom);
            Datetime lastDate=setStringToDateFormat(DateTo);
            lastDate=lastDate.addDays(1);
            MyEvents=getEvents(firstDate,lastDate);
        }
        catch(Exception e){
            // Generic exception handling code here.
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'The following exception has occurred: '+e.getMessage());
            ApexPages.addMessage(myMsg);
        }
        return null;
    }
    private Date setStringToDateFormat(string myDate){
        string[] myDateOnly=myDate.split(' ');
        string[] strDate=myDateOnly[0].split('/');
        Integer myIntDate=integer.valueOf(strDate[1]);
        Integer myIntMonth=integer.valueOf(strDate[0]);
        Integer myIntYear=integer.valueOf(strDate[2]);
        Date d=Date.newInstance(myIntYear,myIntMonth,myIntDate);
        return d;
    }
    public PageReference DocumentLink(){
        PageReference nextPage;
        try{
            string strListviewId='';
            if(DocumentType=='KUN_Compliance_Process_Indicator')strListviewId=Label.KUN_CPLRT_LVID_LBL;
            else if(DocumentType=='KUN_Training_Documents')strListviewId=Label.KUN_TDRT_LVID_LBL;
            else if(DocumentType=='KUN_IT_Project_Portfolios')strListviewId=Label.KUN_ITPPRT_LVID_LBL;
            else if(DocumentType=='KUN_User_Education_Tickets')strListviewId=Label.KUN_UETRT_LVID_LBL;
            nextPage=new  PageReference('/'+strListviewId);
            nextPage.setredirect(true);
        }
        catch(Exception e){
// Generic exception handling code here.
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'The following exception has occurred: '+e.getMessage());
            ApexPages.addMessage(myMsg);
        }
        return nextPage;
    }
    /*******************************************************************
    Purpose: This method creates the post on chatter question for the experts
    Parameters:
    Returns:
    Throws [Exceptions]:
    ********************************************************************/
    public PageReference SubmitQuestion(){
        try{
            string postText=Question;
            string Cluster='';
            string ExpertGroup='';
            string strCollaborationGroup  =Label.KUN_Chatter_Group_Name_LBL;
            
            
           
            strCollaborationGroup   = IsTest ?  'KUN Test Collaboration Group' : strCollaborationGroup ;
            Id userId= [SELECT Id FROM CollaborationGroup WHERE name=:strCollaborationGroup LIMIT 1].Id ;
                       
            List<Id> userToMentionId=new  List<Id>();
            LIST<KUN_Profile__c> moUserCluster=[SELECT Cluster__c FROM KUN_Profile__c WHERE Unilever_Profile__c=:UserInfo.getUserId() LIMIT 1];
            if(moUserCluster!=null)Cluster=moUserCluster[0].Cluster__c;
            LIST<KUN_Activities__c> molstExperts=[SELECT Expert_Group__c FROM KUN_Activities__c WHERE Active__c=true AND Cluster__c=:Cluster AND Process_Area__c=:ProcessName AND Sub_Process_Area__c=:SubProcessName AND RecordType.developername='KUN_Experts_RT' LIMIT 1];
            if(molstExperts!=null)ExpertGroup=molstExperts[0].Expert_Group__c;
            List<string> result=ExpertGroup.split(';\\s*');
            LIST<user> molstUsers=[SELECT Id FROM User WHERE email in:result];
            //Integer questionsCounts=[select count() FROM KUN_Activities__c where Process_Area__c!='' AND Sub_Process_Area__c!=''];
             
            
            for(User moUser:molstUsers)userToMentionId.add(moUser.Id);
            mentionTextPost(userId,userToMentionId,postText,ProcessName,SubProcessName);
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.INFO,'Your Question has been sent to ' + ExpertGroup + '. Check the KUN Chatter group for more updates.');
            ApexPages.addMessage(myMsg);
        }
        catch(Exception e){
            // Generic exception handling code here.
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'The following exception has occurred: '+e.getMessage());
            ApexPages.addMessage(myMsg);
        }
        finally{
            Question='';
        }
        return null;
    }
    /*******************************************************************
    Purpose: This is the Constructor to get the list of values form User Profile and Events and assignes the values to UserProfile, VarKUNEvents, varKUNExpert2 variables.
    Parameters:
    Returns:
    Throws [Exceptions]:
    ********************************************************************/
    public Kun_HomeView_CC(){
        try{
            IsTest =false;
            Date selectedDate=Date.today();//Give your date 
            Date firstDate=selectedDate.addMonths(-5).toStartOfMonth();
            Date lastDate=firstDate.addMonths(12).addDays(date.daysInMonth(firstDate.year(),firstDate.month())-1);
            HighlightEvents=getEvents(firstDate,lastDate);
            if(string.isBlank(DateFrom)){
                selectedDate=Date.today();//Give your date 
                firstDate=selectedDate.toStartOfMonth();
                lastDate=firstDate.addDays(date.daysInMonth(selectedDate.year(),selectedDate.month())-1);
                MyEvents=getEvents(firstDate,lastDate);
            }
            LIST<KUN_Profile__c> moProfile=[SELECT Name,Capability__c,Cluster__c,Position__c,Unilever_Profile__r.email,Unilever_Profile__r.country,Unilever_Profile__r.Name,Unilever_Profile__r.FullPhotoUrl,Unilever_Profile__r.SmallPhotoUrl FROM KUN_Profile__c WHERE Unilever_Profile__c=:UserInfo.getUserId() LIMIT 1];
            if(moProfile.size()<=0){
                ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'Your Key User Community Profile dose not exists, Please Contact Community Administrator for further Information.');
                ApexPages.addMessage(myMsg);
                return;
            }
            UserProfile=moProfile[0];

        }
        catch(Exception e){
            // Generic exception handling code here.
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'The following exception has occurred(Method Name::- Kun_HomeView_CC):- '+e.getMessage());
            ApexPages.addMessage(myMsg);
        }
    }
    /*******************************************************************
    Purpose: This method is used to get the Name, Description and URL for Quick Link Record type from the database
    Parameters:
    Returns: List of Quick Links
    Throws [Exceptions]:
    ********************************************************************/
    public List<KUN_Activities__c> getQuickLinks(){
        List<KUN_Activities__c> moQuickLinks=[SELECT Name,Short_Description__c,URL__c FROM KUN_Activities__c WHERE Active__c=true AND RecordType.developername='KUN_Quick_Link'];
        return moQuickLinks;
    }

    /*******************************************************************
    Purpose: This method is used to get Id, Name, Description and Start Date from the Events Record type.
    Parameters:
                datetime datefrom            Event Starting between 
                datetime dateTo              Event Starting between 
    Returns: List of Event List
    Throws [Exceptions]:
    ********************************************************************/

    private List<KUN_Links> getEvents(datetime datefrom,datetime dateTo){
        LIST<KUN_Links> moEventLinks=new  LIST<KUN_Links>();
        try{
            List<KUN_Activities__c> moEvents=new  List<KUN_Activities__c>();
            if(datefrom.isSameDay(dateTo.addDays(-1)))moEvents=[SELECT Id,Name,Short_Description__c,Start_Date__c FROM KUN_Activities__c WHERE Active__c=true AND RecordType.developername='KUN_Events_RT' AND Start_Date__c>=:datefrom LIMIT 5];
            else moEvents=[SELECT Id,Name,Short_Description__c,Start_Date__c FROM KUN_Activities__c WHERE Active__c=true AND RecordType.developername='KUN_Events_RT' AND Start_Date__c>=:datefrom AND Start_Date__c<:dateTo];
            for(KUN_Activities__c moItem:moEvents){
                KUN_Links moEvent=new  KUN_Links();
                moEvent.LinkURL='/'+moItem.Id;
                if(!getIsForceUI())moEvent.LinkURL='javascript:sforce.one.navigateToSObject(\''+moItem.Id+'\')';
                moEvent.Title=moItem.Name;
                moEvent.LinkDate=moItem.Start_Date__c;
                moEvent.ShortDescription=string.valueofGmt(moItem.Start_Date__c);
                moEventLinks.add(moEvent);
            }
            LIST<Event> molstSTDEvents=new  LIST<Event>();
            if(datefrom.isSameDay(dateTo.addDays(-1)))molstSTDEvents=[SELECT Id,Subject,StartDateTime FROM Event WHERE OwnerId=:UserInfo.getUserId() AND StartDateTime>=:datefrom LIMIT 5];
            else molstSTDEvents=[SELECT Id,Subject,StartDateTime FROM Event WHERE OwnerId=:UserInfo.getUserId() AND StartDateTime>=:datefrom AND StartDateTime<:dateTo];
            for(Event moEventItem:molstSTDEvents){
                KUN_Links moEvent=new  KUN_Links();
                moEvent.LinkURL='/'+moEventItem.Id;
                if(!getIsForceUI())moEvent.LinkURL='javascript:sforce.one.navigateToSObject(\''+moEventItem.Id+'\')';
                moEvent.Title=moEventItem.Subject;
                moEvent.LinkDate=moEventItem.StartDateTime;
                moEvent.ShortDescription=string.valueofGmt(moEventItem.StartDateTime);
                moEventLinks.add(moEvent);
            }
        }
        catch(Exception e){
// Generic exception handling code here.
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'The following exception has occurred: '+e.getMessage());
            ApexPages.addMessage(myMsg);
        }
        finally{
            moEventLinks.sort();
        }
        return moEventLinks;
    }
    /*******************************************************************
    Purpose: This method is used to get the Name, Description and URL of Action Record type from the database
    Parameters:
    Returns: List of active Action Links
    Throws [Exceptions]:
    ********************************************************************/
    /*function for the actions starts here*/
        public List<KUN_Links> getActions(){
        List<KUN_Activities__c> moActions=[SELECT Name,Short_Description__c,URL__c FROM KUN_Activities__c WHERE Active__c=true AND RecordType.developername='KUN_Actions_RT'];
        LIST<KUN_Links> moTaskLinks=new  LIST<KUN_Links>();
        for(KUN_Activities__c moItem:moActions){
            KUN_Links moTask=new  KUN_Links();
            moTask.LinkURL=moItem.URL__c;
            moTask.ShortDescription=moItem.Short_Description__c;
            moTask.Title=moItem.Name;
            moTaskLinks.add(moTask);
        }
        LIST<Task> molstSTDTasks=[SELECT Id,Subject,Description FROM Task WHERE IsClosed=false AND OwnerId=:UserInfo.getUserId()];
        for(Task moTaskItem:molstSTDTasks){
            KUN_Links moTask=new  KUN_Links();
            moTask.LinkURL='/'+moTaskItem.Id;
            if(!getIsForceUI())moTask.LinkURL='javascript:sforce.one.navigateToSObject(\''+moTaskItem.Id+'\')';
            moTask.ShortDescription=moTaskItem.Description;
            moTask.Title=moTaskItem.Subject;
            moTaskLinks.add(moTask);
        }
        return moTaskLinks;
    }
/*function for the actions ends here*/
/*******************************************************************
Purpose: This method is used to get the name of the Notification data from the database
Parameters:
Returns: List of Notify Text
Throws [Exceptions]:
********************************************************************/
/*function for the Notify starts here*/
    public List<KUN_Activities__c> getNotify(){
        List<KUN_Activities__c> moNotify=[SELECT Name FROM KUN_Activities__c WHERE Active__c=true AND RecordType.developername='KUN_Broadcast_Message_RT'];
        return moNotify;
    }
/*function for the Notify ends here*/
/*******************************************************************
Purpose: This method is used to get the Name and Description of Figure and Facts data from the database
Parameters:
Returns: List of active Figure and Facts
Throws [Exceptions]:
********************************************************************/
/*function for the Facts and Figures starts here*/
    public List<KUN_Activities__c> getFactFigure(){
        List<KUN_Activities__c> moFactFigure=[SELECT Name,Short_Description__c FROM KUN_Activities__c WHERE Active__c=true AND RecordType.developername='KUN_FactsFigures_RT' ORDER BY CreatedDate LIMIT 5];
        return moFactFigure;
    }
/*function for the Facts and Figuresends ends here*/
/*******************************************************************
Purpose: This method is used to get the Name, Description, URL of Business Matrix data from the database
Parameters:
Returns: List of active Business matrix
Throws [Exceptions]:
********************************************************************/
/*function for the Charts starts here*/
    public List<KUN_Links> getDocumentsbyType(){
        List<KUN_Links> mowrplstAttachment=new  list<KUN_Links>();
        try{
            string mstrDocumentType=string.isBlank(DocumentType)? 'KUN_Training_Documents':DocumentType;
            List<Attachment> molstAttachments=[SELECT Id,Name FROM Attachment WHERE Parentid in(SELECT ID FROM KUN_Activities__c WHERE RecordType.developername=:mstrDocumentType) ORDER BY CreatedDate Limit 5];
            for(Attachment moItem:molstAttachments){
                KUN_Links moAttachement=new  KUN_Links();
                moAttachement.Title=moItem.Name;
                moAttachement.Id=moItem.Id;
                moAttachement.ShortDescription='';
                moAttachement.LinkURL='/servlet/servlet.FileDownload?file='+moItem.Id;
                if(!getIsForceUI())moAttachement.LinkURL='javascript:sforce.one.navigateToSObject("'+moItem.Id+'","related")';
                mowrplstAttachment.add(moAttachement);
            }
        }
        catch(Exception e){
// Generic exception handling code here.
            ApexPages.Message myMsg=new  ApexPages.Message(ApexPages.Severity.ERROR,'The following exception has occurred: '+e.getMessage());
            ApexPages.addMessage(myMsg);
        }
        return mowrplstAttachment;
    }
/*function for the Charts ends here*/
/*******************************************************************
Purpose: This method is used to Salesforce One URL Redirection.
Parameters:
Returns: Ture/False
Throws [Exceptions]:
********************************************************************/
/*function for the S1 url Redirection Starts here*/
    public boolean getIsForceUI(){
        System.debug('UiTheme ::-'+UserInfo.getUiTheme());
        if(UserInfo.getUiTheme()=='Theme4d')return false;
        else if(UserInfo.getUiTheme()=='Theme4t')return false;
        else return true;
    }
/*function for the S1 url Redirection Ends here*/
/*******************************************************************
Purpose: This method is used to poplate the select list of the Salesforce Visual Force Page.
Parameters:
object_name   :    Object Name
field_name    :    Picklist Field Name
first_val     :    Default Value for the Select List Box
Returns: List<selectOption>
Throws [Exceptions]:
********************************************************************/
    private List<selectOption> getPickValues(Sobject object_name,string field_name,string first_val){
//new list for holding all of the picklist options
        List<selectOption> options=new  List<selectOption>();
//if there is a first value being provided
        if(first_val!=null)options.add(new  selectOption(first_val,first_val));//add the first option
        Schema.sObjectType sobject_type=object_name.getSObjectType();//grab the sobject that was passed
        Schema.DescribeSObjectResult sobject_describe=sobject_type.getDescribe();//describe the sobject
        Map<string,Schema.SObjectField> field_map=sobject_describe.fields.getMap();//get a map of fields for the passed sobject
        List<Schema.PicklistEntry> pick_list_values=field_map.get(field_name).getDescribe().getPickListValues();//grab the list of picklist values for the passed field on the sobject
//for all values in the picklist list
        for(Schema.PicklistEntry a:pick_list_values)options.add(new  selectOption(a.getValue(),a.getLabel()));//add the value and label to our final list
        return options;//return the List
    }
    public List<selectOption> getProcessNames(){
        return getPickValues(new  KUN_Activities__c(),'Process_Area__c','Select Process Area');
    }
    public string ProcessName{get;set;}
    public string SubProcessName{get;set;}
    public List<selectOption> getSubProcessNames(){
        List<SelectOption> molstsubProcessNames=new  List<SelectOption>();
        molstsubProcessNames.add(new  SelectOption('','Select Sub Process'));
        if(ProcessName==null)return molstsubProcessNames;
        LIST<KUN_Profile__c> moUserCluster=[SELECT Cluster__c FROM KUN_Profile__c WHERE Unilever_Profile__c=:UserInfo.getUserId() LIMIT 1];
        LIST<AggregateResult> molstAggregateResult=[SELECT Sub_Process_Area__c,COUNT_DISTINCT(ID) FROM KUN_Activities__c WHERE Active__c=true AND Cluster__c=:moUserCluster[0].Cluster__c AND Process_Area__c=:ProcessName AND RecordType.developername='KUN_Experts_RT' GROUP BY Sub_Process_Area__c ORDER BY Sub_Process_Area__c];
        for(AggregateResult ar:molstAggregateResult){
            string mstrSubprocess=string.ValueOf(ar.get('Sub_Process_Area__c'));
            molstsubProcessNames.add(new  SelectOption(mstrSubprocess,mstrSubprocess));
        }
        return molstsubProcessNames;
    }
/*******************************************************************
Purpose: This method is used to get the Name, Capability, Position, Profile, Email, Country, and profile photo URL of New joiners data from the database
Parameters:
Returns: List of New joiners
Throws [Exceptions]:
********************************************************************/
/*function for the new joiners starts here*/
    public List<KUN_Profile__c> getNewJoiners(){
        List<KUN_Profile__c> moKeyspot=[SELECT Unilever_Profile__r.Name,Name,Capability__c,Cluster__c,Unilever_Profile__c,Position__c,Unilever_Profile__r.country,Unilever_Profile__r.FullPhotoUrl,Unilever_Profile__r.SmallPhotoUrl FROM KUN_Profile__c WHERE Unilever_Profile__c!=null ORDER BY CreatedDate DESC LIMIT 5];
        return moKeyspot;
    }
/*function for the new joiners ends here*/
/*******************************************************************
Purpose: This method is used to get the Name, Id, Description and the attchement of the Newsletter data from the database
Parameters:
Returns: List of Newsletter
Throws [Exceptions]:
********************************************************************/
/*function for the newsletters starts here*/
    public List<KUN_Links> getNewsLetters(){
        return getFiles('KUN_News_Letter_RT');
    }
    
    private list<KUN_Links> getFiles(string recordType){//changed from private to public.
        List<KUN_Activities__c> molstNewsLetters=[SELECT id,Name,Short_Description__c,(SELECT Id FROM attachments ORDER BY Createddate DESC LIMIT 1) FROM KUN_Activities__c WHERE RecordType.developername=:recordType AND Active__C=true ORDER BY CreatedDate DESC LIMIT 1];
        List<KUN_Links> mowrplstNewsletters=new  list<KUN_Links>();
        for(KUN_Activities__c moItem:molstNewsLetters){
            KUN_Links moNewsletter=new  KUN_Links();
            moNewsletter.Title=moItem.Name;
            moNewsletter.ShortDescription=moItem.Short_Description__c;
            for(attachment a:moItem.attachments){
                moNewsletter.Id=a.Id;
                moNewsletter.LinkURL='/servlet/servlet.FileDownload?file='+a.Id;
                if(!getIsForceUI())moNewsletter.LinkURL='javascript:sforce.one.navigateToSObject("'+a.Id+'","related")';
            }
            if(moItem.attachments.Size()>0)mowrplstNewsletters.add(moNewsletter);
        }
        return mowrplstNewsletters;
    }
/*******************************************************************
Purpose: This method is used to get the Name, Description and attchement of News from the database and appneding the class to the slider component.
Parameters:
Returns: List of News
Throws [Exceptions]:
********************************************************************/
/*function for the news starts here*/
    public List<KUN_Links> getNews(){
        List<KUN_Activities__c> molstNews=[SELECT id,Name,Short_Description__c,(SELECT Id FROM attachments ORDER BY Createddate DESC LIMIT 1) FROM KUN_Activities__c WHERE RecordType.developername='KUN_News_RT' AND Active__C=true ORDER BY CreatedDate DESC LIMIT 5];
        List<KUN_Links> mowrplstNews=new  list<KUN_Links>();
        for(KUN_Activities__c moItem:molstNews){
            KUN_Links moNews=new  KUN_Links();
            moNews.CSSStyle=(mowrplstNews.size()==0)?'item active':'item';
            moNews.LinkURL='/'+moItem.Id;
            if(!getIsForceUI())moNews.LinkURL='javascript:sforce.one.navigateToSObject(\''+moItem.Id+'\')';
            moNews.Title=moItem.Name;
            moNews.ShortDescription=moItem.Short_Description__c;
            for(attachment a:moItem.attachments){
                moNews.Id=a.Id;
                moNews.URL='/servlet/servlet.FileDownload?file='+a.Id;
            }
            mowrplstNews.add(moNews);
        }
        return mowrplstNews;
    }
/*******************************************************************
Purpose: This method is used to get the Event Link and attchment data from the database
Parameters:
Returns: Event Links
Throws [Exceptions]:
********************************************************************/
    public string getEventLink(){
        string strLinkURL='/00U/e?retURL='+EncodingUtil.urlEncode('/apex/Kun_HomeView','UTF-8');
        if(!getIsForceUI())strLinkURL='javascript:sforce.one.createRecord(\''+'Event'+'\')';
        return strLinkURL;
    }
    /*******************************************************************
    Purpose: This method is used to get the Id, Name, Role, Description and attachment of Key Spotlight Users data from the database
    Parameters:
    Returns: List of  Key Spotlight Users data and attchment
    Throws [Exceptions]:
    ********************************************************************/
    /*function for the Key Spot starts here*/
     public List<KUN_Links> getKey(){
        List<KUN_Activities__c> molstKey=[SELECT id,Name,Role__c,Short_Description__c,Profile_Id__r.Unilever_Profile__r.SmallPhotoUrl,Profile_Id__r.Unilever_Profile__r.Name,(SELECT Id FROM attachments ORDER BY Createddate DESC LIMIT 1) FROM KUN_Activities__c WHERE RecordType.developername='KUN_Spotlight_RT' AND Active__C=true ORDER BY CreatedDate DESC Limit 5];
        List<KUN_Links> mowrplstKey=new  list<KUN_Links>();
        for(KUN_Activities__c moItem:molstKey){
            KUN_Links moKey=new  KUN_Links();
            moKey.LinkURL='javascript:void(0);';
            moKey.Title=moItem.Profile_Id__r.Unilever_Profile__r.Name;
            moKey.URL=moItem.Profile_Id__r.Unilever_Profile__r.SmallPhotoUrl;
            moKey.ShortDescription=(moItem.Short_Description__c.length()>120)?moItem.Short_Description__c.substring(0,120):moItem.Short_Description__c;
            for(attachment a:moItem.attachments){
                moKey.Id=a.Id;
                moKey.LinkURL='/servlet/servlet.FileDownload?file='+a.Id;
                if(!getIsForceUI())moKey.LinkURL='javascript:sforce.one.navigateToSObject(\''+a.Id+'\')';
            }
            mowrplstKey.add(moKey);
        }
        return mowrplstKey;
    }
    // makes a simple chatter text post to the specified user from the running user 
    private static void mentionTextPost(Id userId,List<Id> userToMentionId,string postText,string ProcessTopic,string ProcessSubTopic){
        ConnectApi.MessageBodyInput messageInput=new  ConnectApi.MessageBodyInput();
        messageInput.messageSegments=new  List<ConnectApi.MessageSegmentInput>();
    // add some text before the mention
        ConnectApi.TextSegmentInput textSegment=new  ConnectApi.TextSegmentInput();
        textSegment.text='Hey ';
        messageInput.messageSegments.add(textSegment);
    // add the mention
        for(Id mentionId:userToMentionId){
            ConnectApi.MentionSegmentInput mentionSegment=new  ConnectApi.MentionSegmentInput();
            mentionSegment.id=mentionId;
            messageInput.messageSegments.add(mentionSegment);
        }
    // add the text that was passed
        textSegment=new  ConnectApi.TextSegmentInput();
        textSegment.text=','+postText+'\r\n  Regards \r\n'+UserInfo.getName();
        messageInput.messageSegments.add(textSegment);
        ConnectApi.FeedItemInput input=new  ConnectApi.FeedItemInput();
        input.body=messageInput;
        input.feedElementType=ConnectApi.FeedElementType.FeedItem;
    // Use a group ID for the subject ID. 
        input.SubjectId=userId;
    // post it
        ConnectApi.FeedElement feedElement=ConnectApi.ChatterFeeds.postFeedElement(null,input);
        ConnectApi.Topics.assignTopicByName(null,feedElement.Id,ProcessTopic);
        ConnectApi.Topics.assignTopicByName(null,feedElement.Id,ProcessSubTopic);
    }
}