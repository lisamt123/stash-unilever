/***********************************************************************************************************************************************************
* @author Cognizant
* @date  15/12/2014
* @description: This class will be used across IPM_NG application test classes to create test data. 
**************************************************************************************************/
@isTest
public class IPM_TestFactory_Helper 
{
    public static final String CHARTER_GATE_FULL = 'Charter Gate Full';
    public static final String IDEA_GRAPHIC= 'Idea / Graphic';
    public static final String IDEAS = 'Ideas';
    public static boolean FALSE_VAR = False;
    public static final String GCLT_RCLT = 'GCLT & RCLT';
    public static final String TEST_CONTENT =  'A quick brown fox jumped over a lazy dog';
    public static final String NEWVARIANTSIZE_STR = 'New Variant/ Size';
    public static final String COREPARAMETER_BLG = 'BLG';
    public static final String COREPARAMETER_GROWTHECORE ='Grow the Core';
    public static final String COREPARAMETER_NEWSCHANNEL = 'New Channels';
    public static final String COREPARAMETER_REGULATORY = 'Regulatory/ Compliance';
    public static final String COREPARAMETER_SUPPLYCHAIN ='Supply Chain';
    public static final String COREPARAMETER_TECHNOLOGYDEV = 'Technology Development';
    public static final String COREPARAMETER_VIP = 'VIP';
    public static final string QUESTIONTYPE_STR = 'Consumer';
    public static final string EMPTY_STRING = '';
    public static final string SECTION_SPAN = 'Global; Regional; Local';
    public static final string IPM_PROJECT_TEMPLATE = 'IPM_Project_Template__c';
    public static final string IPM_DOCUMENT_TEMPLATE_NAME = 'IPM_Document_Template_Name__c'; 
    public static final string IPM_SECTION_SEQUENCE = 'IPM_Section_Sequence__c';
    public static final string IPM_PROJECT_NAME = 'IPM_Project_Name__c';
    public static final string FULL = 'Full';
    public static final string EXTERNAL = 'External';
    public static final string ORIGINAL_PROJECTYPE = 'Original';
    public static final string OPERATIONAL_PROJECTYPE = 'Operational';
    public static final string GEOGRAPHICAL_SCOPE ='IPM_TxtGeographical_Scope__c';
    public static final string MARKET_CLUSTER_CC ='IPM_Market_Cluster__c';
    public static final string IPM_MCO_CC ='IPM_MCO__c';
    public static final string SUSTAINABILITY_PERIOD = 'Project_Sustainability_Period__c';
    public static final string IPM_SECTION_Name = 'ipm_section_name__c'; 
    public static final string PROJECT_LEADER = 'project leader';
    public static final string INDIA = 'India';
    public static final String IPM_DOCUMENT_TEMPLATE = 'IPM_Document_Template__c';
    public static final String DIRT_IS_GOOD = 'Dirt is Good';
    public static final String SOUTH_ASIA = 'South Asia';
    public static final String BLANK_SPACE = ' ';
    public static final String LOCAL_SPAN='Local';
    public static final String FEASIBILITY = 'Feasibility';
    public static final String IPM_PHASE = 'IPM_Phase__c';
    public static final String LITE = 'Lite';
    public static final String IPM_TARGET_LAUNCH_DATES = 'IPM_Target_Launch_Dates__c';
    public static final String IPM_PROJECT_LEADER = 'IPM_Project_Leader__c';
    public static final String IPM_PROJECT = 'IPM_Project__c';
    public static final String C_GLOBAL = 'Global';
    public static final String THREE = '3';
    public static final String RECORD_TYPE_ID = 'RecordTypeId';
    public static final String TARGET_LAUNCH_DATE = 'Target_Launch_Date__c';
    public static final String INNOVATION = 'Innovation';
    public static final String NAME = 'Name';
    public static final String TEST_COMMENTS = 'TestComments';
    public static final String TEST_REG_COMMENTS = 'TestRegionalComments';
    public static final String TEST_OP_COMMENTS = 'TestOperationalComments';
    public static final String IPM_COMPLEXITY = 'IPM_Complexity__c';
    public static final String IPM_GATEKEEPING_MODEL = 'IPM_Gatekeeping_model__c';
    public static final String IPM_ROLLOUT_PROJECT = 'IPM_Rollout_Project__c';
    public static final String MARKET_CLUSTER = 'Market_cluster__c'; 
    public static final String REGIONAL = 'Regional';
    public static final String IS_ACTIVE = 'isActive__c';
    public static final String IPM_STATUS = 'IPM_Status__c';
    public static final String MCO_NAME = 'MCO_Name__c';
    public static final String S_MCO = 'MCO__c'; 
    public static final String TYPE_FIELD ='Type__c';
    public static final String IPM_ROLLOUT_PLAN = 'IPM_Rollout_Span__c';
    public static final String MARKET_CLUSTER_NAME = 'Market_Cluster_Name__c';
    public static final String IPM_ROLLOUT_TYPE =  'IPM_Rollout_Type__c';
    public static final String MARKET_DEPLOYMENT = 'Market Deployment';
    public static final String STATUS = 'status';
    public static final String ACTIVE = 'active';
    public static final String CAPABILITY = 'Capability';
    public static final String CONTRACT = 'Contract';
    public static final String CHARTER = 'Charter';
    public static final String STRINGVALUE_4 = '4';
    public static final String C_TRUE = 'true';
    public static final String BD = 'BD';
    public static final String IPM_USER_FUNCTION = 'IPM_User_Function__c';
    public static final String IPM_COMPANY_CARD = 'IPM_Company_Card__c';
    public static final String IPM_MANAGED_CATEGORY = 'IPM_Managed_category__c';
    public static final String IPM_COMPANY_TYPE = 'IPM_Company_Type__c';
    public static final String IPM_PROJECT_SPAN = 'IPMProject_Span__c'; 
    public static final String IPM_COMPANYCARDTEXT = 'IPM_CompanyCardText__c';
    public static final String IPM_PROJECT_TYPE =  'IPM_Project_Type__c';
    public static final String IPM_PROJECT_SUB_TYPE = 'IPM_ProjectSubType__c';
    public static final String IPM_SOURCEPROJECT_TYPE = 'IPM_SourceProjectType__c';
    public static final String IPM_CATEGORY_TEXT = 'IPM_Category_Text__c';
    public static final String IPM_CHILD_COMPLEXITY = 'IPM_Child_Complexity__c';
    public static final String IPM_REGIONAL_PL_TEXT ='IPM_Regional_PL_Text__c';  
    public static final String IPM_REGIONAL_PL ='IPM_Regional_PL__c'; 
    public static final String STRINGVALUE_1 = '1';
    public static final String AFRICA = 'Africa';
    public static final String MARKET_READY = 'Market Ready';
    public static final String BB = 'BB';
    public static final String CD = 'CD';
    public static final String CMI = 'CMI';
    public static final String FINANCE = 'Finance';
    public static final String R_D = 'R&D';
    public static final String SC = 'SC';
    public static final String IPM_CENTRAL_TEAM = 'IPM_Central_Team__c';
    public static final String IPM_USER_ROLE = 'IPM_User_Role__c';
    public static final String IPM_WORK_LEVEL = 'IPM_Work_Level__c';
    public static final String NEGOTIABLE = 'Negotiable';
    public static final String NON_NEGOTIABLE = 'Non-Negotiable';
    public static final String STRINGVALUE_2 = '2';
    public static final String STRINGVALUE_5 = '5';
    public static final String STRINGVALUE_6 = '6';
    public static final String STRINGVALUE_7 = '7';
    public static final String HEADER = 'Header';
    
    public static final String STRINGVALUE_1_2 = '1.2';
    public static final String STRINGVALUE_2_2 = '2.2';
    public static final String STRINGVALUE_3_1 = '3.1';
    public static final String STRINGVALUE_3_2 = '3.2';
    public static final String STRINGVALUE_3_3 = '3.3';
    public static final String STRINGVALUE_3_4 = '3.4';
    public static final String STRINGVALUE_8 = '8';
    public static final String SUB_HEADER = 'Sub Header';
    public static final String STRINGVALUE_1_1= '1.1';
    public static final String STRINGVALUE_1_3 = '1.3';
    public static final String STRINGVALUE_2_1 = '2.1';
    public static final String STRINGVALUE_3_5 = '3.5';
    public static final String STRINGVALUE_4_2 = '4.2';
    public static final String STRINGVALUE_6_2 = '6.2';
    public static final String TEXT = 'Text';
    public static final String STRINGVALUE_5_1 = '5.1';
    public static final String STRINGVALUE_5_2 = '5.2';
    public static final String STRINGVALUE_7_1 = '7.1';
    public static final String STRINGVALUE_7_2 = '7.2';
    public static final String STRINGVALUE_7_3 = '7.3';
    public static final String STRINGVALUE_7_4 = '7.4';
    public static final String STRINGVALUE_8_1 = '8.1';
    public static final String STRINGVALUE_8_2 = '8.2';
    public static final String STRINGVALUE_8_3 = '8.3';
    public static final String STRINGVALUE_1_2_1 = '1.2.1';
    public static final String STRINGVALUE_1_2_2 = '1.2.2';
    public static final String STRINGVALUE_2_2_2 = '2.2.2';
    public static final String STRINGVALUE_3_1_1 = '3.1.1';
    public static final String STRINGVALUE_3_1_2 = '3.1.2';
    public static final String STRINGVALUE_8_4 = '8.4';
    public static final String STRINGVALUE_8_5 = '8.5';
    public static final String STRINGVALUE_8_6 = '8.6';
    public static final String STRINGVALUE_8_7 = '8.7';
    
    public static final String STRINGVALUE_3_1_3 = '3.1.3';
    public static final String STRINGVALUE_3_1_5 = '3.1.5';
    public static final String STRINGVALUE_3_2_2 = '3.2.2';
    public static final String STRINGVALUE_3_3_2 = '3.3.2';
    public static final String STRINGVALUE_3_4_1 = '3.4.1';
    public static final String STRINGVALUE_3_4_2 = '3.4.2';
    public static final String STRINGVALUE_4_2_1 = '4.2.1';
    public static final String STRINGVALUE_4_2_2 = '4.2.2';
    public static final String STRINGVALUE_4_2_3 = '4.2.3';
    public static final String STRINGVALUE_4_1 = '4.1';
    public static final String STRINGVALUE_5_3 = '5.3';
    public static final String STRINGVALUE_6_3 = '6.3';
    public static final String STATIC_TABLE = 'Static Table';
    public static final String STRINGVALUE_6_1 = '6.1';
    public static final String STRINGVALUE_6_2_1 = '6.2.1';
    public static final String DYNAMIC_COMPLEX_TABLE = 'Dynamic Complex Table';
    public static final String STRINGVALUE_6_2_2 = '6.2.2';
    public static final String PL = 'PL';
    public static final String STRINGVALUE_1_4 = '1.4';
    public static final String STRINGVALUE_3_2_1 = '3.2.1';
    public static final String CONCEPT = 'Concept';
    public static final String HOME_CARE = 'Home Care';
    public static final String STANDARD = 'Standard';
    public static final String HOUSEHOLDCARE = 'Household Care';
    public static final String LAUNDRY = 'Laundry';  
    public static final String BRAND_POS = 'IPM_Brand_Positioning__c';
    public static final String ROLLOUT_OBJECT ='IPM_Project_Rollout__c';
    
    public static List<IPM_Project__c> projectList = new List<IPM_Project__c>();
    public static List<IPM_Financial__c> finList = new List<IPM_Financial__c>();
    public static List<IPM_Financial_Year__c> finYear=new List<IPM_Financial_Year__c>();
    
    public static Id REGIONAL_ROLLOUT_RECTYPE = Schema.SObjectType.IPM_Project_Rollout__c.RecordTypeInfosByName.get(IPM_ConstantUtils.REGIONAL_ROLLOUT_RT).RecordTypeId;
    public static Id LOCAL_ROLLOUT_RECTYPE = Schema.SObjectType.IPM_Project_Rollout__c.RecordTypeInfosByName.get(IPM_ConstantUtils.LOCAL_ROLLOUT_RT).RecordTypeId;
    
    public static Id  SYSTEM_MILESTONE_RECTYPE = Schema.SObjectType.IPM_Milestone__c.getRecordTypeInfosByName().get(IPM_Utils.mileMRecordType).getRecordTypeId();
    public static Id  PROJECT_MILESTONE_RECTYPE = Schema.SObjectType.IPM_Milestone__c.getRecordTypeInfosByName().get(IPM_Utils.milePMRecordType).getRecordTypeId();
    
    public static ID  taskMasterRecordType = Schema.SObjectType.IPM_Task__c.getRecordTypeInfosByName().get(IPM_Utils.IPM_STANDARD_TASKS).getRecordTypeId();
    
    public static ID globalCompanyCardRecId = Schema.SObjectType.IPM_Company_Card__c.RecordTypeInfosByName.get(IPM_ConstantUtils.COMPANY_CARD_RECORD_TYPE_GLOBAL).RecordTypeId;
    public static ID regionalCompanyCardRecId = Schema.SObjectType.IPM_Company_Card__c.RecordTypeInfosByName.get(IPM_ConstantUtils.COMPANY_CARD_RECORD_TYPE_REGIONAL).RecordTypeId;
    public static ID localCompanyCardRecId = Schema.SObjectType.IPM_Company_Card__c.RecordTypeInfosByName.get(IPM_ConstantUtils.COMPANY_CARD_RECORD_TYPE_LOCAL).RecordTypeId;
    
    public static ID recTypeRnD = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.RNDQUESTION_RECORD_TYPE).RecordTypeId;
    public static ID recTypeIDPOS = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.POS_QUESTIONNAIRE_RECORDTYPE).RecordTypeId;
    
    // RQS and Corporate Risk(CR) Record Type 
    public static ID recTypeIDRQS = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.RQS_QUESTIONNAIRE_RECORDTYPE).RecordTypeId;
    public static ID recTypeIDCR = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.CORPORATE_RISK_QUESTIONNAIRE_RECORDTYPE).RecordTypeId;

    // R&D feasibility, Suppy Chain Feasibility and Risk Record Type 
    public static ID recTypeRnDFeasibility = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.RNDFEASIBILITYQUESTION_RECORD_TYPE).RecordTypeId;
    public static ID recTypeSCFeasibility = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.SCFEASIBILITY_RECORD_TYPE).RecordTypeId;
    public static ID recTypeRisk = Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.RISKQUESTION_RECORD_TYPE).RecordTypeId;
    
    public static List<IPM_Project__c>masterProject=new List<IPM_Project__c>();
    
    //TO query the profile
    public static Set<String> profiles = new Set<String>{ 'System Administrator','Unilever - Force MultiApp Standard' };
    public static List<Profile> profileList = [SELECT Id, Name FROM Profile WHERE Name IN :profiles ORDER BY Name asc];

    /***********************************************************************************************************************************************************
    * @description To get master project Id
    **************************************************************************************************/
    public static Id getMasterProjId(){
        masterProject=[select Id,IPM_Project_Name__c from IPM_Project__c where IPM_Project_Name__c='IPM_MasterProject' limit 1];
        return masterProject[0].Id;
    } 

    /***********************************************************************************************************************************************************
    * @description To get project template
    **************************************************************************************************/
    public static List<IPM_Project_Template__c> getIMPProjectTemplateList() {
        Map<String,List<Object>> projTemMap =  new Map<String,List<Object>>{
            'IPM_Template_Complexity__c' => new List<Object>{IPM_ConstantUtils.COMPLEXITY_FULL,IPM_ConstantUtils.COMPLEXITY_FULL,IPM_ConstantUtils.COMPLEXITY_FULL,IPM_ConstantUtils.COMPLEXITY_FULL,IPM_ConstantUtils.COMPLEXITY_FULL}
        };
        System.savePoint sp = Database.setSavepoint();  
        List<IPM_Project_Template__c> projectTemplateList = (List<IPM_Project_Template__c>)IPM_TestFactory.createSObjectList(IPM_PROJECT_TEMPLATE,projTemMap,true);
        insert projectTemplateList;
        Database.rollback(sp);
        return projectTemplateList;
    }

    /***********************************************************************************************************************************************************
    * @description To get document template
    **************************************************************************************************/
    public static List<IPM_Document_Template__c> getIPMDocumentTemplateList() {
        List<IPM_Project_Template__c> projTemplateList = getIMPProjectTemplateList();
        List<IPM_Document_Template__c> documentTemlateList = new List<IPM_Document_Template__c>();
        for(IPM_Project_Template__c projTempl : projTemplateList) {      
            Map<String,Object> docTemMap =  new Map<String,Object>{IPM_PROJECT_TEMPLATE => projTempl.ID,IPM_DOCUMENT_TEMPLATE_NAME =>CHARTER_GATE_FULL, 'IPM_Document_Type__c' => IPM_ConstantUtils.FIELD_SUFFIX_CHARTER};
            IPM_Document_Template__c docTempl = (IPM_Document_Template__c)IPM_TestFactory.createSObject(IPM_DOCUMENT_TEMPLATE,docTemMap,false); // NO SONAR QUBE string literal used in dynamic SOQL 
            documentTemlateList.add(docTempl);
        }
        insert documentTemlateList;
        return documentTemlateList;
    }
    public static final String UNITED_STATES = 'United States';
    public static final String ENGLISH = 'English';
    
    /***********************************************************************************************************************************************************
    * @description To insert and get geographic list
    **************************************************************************************************/
    public static List<ar_Geography__c> getGeographyList() {      
        //System.savePoint sp = Database.setSavepoint();  
        Map<String,List<Object>> geographyMap =  new Map<String,List<Object>>{
            'Country__c' => new List<Object>{UNITED_STATES,UNITED_STATES,UNITED_STATES,UNITED_STATES,UNITED_STATES},
            'Languages_Available__c' => new List<Object>{ENGLISH,ENGLISH,ENGLISH,ENGLISH,ENGLISH}
        };
        List<ar_Geography__c> geographicList = (List<ar_Geography__c>)IPM_TestFactory.createSObjectList('ar_Geography__c',geographyMap,true);
        insert geographicList;
        // Database.rollback(sp);
        return geographicList;   
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert user
	**************************************************************************************************/
    public static User createUser(Boolean doInsert) {
        String uniqueUserEMailId = getUniqueUsername();
        User u = new User(Alias = uniqueUserEMailId.substring(18,23), Email=uniqueUserEMailId, 
        EmailEncodingKey=IPM_ConstantUtils.USER_EMAIL_ENCODE, LastName='IPMUSER_LASTNAME', LanguageLocaleKey=IPM_ConstantUtils.USER_LOCALEKEY, 
        LocaleSidKey='en_US', ProfileId = profileList[1].Id, 
        TimeZoneSidKey=IPM_ConstantUtils.USER_TIMEZONEKEY, UserName=uniqueUserEMailId, 
        isActive =true);
        
        if(doInsert) { 
            insert u;
        }
        return u;
    }
    
    //Creation of platform user
    public static List<PermissionSetAssignment> lstPermissionSetAssignment ;
    
    /***********************************************************************************************************************************************************
	* @description To insert user and permissioon set assignment
	**************************************************************************************************/
    public static User createIPMPlatformProfileUser(String IPMRole) {
        lstPermissionSetAssignment = new List<PermissionSetAssignment>();
        String uniqueUserEMailId = getUniqueUsername();
        IPMRole = String.isBlank(IPMRole) ? IPM_ConstantUtils.PROJECT_LEADER :  IPMRole;
        
        User u = new User(Alias = uniqueUserEMailId.substring(18,23), Email=uniqueUserEMailId, 
        EmailEncodingKey=IPM_ConstantUtils.USER_EMAIL_ENCODE, LastName='PLATFORM_USER', LanguageLocaleKey=IPM_ConstantUtils.USER_LOCALEKEY, 
        LocaleSidKey='en_US', ProfileId = profileList[1].Id, 
        TimeZoneSidKey=IPM_ConstantUtils.USER_TIMEZONEKEY, UserName=uniqueUserEMailId, 
        isActive =true);
        
        insert u;

        for(PermissionSet permissionSet : [SELECT Id from PermissionSet WHERE Name IN (:IPM_ConstantUtils.PERMISSION_PROJECT_LEADER,:IPM_ConstantUtils.PERMISSION_BASIC)]){
            lstPermissionSetAssignment.add(new PermissionSetAssignment(AssigneeId = u.Id, PermissionSetId = permissionSet.Id));
        }        
        insert lstPermissionSetAssignment;
        return u;
    }
    
    /***********************************************************************************************************************************************************
	* @description To get platform user
	**************************************************************************************************/
    public static User returnPlatformUser(){
        //Creation test user
        User platformUser;
        System.runAs(IPM_TestFactory_Helper.createUserAdmin(true)){
            platformUser = IPM_TestFactory_Helper.createIPMPlatformProfileUser(EMPTY_STRING);
            System.assertEquals('PLATFORM_USER', platformUser.LastName); 
        }
        return platformUser;
    }
    
    /***********************************************************************************************************************************************************
	* @description To get admin user
	**************************************************************************************************/
    public static User createUserAdmin(Boolean doInsert) {
        String uniqueUserEMailId = getUniqueUsername();
        User u = new User(Alias = uniqueUserEMailId.substring(18,23), Email=uniqueUserEMailId, 
        EmailEncodingKey=IPM_ConstantUtils.USER_EMAIL_ENCODE, LastName='IPMUSER_LASTNAME', LanguageLocaleKey=IPM_ConstantUtils.USER_LOCALEKEY, 
        LocaleSidKey='en_US', ProfileId = profileList[0].Id, 
        TimeZoneSidKey=IPM_ConstantUtils.USER_TIMEZONEKEY, UserName=uniqueUserEMailId, 
        isActive =true);
        
        if(doInsert) { 
            insert u;
        }
        return u;
    }
    
    /***********************************************************************************************************************************************************
	* @description To make user inactive
	**************************************************************************************************/
    public static void makeUserInactive(User userToBeUpdated){
        System.runAs(IPM_TestFactory_Helper.createUserAdmin(true)){
            userToBeUpdated.IsActive = false;
        }
    }
    
    /***********************************************************************************************************************************************************
	* @description To make project resource inactive
	**************************************************************************************************/
    public static User makeResourceInactive(List<IPM_Project__c> testProjList,User prjResourceUser){
        System.runAs(IPM_TestFactory_Helper.createUserAdmin(true)) {
            //Bulk insert of project resources and user
            List<IPM_Project_Resource__c> ipmProjRescourceList = IPM_TestFactory_Helper.createIPMProjectResourceList(false, 3); 
            for(Integer resourceCount = 0; resourceCount < ipmProjRescourceList.size(); resourceCount++){
                for(Integer prjCount = 0; prjCount < testProjList.size(); prjCount++){
                    
                    ipmProjRescourceList[resourceCount ].IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_BD;
                    ipmProjRescourceList[resourceCount ].IPM_User__c =prjResourceUser.Id;
                    ipmProjRescourceList[resourceCount ].IPM_Project__c = testProjList[prjCount].Id;
                }
            }
            insert ipmProjRescourceList;
            
            prjResourceUser.IsActive = false;
            update prjResourceUser;
        }
        return prjResourceUser;
    }
    
    /***********************************************************************************************************************************************************
	* @description To get unique user name
	**************************************************************************************************/
    public static String getUniqueUsername() {
        String orgId = UserInfo.getOrganizationId();
        String dateString = String.valueof(Datetime.now()).replace(BLANK_SPACE,EMPTY_STRING).replace(':',EMPTY_STRING).replace('-',EMPTY_STRING);
        Integer randomInt = Integer.valueOf(math.rint(math.random()*1000000));
        String uniqueName = orgId + dateString + randomInt;
        
        return (uniqueName + '@bosscard' + orgId + '.org');
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert project template
	**************************************************************************************************/
    public static IPM_Project_Template__c createIPMProjectTemplate(Boolean doInsert) {
        Map<String,Object> projTemMap =  new Map<String,Object>{'IPM_Template_Complexity__c' => FULL};
        IPM_Project_Template__c projTemplate = (IPM_Project_Template__c)IPM_TestFactory.createSObject(IPM_PROJECT_TEMPLATE,projTemMap,FALSE);
        if(doInsert) { 
            insert projTemplate;
        }
        return projTemplate;
    }   
    
    /***********************************************************************************************************************************************************
	* @description To insert document template
	**************************************************************************************************/
    public static IPM_Document_Template__c creteIPMDocumentTemplate(Boolean doInsert) {
        Map<String,Object> docTemMap =  new Map<String,Object>{IPM_DOCUMENT_TEMPLATE_NAME=> CHARTER_GATE_FULL, 'IPM_Document_Type__c' => IPM_ConstantUtils.FIELD_SUFFIX_CHARTER};
        IPM_Document_Template__c ipdoctem = (IPM_Document_Template__c)IPM_TestFactory.createSObject(IPM_DOCUMENT_TEMPLATE,docTemMap,FALSE);
        if(doInsert) { 
            insert ipdoctem;
        }
        return ipdoctem;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert  master section
	**************************************************************************************************/
    public static IPM_Section__c createIPMSection(Boolean doInsert) {
        Map<String,Object> sectMap =  new Map<String,Object>{IPM_SECTION_SEQUENCE=> IPM_ConstantUtils.IDEAS_SEQUENCE, 
            IPM_SECTION_Name => IDEA_GRAPHIC, 'IPM_Negotiable__c' => FALSE};
        IPM_Section__c secMast = (IPM_Section__c)IPM_TestFactory.createSObject('IPM_Section__c',sectMap,FALSE);
        if(doInsert) { 
            insert secMast;
        }
        return secMast;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert project list
	**************************************************************************************************/
    public static List<IPM_Project__c> insertIPMProjectList()
    {
        projectList = new List<IPM_Project__c>();
        
        for(Integer i = 1; i <= 3; i++)
        {
            Map<String,Object> projMap =  new Map<String,Object>{NAME => 'test'+ i,IPM_PROJECT_NAME=>'test' + i,
                IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => GCLT_RCLT,
                IPM_TARGET_LAUNCH_DATES => System.today().addMonths(6),IPM_PROJECT_SPAN=>C_GLOBAL, 
                IPM_PROJECT_LEADER => UserInfo.getUserId(),IPM_COMPANYCARDTEXT => 'Global Company Card',
                BRAND_POS => DIRT_IS_GOOD,IPM_PROJECT_TYPE => ORIGINAL_PROJECTYPE,
                IPM_PROJECT_SUB_TYPE => 'Innovation/Renovation',IPM_PHASE=> IDEAS,IPM_SOURCEPROJECT_TYPE => ORIGINAL_PROJECTYPE,
                'Sustainability_Period__c' => '3',IPM_CATEGORY_TEXT => HOUSEHOLDCARE,IPM_CHILD_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL};
            IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,true); 
            projectList.add(projectRecord);
        }
        
        insert projectList;
        
        projectList[0].IPMProject_Span__c = C_GLOBAL;
        projectList[1].IPMProject_Span__c = REGIONAL;
        projectList[1].IPM_Parent_Project__c = projectList[0].id;
        projectList[2].IPMProject_Span__c = LOCAL_SPAN;
        projectList[2].IPM_Parent_Project__c =  projectList[0].id;
        projectList[0].Sustainability_Period__c = THREE;
        projectList[1].Sustainability_Period__c = THREE;
        projectList[2].Sustainability_Period__c = THREE;
        update projectList;
        return projectList;
        
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert and get user list
	**************************************************************************************************/
    public static List<User> createUserList(){
        
        User globalUser = IPM_TestFactory_Helper.createUserAdmin(false);
        globalUser.email = 'globalUser@unilever.test.com';
        
        User regionalUser = IPM_TestFactory_Helper.createUserAdmin(false);
        regionalUser.email = 'regionalUser@unilever.test.com';
        
        User localUser = IPM_TestFactory_Helper.createUserAdmin(false);
        
        List<User> userList = new List<User>{globalUser,regionalUser,localUser};
        insert userList;
        
        // Create Company Card information 
        IPM_Company_Card__c globalCompanyCard = IPM_TestFactory_Helper.createGlobalCompanyCard(false);
        IPM_Company_Card__c regionalCompanyCard = IPM_TestFactory_Helper.createRegionalCompanyCard(false);
        IPM_Company_Card__c localCompanyCard = IPM_TestFactory_Helper.createLocalCompanyCard(false);
        
        List<IPM_Company_Card__c> companyCardList = new List<IPM_Company_Card__c>{globalCompanyCard,regionalCompanyCard,localCompanyCard};
        insert companyCardList;
        
        //  Create User profile Information
        Map<String,List<Object>> IPMUserProfileMap =  new Map<String,List<Object>>{
            'IPM_Business_Partner__c' => new List<Object>{false,false,false},
            'IPM_Category__c' => new List<Object>{HOUSEHOLDCARE,HOUSEHOLDCARE,HOUSEHOLDCARE},
            IPM_CENTRAL_TEAM => new List<Object>{false,false,false},
            'IPM_Finance_Member__c' => new List<Object>{false,false,false},
            'IPM_GateKeeper__c' => new List<Object>{false,false,false},
            'IPM_Project_Leader__c' => new List<Object>{false,false,false},
            'IPM_User_Category__c' => new List<Object>{IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT,IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT,IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT},
            'IPM_User_Function__c' => new List<Object>{PROJECT_LEADER,PROJECT_LEADER,PROJECT_LEADER},
            IPM_USER_ROLE => new List<Object>{'MO','MO','MO'},
            IPM_WORK_LEVEL => new List<Object>{'WL1','WL1','WL1'},
            'IPM_Company_Card__c' => new List<Object>{companyCardList[0],companyCardList[1],companyCardList[2]},
            'IPM_User__c' => new List<Object>{userList[0].Id,userList[1].Id,userList[2].Id}
        };
        
        List<IPM_User_Profile__c> userProfileList = (List<IPM_User_Profile__c>)IPM_TestFactory.createSObjectList('IPM_User_Profile__c',IPMUserProfileMap,true);
        
        return userList;
    }
    
    /***********************************************************************************************************************************************************
	* @description For Regional Original Project Data
	**************************************************************************************************/
    
    public static List<IPM_Project__c> projectSetUpRegional(Integer projectCount,User userObj) 
    {
        // Create Company Card information 
        List<IPM_Company_Card__c> companyCardList = [Select Id from IPM_Company_Card__c where Name= 'Test Regional Company Card'];

        List<IPM_Project__c> projectSetupList = new List<IPM_Project__c>();
        
        // Create project for assignment.
        projectSetupList = IPM_TestFactory_Helper.createRegionalProjectList(false, projectCount);
        for(IPM_Project__c project : projectSetupList)
        {
            project.IPM_Company_Card__c = companyCardList[0].Id;
            project.IPM_Project_Gatekeeper__c = UserInfo.getUserId();
            project.IPM_Project_Leader__c = userObj.Id;
            project.IPM_Category_Group__c = HOUSEHOLDCARE;
            project.Project_External_ID__c = null; 
        }
        
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = false;

        // At this point Async process kicks in and starts creating Related Object information.
        return projectSetupList;  
    }
    
    
    /***********************************************************************************************************************************************************
	* @description For Regional Original Project Data
	**************************************************************************************************/
    
    public static List<IPM_Project__c> projectSetUpOperational(Integer projectCount,User userObj,String scope,String companyCard)  
    {
        // Create Company Card information    
        List<IPM_Company_Card__c> companyCardList = [Select Id from IPM_Company_Card__c where Name= :companyCard ];

        List<IPM_Project__c> projectSetupList = new List<IPM_Project__c>();
        
        // Create project for assignment.
        projectSetupList = IPM_TestFactory_Helper.createOperationalProjectList(false, projectCount, scope);
        for(IPM_Project__c project : projectSetupList)
        {
            project.IPM_Company_Card__c = companyCardList[0].Id;
            project.IPM_Project_Gatekeeper__c = UserInfo.getUserId();
            project.IPM_Project_Leader__c = userObj.Id;
            project.IPM_Category_Group__c = HOUSEHOLDCARE;
            project.Project_External_ID__c = null; 
        }
        
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = false;

        // At this point Async process kicks in and starts creating Related Object information.
        return projectSetupList;  
    }
    
    /***********************************************************************************************************************************************************
	* @description For Global Original Project Data 
	**************************************************************************************************/
    
    public static List<IPM_Project__c> projectSetUp(Integer projectCount,User userObj) 
    { 
        List<IPM_Project__c> projectSetupList = new List<IPM_Project__c>();

        // Create project for assignment.
        projectSetupList = IPM_TestFactory_Helper.createOriginalProjectList(false, projectCount);
        List<IPM_Company_Card__c> companyCard = [Select Id from IPM_Company_Card__c where Name= 'Test Company Card'];

        for(IPM_Project__c project : projectSetupList)
        {
            project.IPM_Company_Card__c = companyCard[0].Id;
            project.IPM_Project_Gatekeeper__c = UserInfo.getUserId();
            project.IPM_Project_Leader__c = userObj.Id;
            project.IPM_Category_Group__c = HOUSEHOLDCARE;
            project.Project_External_ID__c = null; 
        }
        
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = false;
        
        // At this point Async process kicks in and starts creating Related Object information.
        return projectSetupList;  
    }
    
    /***********************************************************************************************************************************************************
	* @description To change the phase of global project
	**************************************************************************************************/
    public static List<IPM_Project__c> initiateProjectPhaseChange(List<Id> listprojectId,User userObj)
    {
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = false;
        IPM_ProjectOwnerChangeQueue.PROJECT_QUEUE_CONTEXT_STARTED = false;
        
        System.runAs(userObj)
        {
            List<IPM_Project__c>  projectListRegional = [Select Id,Name,IPM_Phase__c,(Select Id from Project_Documents__r),(Select Id,Name,recordTypeId,IPM_Project_Job_Status__c from IPM_Project_Rollout__r) from IPM_Project__c where Id in:listprojectId for update];
            
            List<IPM_Project_Rollout__c> projectRolloutList = new List<IPM_Project_Rollout__c>();
            for(IPM_Project__c project : projectListRegional)
            {
                project.IPM_Phase__c = IPM_ConstantUtils.PHASE_FEASIBILITY;
                
                for(IPM_Project_Rollout__c rollout : project.IPM_Project_Rollout__r)
                {
                    if(rollout.recordTypeId == IPM_TestFactory_Helper.REGIONAL_ROLLOUT_RECTYPE)
                    {
                        rollout.IPM_Project_Job_Status__c = IPM_ConstantUtils.JOB_STATUS_ELIGIBLE;
                        rollout.IPM_RolloutJobType__c = IPM_ConstantUtils.JOBTYPE_PROJECTCREATION_PHASECHANGE;
                        projectRolloutList.add(rollout);
                    }
                }
            }
            
            update projectRolloutList;
            
            return projectListRegional;
        }
        
        return null;
    }
    
    /***********************************************************************************************************************************************************
	* @description To change the phase of regional project
	**************************************************************************************************/
    public static List<IPM_Project__c> projectPhaseChangeRegionalLocal(List<Id> listprojectId,User userObj)
    {
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = false;
        IPM_ProjectOwnerChangeQueue.PROJECT_QUEUE_CONTEXT_STARTED = false;
        
        System.runAs(userObj)
        {
            List<IPM_Project__c>  projectListLocal = [Select Id,Name,IPM_Phase__c,(Select Id from Project_Documents__r),(Select Id,Name,recordTypeId,IPM_Project_Job_Status__c from IPM_Project_Rollout__r) from IPM_Project__c where Id in:listprojectId for update];
            
            List<IPM_Project_Rollout__c> projectRolloutList = new List<IPM_Project_Rollout__c>();
            for(IPM_Project__c project : projectListLocal)
            {
                project.IPM_Phase__c = IPM_ConstantUtils.PHASE_FEASIBILITY;
                
                for(IPM_Project_Rollout__c rollout : project.IPM_Project_Rollout__r)
                {
                    if(rollout.recordTypeId == IPM_TestFactory_Helper.LOCAL_ROLLOUT_RECTYPE)
                    {
                        rollout.IPM_Project_Job_Status__c = IPM_ConstantUtils.JOB_STATUS_ELIGIBLE;
                        rollout.IPM_RolloutJobType__c = IPM_ConstantUtils.JOBTYPE_PROJECTCREATION_PHASECHANGE;
                        projectRolloutList.add(rollout);
                    }
                }
            }
            
            update projectRolloutList;
            
            return projectListLocal;
        }
        
        return null;
    }
    
    /***********************************************************************************************************************************************************
	* @description To initiate Phase change of Regional Original Project to generate the local rollouts
	**************************************************************************************************/
    
    public static List<IPM_Project__c> initiateRegionalProjectPhaseChange(List<Id> listprojectId,User userObj)
    {
        System.runAs(userObj)
        {
            List<IPM_Project__c>  projectListRegional = [Select Id,Name,IPM_Phase__c,(Select Id from Project_Documents__r),(Select Id,Name,recordTypeId,IPM_Project_Job_Status__c from IPM_Project_Rollout__r) from IPM_Project__c where Id in:listprojectId for update];
            
            List<IPM_Project_Rollout__c> projectRolloutList = new List<IPM_Project_Rollout__c>();
            for(IPM_Project__c project : projectListRegional)
            {
                project.IPM_Phase__c = IPM_ConstantUtils.FEASIBILITY_PHASE;
                
                for(IPM_Project_Rollout__c rollout : project.IPM_Project_Rollout__r)
                {
                    if(rollout.recordTypeId == IPM_TestFactory_Helper.LOCAL_ROLLOUT_RECTYPE)
                    {
                        rollout.IPM_Project_Job_Status__c = IPM_ConstantUtils.JOB_STATUS_ELIGIBLE;
                        rollout.IPM_RolloutJobType__c = IPM_ConstantUtils.JOBTYPE_PROJECTCREATION_PHASECHANGE;
                        projectRolloutList.add(rollout);
                    }
                }
            }
            
            update projectRolloutList;
            
            return projectListRegional;
        }
        
        return null;
    }
    
    /***********************************************************************************************************************************************************
	* @description To get regional project
	**************************************************************************************************/
    public static Map<Id,List<IPM_Project__c>> getRegionalProjects(List<Id> listprojectId)
    {
        Map<Id,List<IPM_Project__c>> parentToChildProjectMap = new Map<Id,List<IPM_Project__c>>(); 
        Id regionalRecordType = IPM_TestFactory_Helper.REGIONAL_ROLLOUT_RECTYPE;
        
        Map<Id,IPM_Project__c> globalProjectMap = new Map<Id,IPM_Project__c>([Select Id,Name,IPM_Phase__c, IPM_GateKeeping_Model__c, (Select Id from Project_Documents__r),
        (Select Id,Name,IPM_Project__c from IPM_Project_Rollout__r where recordTypeId = :regionalRecordType ), 
        (Select Id,Name,IPM_Phase__c from IPM_Projects__r),(Select Id,Name from IPM_Milestones__r) from IPM_Project__c where Id in:listprojectId]);
        
        // Validate that project has moved to feasibility Phase.
        for(IPM_Project__c project : globalProjectMap.values())
        {
            // Regional Rollous should be converted to Regional Projects at this point.
             System.assertEquals(project.IPM_Project_Rollout__r.size(),project.IPM_Projects__r.size());
            
             System.assertEquals(project.IPM_Phase__c,IPM_ConstantUtils.PHASE_FEASIBILITY);
            // Document count should become 2. Charter and Contract.
            if(project.IPM_Gatekeeping_model__c == GCLT_RCLT)
            {
                System.assertEquals(project.Project_Documents__r.size(),2);
            }
            else
            {
                System.assertEquals(project.Project_Documents__r.size(),1); 
            }
            
            // For GCLT & RCLT Model,Contract document Would be available  at Regional Level.   
            for(IPM_Project__c regionalProject : project.IPM_Projects__r)
            {
                System.assertEquals(regionalProject.IPM_Phase__c,IPM_ConstantUtils.PHASE_FEASIBILITY);        
            }
            
            parentToChildProjectMap.put(project.Id,project.IPM_Projects__r); 
        }
        return parentToChildProjectMap;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert financial list
	**************************************************************************************************/
    public static List<IPM_Financial__c> insertIPMFinancialList(Boolean DOinsert){ 
        String strRecordTypeId=[Select Id From RecordType Where SobjectType='IPM_Financial__c' and Name='Default'].Id;
        String strRecordTypeConId=[Select Id From RecordType Where SobjectType='IPM_Financial__c' and Name='Consolidated'].Id;
        Map<String,List<Object>> IPMProjectMap =  new Map<String,List<Object>>{
            IPM_PROJECT_NAME => new List<Object>{'test1','test2', 'test3'},
            RECORD_TYPE_ID => new List<Object>{strRecordTypeId,strRecordTypeConId, strRecordTypeId},
            'Parent_Project__c' => new List<Object>{projectList[0].Id,projectList[1].Id, projectList[2].Id},
            TARGET_LAUNCH_DATE => new List<Object>{System.today()+100000,System.today()+500000, System.today()+300000},
            'Financial_External_ID__c' => new List<Object>{'globalMCOName','RegionalMCOName','localMCOName'},
            'Project_Sustainability_Period__c' =>new List<Object>{projectList[0].Sustainability_Period__c,projectList[1].Sustainability_Period__c,projectList[2].Sustainability_Period__c}
        };
        
        finList = (List<IPM_Financial__c>)IPM_TestFactory.createSObjectList('IPM_Financial__c',IPMProjectMap,true); 
        finList[0].Target_Launch_Date__c = System.today()+100000;
        finList[1].Target_Launch_Date__c = System.today()+100000;
        finList[2].Target_Launch_Date__c = System.today()+100000;
        finList[0].Financial_External_ID__c = 'globalMCOName';
        finList[1].Financial_External_ID__c = 'RegionalMCOName';
        finList[2].Financial_External_ID__c = 'LocalalMCOName';
        insert finList;
        return finList;
    }
    
    /***********************************************************************************************************************************************************
    * @description To insert financial year
    *************************************************************************************************/
    public static List<IPM_Financial_Year__c> insertIPMFinancialYearList(){        
        IPM_Financial_Year__c finYear1 = IPM_TestFactory_Helper.createIPMFinancialYear(false);
        finYear1.IPM_Financial__c= finList[0].Id;
        finYear1.Name = 'Y1';
        finYear1.year__c = INNOVATION;
        finYear1.PL_type__C = 'Gross';
        finYear.add(finYear1);
        IPM_Financial_Year__c finYear2 = IPM_TestFactory_Helper.createIPMFinancialYear(false);
        finYear2.IPM_Financial__c= finList[1].Id;
        finYear2.Name = 'Y1';
        finYear2.year__c = 'Calendar';
        finYear2.PL_type__C = 'Incremental';
        finYear.add(finYear2);
        IPM_Financial_Year__c finYear3 = IPM_TestFactory_Helper.createIPMFinancialYear(false);
        finYear3.IPM_Financial__c= finList[1].Id;
        finYear3.Name = 'Y0';
        finYear3.year__c = INNOVATION;
        finYear.add(finYear3);
        IPM_Financial_Year__c finYear4 = IPM_TestFactory_Helper.createIPMFinancialYear(false);
        finYear4.IPM_Financial__c= finList[2].Id;
        finYear4.Name = 'Y0';
        finYear4.year__c = INNOVATION;
        finYear.add(finYear4);
        // finYear = (List<IPM_Financial_Year__c>)IPM_TestFactory.createSObjectList('IPM_Financial_Year__c',IPMProjectMap,true);
        insert finYear;
        return finYear;
    }
    
    /***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data
	**************************************************************************************************/
    
    public static List<IPM_Project__c> createIPMProjectList(Boolean doInsert, Integer listSize){
        
        List<IPM_Project__c> testIPMProjList = new List<IPM_Project__c>();

        for(Integer i = 1; i <= listSize; i++){
            
            Map<String,Object> projMap =  new Map<String,Object>{NAME => TEST_COMMENTS + i,IPM_PROJECT_NAME=>TEST_COMMENTS + i,
                IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => GCLT_RCLT,
                IPM_TARGET_LAUNCH_DATES => System.today().addMonths(6), IPM_PROJECT_LEADER => UserInfo.getUserId(), IPM_PHASE=> IPM_ConstantUtils.PHASE_IDEAS};
            IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,TRUE);
            testIPMProjList.add(projectRecord);
            
            
        }
        
        if(doInsert) { 
            insert testIPMProjList;
        }
        return testIPMProjList;
    }
    
    /***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data 
	**************************************************************************************************/
    
    public static List<IPM_Project__c> createIPMProjectListUser(Boolean doInsert, Integer listSize){
        
        List<IPM_Project__c> testIPMProjList = new List<IPM_Project__c>();

        for(Integer i = 1; i <= listSize; i++){
            
            Map<String,Object> projMap =  new Map<String,Object>{NAME => 'IPMProjectName' + i,IPM_PROJECT_NAME=>'IPMProjectName' + i,
                IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => GCLT_RCLT,
                IPM_TARGET_LAUNCH_DATES => System.today().addMonths(6), IPM_PROJECT_LEADER => UserInfo.getUserId(), IPM_PHASE=> IPM_ConstantUtils.PHASE_IDEAS};
            IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,TRUE);
            testIPMProjList.add(projectRecord);
            
            
        }
        
        if(doInsert) { 
            insert testIPMProjList;
        }
        return testIPMProjList;
    }
    
    
	/***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data 
	**************************************************************************************************/
    
    public static List<IPM_Project__c> createOperationalProjectList(Boolean doInsert, Integer listSize,String scope){
        
        List<IPM_Project__c> testIPMProjList = new List<IPM_Project__c>();
        for(Integer i = 1; i <= listSize; i++){ 
            Map<String,Object> projMap =  new Map<String,Object>{NAME => TEST_OP_COMMENTS + scope + i,IPM_PROJECT_NAME=>TEST_REG_COMMENTS + scope + i,
                IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => 'RCLT',
                IPM_TARGET_LAUNCH_DATES => System.today().addMonths(6),IPM_PROJECT_SPAN=>scope , 
                IPM_PROJECT_LEADER => UserInfo.getUserId(),IPM_COMPANYCARDTEXT => scope +' Company Card',
                BRAND_POS => DIRT_IS_GOOD,IPM_PROJECT_TYPE => OPERATIONAL_PROJECTYPE,
                IPM_PROJECT_SUB_TYPE => OPERATIONAL_PROJECTYPE,IPM_PHASE=> IDEAS,IPM_SOURCEPROJECT_TYPE => OPERATIONAL_PROJECTYPE,
                IPM_CATEGORY_TEXT => HOUSEHOLDCARE,IPM_CHILD_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL};
            IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,TRUE);
            testIPMProjList.add(projectRecord);
        }
        
        if(doInsert) { 
            insert testIPMProjList;
        }
        return testIPMProjList;
    }
    
    
    /***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data 
	**************************************************************************************************/
    
    public static List<IPM_Project__c> createRegionalProjectList(Boolean doInsert, Integer listSize){
        
        List<IPM_Project__c> testIPMProjList = new List<IPM_Project__c>();
        for(Integer i = 1; i <= listSize; i++){
            Map<String,Object> projMap =  new Map<String,Object>{NAME => TEST_REG_COMMENTS + i,IPM_PROJECT_NAME=>TEST_REG_COMMENTS + i,
                IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => 'RCLT',
                IPM_TARGET_LAUNCH_DATES => System.today().addMonths(6),IPM_PROJECT_SPAN=>REGIONAL, 
                IPM_PROJECT_LEADER => UserInfo.getUserId(),IPM_COMPANYCARDTEXT => 'Regional Company Card',
                BRAND_POS => DIRT_IS_GOOD,IPM_PROJECT_TYPE => ORIGINAL_PROJECTYPE,
                IPM_PROJECT_SUB_TYPE => 'Innovation/Renovation',IPM_PHASE=> IDEAS,IPM_SOURCEPROJECT_TYPE => ORIGINAL_PROJECTYPE,
                IPM_CATEGORY_TEXT => HOUSEHOLDCARE,IPM_CHILD_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL};
            IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,TRUE);
            testIPMProjList.add(projectRecord);
        }
        
        if(doInsert) { 
            insert testIPMProjList;
        }
        return testIPMProjList;
    }
    
    /***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data 
	**************************************************************************************************/
    
    
    public static List<IPM_Project__c> createOriginalProjectList(Boolean doInsert, Integer listSize){
        
        List<IPM_Project__c> testIPMProjList = new List<IPM_Project__c>();
        for(Integer i = 1; i <= listSize; i++){
            Map<String,Object> projMap =  new Map<String,Object>{NAME => TEST_COMMENTS + i,IPM_PROJECT_NAME=>TEST_COMMENTS + i,
                IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => GCLT_RCLT,
                IPM_TARGET_LAUNCH_DATES => System.today().addMonths(6),IPM_PROJECT_SPAN=>C_GLOBAL, 
                IPM_PROJECT_LEADER => UserInfo.getUserId(),IPM_COMPANYCARDTEXT => 'Global Company Card',
                BRAND_POS => DIRT_IS_GOOD,IPM_PROJECT_TYPE => ORIGINAL_PROJECTYPE,
                IPM_PROJECT_SUB_TYPE => 'Innovation/Renovation',IPM_PHASE=> IDEAS,IPM_SOURCEPROJECT_TYPE => ORIGINAL_PROJECTYPE,
                'Sustainability_Period__c' => '3',IPM_CATEGORY_TEXT => HOUSEHOLDCARE,IPM_CHILD_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL};
            IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,TRUE);
            testIPMProjList.add(projectRecord);
        }
        
        if(doInsert) { 
            insert testIPMProjList;
        }
        return testIPMProjList;
    } 
    
    /***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data 
	**************************************************************************************************/
    public static IPM_Project__c createIPMProject(Boolean doInsert){
        Map<String,Object> projMap =  new Map<String,Object>{NAME => TEST_COMMENTS,
            IPM_COMPLEXITY =>IPM_ConstantUtils.COMPLEXITY_FULL, IPM_GATEKEEPING_MODEL => GCLT_RCLT};
        IPM_Project__c projectRecord = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,projMap,TRUE);
        if(doInsert) { 
            insert projectRecord;
        }
        return projectRecord;
    }
    
    /***********************************************************************************************************************************************************
	* @description IPM Project List Sample Data 
	**************************************************************************************************/
    public static IPM_Project_Rollout__c createIPMProjectRollout(Boolean doInsert) {
        Map<String,Object> projRollOutMap =  new Map<String,Object>{RECORD_TYPE_ID=> REGIONAL_ROLLOUT_RECTYPE ,
            IPM_ROLLOUT_PROJECT =>'TestComments_SEAA', MARKET_CLUSTER => 'SEAA',
            TARGET_LAUNCH_DATE =>date.today()
        };
        IPM_Project_Rollout__c projRollOut = (IPM_Project_Rollout__c)IPM_TestFactory.createSObject(ROLLOUT_OBJECT,projRollOutMap,FALSE);
        if(doInsert) {
            insert projRollOut;
        }
        return projRollOut;
    }
    
    /***********************************************************************************************************************************************************
	* @description To create regional rollout list
	**************************************************************************************************/
    public static List<IPM_Project_Rollout__c> createRegionalRolloutList(Boolean doInsert,List<IPM_Project__c> pProjectList,List<User> projectLeaders) 
    {
        Map<String,List<Object>> regionalRolloutMap = new Map<String,List<Object>>
        {
            IPM_ROLLOUT_PROJECT => new List<String>(),RECORD_TYPE_ID => new List<object>(),MARKET_CLUSTER => new List<String>(),
            MARKET_CLUSTER_NAME => new List<String>(),TARGET_LAUNCH_DATE => new List<object>(),IPM_ROLLOUT_PLAN => new List<object>(),
            IPM_ROLLOUT_TYPE => new List<object>(),IPM_REGIONAL_PL_TEXT => new List<object>(),IPM_REGIONAL_PL => new List<Id>(),
            IPM_PROJECT => new List<Id>(),IS_ACTIVE => new List<object>()
        };
        
        Date sixMonthsLater = date.today().addMonths(6);
        
        Id regionalRecordType = Schema.SObjectType.IPM_Project_Rollout__c.RecordTypeInfosByName.get(IPM_ConstantUtils.REGIONAL_ROLLOUT_RT).RecordTypeId;
        
        for(Integer counter=0;counter<pProjectList.size();counter++)
        {
            regionalRolloutMap.get(IPM_ROLLOUT_PROJECT).add(pProjectList[counter].IPM_Project_Name__c+'_AFR');
            regionalRolloutMap.get(IPM_ROLLOUT_PROJECT).add(pProjectList[counter].IPM_Project_Name__c+'_LA');
            
            regionalRolloutMap.get(MARKET_CLUSTER).add('GEO0060');
            regionalRolloutMap.get(MARKET_CLUSTER).add('GEO0005');
            
            regionalRolloutMap.get(MARKET_CLUSTER_NAME).add(AFRICA);
            regionalRolloutMap.get(MARKET_CLUSTER_NAME).add('Latin America');
            
            regionalRolloutMap.get(TARGET_LAUNCH_DATE).addAll(new List<Object>{sixMonthsLater,sixMonthsLater});
            
            regionalRolloutMap.get(IPM_ROLLOUT_PLAN).addAll(new List<Object>{REGIONAL,REGIONAL});
            
            regionalRolloutMap.get(IPM_ROLLOUT_TYPE).addAll(new List<Object>{'Rollout','Rollout'});
            
            regionalRolloutMap.get(RECORD_TYPE_ID).addAll(new List<Object>{regionalRecordType,regionalRecordType});
            
            regionalRolloutMap.get(IPM_REGIONAL_PL).addAll(new List<Object>{projectLeaders[counter].Id,projectLeaders[counter].Id});
            
            regionalRolloutMap.get(IPM_REGIONAL_PL_TEXT).addAll(new List<Object>{projectLeaders[counter].Name,projectLeaders[counter].Name});
            
            regionalRolloutMap.get(IPM_PROJECT).addAll(new List<Object>{pProjectList[counter].Id,pProjectList[counter].Id});
            
            regionalRolloutMap.get(IS_ACTIVE).addAll(new List<Object>{true,true});
        }
        
        List<IPM_Project_Rollout__c> regionalRolloutList = (List<IPM_Project_Rollout__c>)IPM_TestFactory.createSObjectList(ROLLOUT_OBJECT,regionalRolloutMap,false);
        
        if(doInsert) {
            insert regionalRolloutList;
        }
        
        return regionalRolloutList;
    }
    
    /************************************************************************************************************************************************************
	* @description To create local rollout list
	**************************************************************************************************/
    public static List<IPM_Project_Rollout__c> createLocalRolloutsList(Boolean doInsert,Map<Id,List<IPM_Project_Rollout__c>> projectToRegionalRolloutMap,List<User> projectLeaders)
    {
        
        Map<String,List<Object>> localRolloutMap = new Map<String,List<Object>>
        {
            IPM_ROLLOUT_PROJECT => new List<String>(),MARKET_CLUSTER => new List<String>(),
            MARKET_CLUSTER_NAME => new List<String>(),TARGET_LAUNCH_DATE => new List<Object>(),IPM_ROLLOUT_PLAN => new List<String>(),
            IPM_ROLLOUT_TYPE => new List<String>(),IPM_REGIONAL_PL_TEXT => new List<String>(),IPM_REGIONAL_PL => new List<Id>(),
            IPM_PROJECT => new List<Id>(),TYPE_FIELD => new List<String>(),'Regional_Rollout__c' => new List<Id>(),MCO_NAME => new List<String>(),
            IPM_STATUS => new List<String>(),S_MCO => new List<String>(),RECORD_TYPE_ID => new List<ID>(),IS_ACTIVE => new List<object>()
        };
        
        Id localRecordType = Schema.SObjectType.IPM_Project_Rollout__c.RecordTypeInfosByName.get(IPM_ConstantUtils.LOCAL_ROLLOUT_RT).RecordTypeId;
        
        for(Id projectId : projectToRegionalRolloutMap.keySet())
        {   
            for(IPM_Project_Rollout__c projectRollout : projectToRegionalRolloutMap.get(projectId))
            {
                if(projectRollout.IPM_Rollout_Project__c.contains('AFR'))
                {
                    localRolloutMap.get(IPM_ROLLOUT_PROJECT).add(projectRollout.IPM_Rollout_Project__c+'_UMCA');
                    localRolloutMap.get(S_MCO).add('LV4_GEO0085');
                    localRolloutMap.get(MCO_NAME).add(AFRICA);
                    localRolloutMap.get(MARKET_CLUSTER_NAME).add('Africa Emerging Markets');
                }
                else if(projectRollout.IPM_Rollout_Project__c.contains('LA'))
                {
                    localRolloutMap.get(IPM_ROLLOUT_PROJECT).add(projectRollout.IPM_Rollout_Project__c+'_BR'); 
                    localRolloutMap.get(S_MCO).add('LV4_BR');
                    localRolloutMap.get(MCO_NAME).add('Brazil');
                    localRolloutMap.get(MARKET_CLUSTER_NAME).add('Latin America');
                }
                
                localRolloutMap.get(RECORD_TYPE_ID).add(localRecordType);
                
                localRolloutMap.get(MARKET_CLUSTER).add(projectRollout.Market_Cluster__c); 

                localRolloutMap.get(IPM_ROLLOUT_TYPE).add(projectRollout.IPM_Rollout_Type__c);
                localRolloutMap.get(TARGET_LAUNCH_DATE).add(projectRollout.Target_Launch_Date__c);
                localRolloutMap.get(IPM_ROLLOUT_PLAN).add('Local');
                localRolloutMap.get(IS_ACTIVE).add(true);
                localRolloutMap.get(TYPE_FIELD).add('MCO');
                localRolloutMap.get(IPM_STATUS).add('Leader');
                localRolloutMap.get('Regional_Rollout__c').add(projectRollout.Id);
                localRolloutMap.get(IPM_PROJECT).add(projectId);
            }
        }
        
        List<IPM_Project_Rollout__c> localRolloutList = (List<IPM_Project_Rollout__c>)IPM_TestFactory.createSObjectList(ROLLOUT_OBJECT,localRolloutMap,false);
        
        if(doInsert) {
            insert localRolloutList;
        }
        return localRolloutList;
    }   
    
     /************************************************************************************************************************************************************
    * @description To create local rollout list
    **************************************************************************************************/
    public static List<IPM_Project_Rollout__c> createLocalRolloutsOriginalList(Boolean doInsert,List<IPM_Project__c> regionalProjectSet,List<User> projectLeaders)
    {
        
        Map<String,List<Object>> localRolloutMap = new Map<String,List<Object>>
        {
            IPM_ROLLOUT_PROJECT => new List<String>(),MARKET_CLUSTER => new List<String>(),
            MARKET_CLUSTER_NAME => new List<String>(),TARGET_LAUNCH_DATE => new List<Object>(),IPM_ROLLOUT_PLAN => new List<String>(),
            IPM_ROLLOUT_TYPE => new List<String>(),IPM_REGIONAL_PL_TEXT => new List<String>(),IPM_REGIONAL_PL => new List<Id>(),
            TYPE_FIELD => new List<String>(),MCO_NAME => new List<String>(),
            IPM_STATUS => new List<String>(),S_MCO => new List<String>(),RECORD_TYPE_ID => new List<ID>(),IS_ACTIVE => new List<object>(),
            'Regional_Project__c' => new List<Object>()
        };
        
        Id localRecordType = Schema.SObjectType.IPM_Project_Rollout__c.RecordTypeInfosByName.get(IPM_ConstantUtils.LOCAL_ROLLOUT_RT).RecordTypeId;
        
        
        for(IPM_Project__c regionalProject : regionalProjectSet)
        {
            localRolloutMap.get(IPM_ROLLOUT_PROJECT).add(regionalProject.IPM_Project_Name__c+'_UMCA');
            localRolloutMap.get(S_MCO).add('LV4_GEO0085');
            localRolloutMap.get(MCO_NAME).add(AFRICA);
            localRolloutMap.get(MARKET_CLUSTER_NAME).add('Africa Emerging Markets');
            localRolloutMap.get(RECORD_TYPE_ID).add(localRecordType);
            localRolloutMap.get(MARKET_CLUSTER).add(AFRICA); 
            localRolloutMap.get(IPM_ROLLOUT_TYPE).add('Rollout');
            localRolloutMap.get(TARGET_LAUNCH_DATE).add(System.today() + 300);
            localRolloutMap.get(IPM_ROLLOUT_PLAN).add('Local');
            localRolloutMap.get(IS_ACTIVE).add(true);
            localRolloutMap.get(TYPE_FIELD).add('MCO');
            localRolloutMap.get(IPM_STATUS).add('Leader');
            localRolloutMap.get('Regional_Project__c').add(regionalProject.Id);
        }
        
        List<IPM_Project_Rollout__c> localRolloutList = (List<IPM_Project_Rollout__c>)IPM_TestFactory.createSObjectList(ROLLOUT_OBJECT,localRolloutMap,false);
        
        if(doInsert) {
            insert localRolloutList;
        }
        return localRolloutList;
    }   
     
    
    /***********************************************************************************************************************************************************
	* @description Sample IPMProjectDocument list Data
	**************************************************************************************************/
    
    public static List<IPM_Project_Document__c> createIPMProjectDocumentList(Boolean doInsert, Integer listSize) {
        
        List<IPM_Project_Document__c> ipmProjDocTestList = new List<IPM_Project_Document__c>();
        
        for(Integer i = 0; i < listSize; i++ ){
            Map<String,Object> projDocMap =  new Map<String,Object>{NAME => 'Test Doc' + i, 'IPM_GateDocuments__c' => IPM_ConstantUtils.CHARTER_GATE, 
                'IPM_Contract_GateKeeper_Model__c' => GCLT_RCLT};
            IPM_Project_Document__c projDocument = (IPM_Project_Document__c)IPM_TestFactory.createSObject('IPM_Project_Document__c',projDocMap,FALSE);
            ipmProjDocTestList.add(projDocument);
        }   
        if(doInsert) { 
            insert ipmProjDocTestList;
        }
        return ipmProjDocTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert project document
	**************************************************************************************************/
    public static IPM_Project_Document__c createIPMProjectDocument(Boolean doInsert) {
        Map<String,Object> projDocMap =  new Map<String,Object>{'IPM_GateDocuments__c' => IPM_ConstantUtils.CHARTER_GATE, 
            'IPM_Contract_GateKeeper_Model__c' =>GCLT_RCLT};
        IPM_Project_Document__c projDocument = (IPM_Project_Document__c)IPM_TestFactory.createSObject('IPM_Project_Document__c',projDocMap,FALSE);
        if(doInsert) { 
            insert projDocument;
        }
        return projDocument;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample IPMProjectDocumentSection list Data
	**************************************************************************************************/
    public static List<IPM_Project_Document_Section__c> createIPMProjectDocumentSectionList(Boolean doInsert, Integer listSize) {
        
        List<IPM_Project_Document_Section__c> impProjDocSectionTestList = new List<IPM_Project_Document_Section__c>();        
        for(Integer i = 0; i < listSize; i++){
            Map<String,Object> projDocSecMap =  new Map<String,Object>{IPM_SECTION_Name =>IDEA_GRAPHIC,
                'IPM_Default_Section__c' => True};
            IPM_Project_Document_Section__c pojDocSection = (IPM_Project_Document_Section__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section__c'
            ,projDocSecMap,FALSE);
            impProjDocSectionTestList.add(pojDocSection);
        }
        
        if(doInsert) { 
            insert impProjDocSectionTestList;
        }
        return impProjDocSectionTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert IPMProjectDocumentSection 
	**************************************************************************************************/
    public static IPM_Project_Document_Section__c createIPMProjectDocumentSection(Boolean doInsert) {
        Map<String,Object> projDocSecMap =  new Map<String,Object>{IPM_SECTION_Name =>IDEA_GRAPHIC,
            'IPM_Default_Section__c' => True};
        IPM_Project_Document_Section__c pojDocSection = (IPM_Project_Document_Section__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section__c'
        ,projDocSecMap,FALSE);
        if(doInsert) { 
            insert pojDocSection;
        }
        return pojDocSection;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert IPMProjectDocumentSectionContent
	**************************************************************************************************/
    public static IPM_Project_Document_Section_Content__c createIPMProjectDocumentSectionContent(Boolean doInsert) {
        Map<String,Object> projDocSecConMap =  new Map<String,Object>{NAME => 'Test Document Section'};
        IPM_Project_Document_Section_Content__c projDocSecCon = (IPM_Project_Document_Section_Content__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section_Content__c'
        ,projDocSecConMap,false);
        if(doInsert) { 
            insert projDocSecCon;
        }
        return projDocSecCon;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert customer channer priority order
	**************************************************************************************************/
    public static IPM_Customer_Channel_Priority_Order__c createIPMCustomerChannelPriorityOrder(Boolean doInsert) {
        Map<String,Object> iccPOMap =  new Map<String,Object>{NAME => 'HyperMarket','Priority_Order_Value__c'=>STRINGVALUE_1};
        IPM_Customer_Channel_Priority_Order__c iccPO = (IPM_Customer_Channel_Priority_Order__c)IPM_TestFactory.createSObject('IPM_Customer_Channel_Priority_Order__c'
        ,iccPOMap,false);
        if(doInsert) { 
            insert iccPO;
        }
        return iccPO;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert financial consolidated
	**************************************************************************************************/
    public static IPM_Financial__c createIPMFinancial(Boolean doInsert) {
        Map<String,Object> finConMap =  new Map<String,Object>{'Volume_Unit__c'=>'Total Tons','Financial_External_ID__c'=>'TESTAPPROVERCL_CONSOLIDATED',
            TARGET_LAUNCH_DATE=>System.today(),'Status__c'=>'Not Started'};
        IPM_Financial__c finCon = (IPM_Financial__c)IPM_TestFactory.createSObject('IPM_Financial__c',finConMap,true);
        
        if(doInsert) { 
            insert finCon;
        }
        return finCon;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample List of IPM Bosscard Data 
	**************************************************************************************************/
    
    public static List<IPM_Bosscard__c> createIPMBosscardList(Boolean doInsert, Integer listSize) {
        
        List<IPM_Bosscard__c> ipmBosscardTestList = new List<IPM_Bosscard__c>();
        for(Integer i = 0; i < listSize; i++){
            Map<String,Object> bossCardMap =  new Map<String,Object>{'IPM_BosscardName__c' => 'TestBosscard'+i,'IPM_Assumptions__c' =>TEST_CONTENT,
                'IPM_Background__c'=>TEST_CONTENT,'IPM_Constraints__c' =>TEST_CONTENT,
                'IPM_Consumer_Need__c'=>TEST_CONTENT,'IPM_Deliverables__c'=>TEST_CONTENT,
                'IPM_Potential_Business_Opportunity__c'=>TEST_CONTENT,'IPM_Resources__c'=>TEST_CONTENT,
                'IPM_Scope__c'=>TEST_CONTENT,'IPM_IsSaved__c'=>true,
                BRAND_POS=>DIRT_IS_GOOD,'IPM_Target_Launch_Date__c'=>'20/10/2020',
                'IPM_Is_Archived__c' => false};
            IPM_Bosscard__c ipmBosscard = (IPM_Bosscard__c)IPM_TestFactory.createSObject('IPM_Bosscard__c',bossCardMap,false);
            ipmBosscardTestList.add(ipmBosscard);
        }
        if(doInsert) { 
            insert ipmBosscardTestList;
        }
        return ipmBosscardTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert Bosscard
	**************************************************************************************************/
    public static IPM_Bosscard__c createIPMBosscard(Boolean doInsert) {
        Map<String,Object> bossCardMap =  new Map<String,Object>{'IPM_BosscardName__c' => 'Test Boss card','IPM_Assumptions__c' =>TEST_CONTENT,
            'IPM_Background__c'=>TEST_CONTENT,'IPM_Constraints__c' =>TEST_CONTENT,
            'IPM_Consumer_Need__c'=>TEST_CONTENT,'IPM_Deliverables__c'=>TEST_CONTENT,
            'IPM_Potential_Business_Opportunity__c'=>TEST_CONTENT,'IPM_Resources__c'=>TEST_CONTENT,
            'IPM_Scope__c'=>TEST_CONTENT,'IPM_IsSaved__c'=>true,
            BRAND_POS=>DIRT_IS_GOOD,'IPM_Target_Launch_Date__c'=>'20/10/2020',
            'IPM_Is_Archived__c' => false};
        IPM_Bosscard__c ipmBosscard = (IPM_Bosscard__c)IPM_TestFactory.createSObject('IPM_Bosscard__c',bossCardMap,false);
        if(doInsert) { 
            insert ipmBosscard;
        }
        return ipmBosscard;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert sample task data
	**************************************************************************************************/
    public static IPM_Task__c createIPMTask(Id projId, Boolean doInsert) {
        Map<String,Object> taskDataMap =  new Map<String,Object>{NAME => 'testtask'};
        if(projId != null) {taskDataMap.put(IPM_PROJECT, projId);}
        
        IPM_Task__c task = (IPM_Task__c)IPM_TestFactory.createSObject('IPM_Task__c',taskDataMap,false);
        if(doInsert) { 
            insert task;
        }
        return task;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample IPMMileStone List Data 
	**************************************************************************************************/
    
    public static List<IPM_Milestone__c> createIPMMilestoneList(Boolean doInsert, Integer listSize) {
        
        List<IPM_Milestone__c> milestoneTestList = new List<IPM_Milestone__c>();
        for(Integer i = 0; i < listSize; i++){
            Map<String,Object> milestoneDataMap =  new Map<String,Object>{NAME => 'test milestone' + i};
            IPM_Milestone__c milestone = (IPM_Milestone__c)IPM_TestFactory.createSObject('IPM_Milestone__c',milestoneDataMap,false);
            milestoneTestList.add(milestone);          
        }
        if(doInsert){ 
            insert milestoneTestList;
        }
        return milestoneTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert sample milestone data
	**************************************************************************************************/
    public static IPM_Milestone__c createIPMMilestone(Id projId, Boolean doInsert) {
        Map<String,Object> milestoneDataMap =  new Map<String,Object>{NAME => 'test milestone'};
        if(projId != null) {milestoneDataMap.put(IPM_PROJECT, projId);}
        
        IPM_Milestone__c milestone = (IPM_Milestone__c)IPM_TestFactory.createSObject('IPM_Milestone__c',milestoneDataMap,false);
        if(doInsert) { 
            insert milestone;
        }
        return milestone;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data List of IPMProject Resource 
	**************************************************************************************************/
    
    public static List<IPM_Project_Resource__c> createIPMProjectResourceList(Boolean doInsert, Integer listSize) {
        
        List<IPM_Project_Resource__c> ipmProjResourceTestList = new List<IPM_Project_Resource__c>();
        
        for(Integer i = 0; i < listSize; i++){
            Map<String,Object> projResourceDataMap =  new Map<String,Object>{'IPM_Role_Type__c' => IPM_ConstantUtils.IPM_ROLE_FINANCE, 'IPM_Project_Role_Owner__c' => true};
            IPM_Project_Resource__c projResource = (IPM_Project_Resource__c)IPM_TestFactory.createSObject('IPM_Project_Resource__c',projResourceDataMap,false);
            ipmProjResourceTestList.add(projResource);
        }
        
        if(doInsert) { 
            insert ipmProjResourceTestList;
        }
        return ipmProjResourceTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data of IPMProject Resource
	**************************************************************************************************/
    public static IPM_Project_Resource__c createIPMProjectResource(Id projId, Boolean doInsert) {
        Map<String,Object> projResourceDataMap =  new Map<String,Object>{'IPM_Role_Type__c' => IPM_ConstantUtils.IPM_ROLE_FINANCE, 'IPM_Project_Role_Owner__c' => true};
        if(projId != null) {projResourceDataMap.put(IPM_PROJECT, projId);}
        
        IPM_Project_Resource__c projResource = (IPM_Project_Resource__c)IPM_TestFactory.createSObject('IPM_Project_Resource__c',projResourceDataMap,false);
        if(doInsert) { 
            insert projResource;
        }
        return projResource;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data of Company card
	**************************************************************************************************/
    public static IPM_Company_Card__c createIPMCompanyCard(Boolean doInsert){
        Map<String,Object> comcardMap =  new Map<String,Object>{NAME=>'Test Company Card',IPM_COMPANY_TYPE=>C_GLOBAL,IPM_MANAGED_CATEGORY=>LAUNDRY,GEOGRAPHICAL_SCOPE =>'Global',MARKET_CLUSTER_CC =>SOUTH_ASIA,IPM_MCO_CC =>INDIA};
        IPM_Company_Card__c comcard = (IPM_Company_Card__c)IPM_TestFactory.createSObject(IPM_COMPANY_CARD,comcardMap,false);   
        if(doInsert) { 
            insert comcard;
        }
        return comcard;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data of Global Company Card
	**************************************************************************************************/
    public static IPM_Company_Card__c createGlobalCompanyCard(Boolean doInsert){
        Map<String,Object> comcardMap =  new Map<String,Object>{NAME=>'Test Company Card',IPM_COMPANY_TYPE=>C_GLOBAL,IPM_MANAGED_CATEGORY=>LAUNDRY,RECORD_TYPE_ID => globalCompanyCardRecId,GEOGRAPHICAL_SCOPE =>'Global'};
        IPM_Company_Card__c comcard = (IPM_Company_Card__c)IPM_TestFactory.createSObject(IPM_COMPANY_CARD,comcardMap,false);   
        if(doInsert) { 
            insert comcard;
        }
        return comcard;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data of Regional Company Card
	**************************************************************************************************/
    public static IPM_Company_Card__c createRegionalCompanyCard(Boolean doInsert){
        Map<String,Object> comcardMap =  new Map<String,Object>{NAME=>'Test Regional Company Card',IPM_COMPANY_TYPE=>C_GLOBAL,IPM_MANAGED_CATEGORY=>LAUNDRY,RECORD_TYPE_ID => regionalCompanyCardRecId,GEOGRAPHICAL_SCOPE =>INDIA,MARKET_CLUSTER_CC =>SOUTH_ASIA};
        IPM_Company_Card__c comcard = (IPM_Company_Card__c)IPM_TestFactory.createSObject(IPM_COMPANY_CARD,comcardMap,false);   
        if(doInsert) { 
            insert comcard;
        }
        return comcard;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data of Local Company Card
	**************************************************************************************************/
    public static IPM_Company_Card__c createLocalCompanyCard(Boolean doInsert){
        Map<String,Object> comcardMap =  new Map<String,Object>{NAME=>'Test Local Company Card',IPM_COMPANY_TYPE=>LOCAL_SPAN,IPM_MANAGED_CATEGORY=>LAUNDRY,RECORD_TYPE_ID => localCompanyCardRecId,GEOGRAPHICAL_SCOPE =>INDIA,MARKET_CLUSTER_CC =>SOUTH_ASIA,IPM_MCO_CC =>INDIA};
        IPM_Company_Card__c comcard = (IPM_Company_Card__c)IPM_TestFactory.createSObject(IPM_COMPANY_CARD,comcardMap,false);   
        if(doInsert) { 
            insert comcard;
        }
        return comcard;
    }

    /***********************************************************************************************************************************************************
	* @description Sample Data of User Profile
	**************************************************************************************************/
    public static IPM_User_Profile__c createUserProfile(Boolean doInsert) {
        Map<String,Object> userProfMap =  new Map<String,Object>{NAME=>'Test User Profile',IPM_USER_FUNCTION=>PROJECT_LEADER,
            IPM_USER_ROLE=>BD,IPM_USER_FUNCTION=>C_TRUE,IPM_CENTRAL_TEAM=>C_TRUE,
            'Export_Porfolio_Data__c'=>C_TRUE,IPM_WORK_LEVEL=>'WL2+'};
        IPM_User_Profile__c userProf  = (IPM_User_Profile__c)IPM_TestFactory.createSObject('IPM_User_Profile__c',userProfMap,false);    
        if(doInsert) { 
            insert userProf;
        }
        return userProf;
    }
    
    /***********************************************************************************************************************************************************
	* @description Sample Data List of User Profile
	**************************************************************************************************/
    public static List<IPM_User_Profile__c> createUserProfileList(List<ID> userIdList,List<IPM_Company_Card__c> companyCardList,Boolean doInsert ) 
    {
        Map<String,List<Object>> userProfMap =  new Map<String,List<Object>>{
            NAME=> new List<String>(),IPM_USER_FUNCTION=> new List<String>(),
            IPM_USER_ROLE=>new List<String>(),IPM_COMPANY_CARD=>new List<Id>(),
            IPM_CENTRAL_TEAM=> new List<Boolean>(),IPM_WORK_LEVEL=> new List<String>(),
            'IPM_User_Category__c' => new List<String>(),'IPM_User__c' => new List<Id>()};
        
        for(Integer counter=0;counter < userIdList.size();counter++)
        {
            userProfMap.get(NAME).add(companyCardList.get(counter).Name);
            userProfMap.get('IPM_User__c').add(userIdList.get(counter));
            userProfMap.get(IPM_COMPANY_CARD).add(companyCardList.get(counter).Id);    
            userProfMap.get(IPM_USER_FUNCTION).add(PROJECT_LEADER);
            userProfMap.get(IPM_USER_ROLE).add(BD);
            userProfMap.get(IPM_CENTRAL_TEAM).add(true);
            userProfMap.get(IPM_WORK_LEVEL).add('WL2+');
            userProfMap.get('IPM_User_Category__c').add(LAUNDRY);
            
        }                                        
        
        List<IPM_User_Profile__c> userProfList = (List<IPM_User_Profile__c>)IPM_TestFactory.createSObjectList('IPM_User_Profile__c',userProfMap,false);
        
        if(doInsert) { 
            insert userProfList;
        }
        return userProfList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert list of mdo geography
	**************************************************************************************************/
    public static List<MDO_Geography__c> createGeographyList(Boolean doInsert, Integer listSize) {
        
        List<MDO_Geography__c> mdmGeographyTestList = new List<MDO_Geography__c>();
        
        MDO_Geography__c goegraphiesCluster = new MDO_Geography__c();
        goegraphiesCluster.Name = 'AsiaParent';
        goegraphiesCluster.parent_L2__c =goegraphiesCluster.id;
        goegraphiesCluster.geography_type__c = 'Unilever Cluster';
        goegraphiesCluster.Status__c = ACTIVE;
        goegraphiesCluster.ISO_3166_1_Code__c = 'G1';
        goegraphiesCluster.name_united_nations__c = 'G1';
        mdmGeographyTestList.add(goegraphiesCluster);
        
        MDO_Geography__c goegraphiesMCO = new MDO_Geography__c();
        goegraphiesMCO.Name = 'Asia';
        goegraphiesMCO.parent_L2__c =goegraphiesCluster.id;
        goegraphiesMCO.geography_type__c = 'Country Group';
        goegraphiesMCO.Status__c = ACTIVE;
        goegraphiesMCO.ISO_3166_1_Code__c = 'G2';
        goegraphiesMCO.name_united_nations__c = 'G2';
        mdmGeographyTestList.add(goegraphiesMCO);
        
        MDO_Geography__c goegraphiesCountry = new MDO_Geography__c();
        goegraphiesCountry.Name = INDIA;
        goegraphiesCountry.parent_L2__c =goegraphiesMCO.id;
        goegraphiesCountry.geography_type__c = 'Country';
        goegraphiesCountry.Status__c = ACTIVE;
        goegraphiesCountry.ISO_3166_1_Code__c = 'G3';
        goegraphiesCountry.name_united_nations__c = 'G3';
        mdmGeographyTestList.add(goegraphiesCountry);
        
        /* for(Integer i = 0; i < listSize; i++){
            Map<String,Object> geoMap =  new Map<String,Object>{NAME=>'Test Geography' + i};
            MDO_Geography__c geo  = (MDO_Geography__c)IPM_TestFactory.createSObject('mdm_Geography__c',geoMap,false);   
            mdmGeographyTestList.add(geo);
        }*/
        
        //if(doInsert) { 
        insert mdmGeographyTestList;
        //  }
        return mdmGeographyTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert list of mdo geography
	**************************************************************************************************/
    public static List<mdo_Geography__c> createMDOGeographyList(Boolean doInsert, Integer listSize) {
        
        List<MDO_Geography__c> mdoGeographyTestList = new List<MDO_Geography__c>();
        for(Integer i = 0; i < listSize; i++){
            Map<String,Object> geoMap =  new Map<String,Object>{NAME=>'Test Geography' + i};
            MDO_Geography__c geo  = (MDO_Geography__c)IPM_TestFactory.createSObject('MDO_Geography__c',geoMap,false);   
            mdoGeographyTestList.add(geo);
        }
        
        if(doInsert) { 
            insert mdoGeographyTestList;
        }
        return mdoGeographyTestList;
    }

    /***********************************************************************************************************************************************************
	* @description To insert mdm geography
	**************************************************************************************************/
    public static mdm_Geography__c createGeography(Boolean doInsert) {
        Map<String,Object> geoMap =  new Map<String,Object>{NAME=>'Test Geography'};
        mdm_Geography__c geo  = (mdm_Geography__c)IPM_TestFactory.createSObject('mdm_Geography__c',geoMap,false);   
        if(doInsert) { 
            insert geo;
        }
        return geo;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert list of country 
	**************************************************************************************************/
    public static List<IPM_Country__c> createIPMCountryList(Boolean doInsert, Integer listSize) {
        
        List<IPM_Country__c> IPMCountryTestList = new List<IPM_Country__c>();
        for(Integer i = 0; i < listSize; i++){
            Map<String,Object> countryMap =  new Map<String,Object>{NAME=>'Test Country',IS_ACTIVE=>true};
            IPM_Country__c country  = (IPM_Country__c)IPM_TestFactory.createSObject('IPM_Country__c',countryMap,false);
            IPMCountryTestList.add(country);
        } 
        if(doInsert) { 
            insert IPMCountryTestList;
        }
        return IPMCountryTestList;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert country
	**************************************************************************************************/
    public static IPM_Country__c createIPMCountry(Boolean doInsert) {
        Map<String,Object> countryMap =  new Map<String,Object>{NAME=>'Test Country'};
        IPM_Country__c country  = (IPM_Country__c)IPM_TestFactory.createSObject('IPM_Country__c',countryMap,false); 
        if(doInsert) { 
            insert country;
        }
        return country;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert mdm_CU_Sales_SKU_Count_Mapping__c
	**************************************************************************************************/
    public static mdm_CU_Sales_SKU_Count_Mapping__c createCU_SalesSKU_CountMapping(Boolean doInsert) {
        Map<String,Object> cuSalesSKUCntMappingMap =  new Map<String,Object>{NAME=>'NameCU','Country__c'=>'Test Country1','CU_Volume__c'=>2343};
        mdm_CU_Sales_SKU_Count_Mapping__c cuSalesSKUCntMapping  = (mdm_CU_Sales_SKU_Count_Mapping__c)IPM_TestFactory.createSObject('mdm_CU_Sales_SKU_Count_Mapping__c',cuSalesSKUCntMappingMap,false);  
        if(doInsert) { 
            insert cuSalesSKUCntMapping;
        }
        return cuSalesSKUCntMapping;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert financial year
	**************************************************************************************************/
    public static IPM_Financial_Year__c createIPMFinancialYear(Boolean doInsert) {
        Map<String,Object> IPMFinancialYearMap =  new Map<String,Object>{NAME=>'Y0',
            'Year__c'=>'0','Year_Type__c'=>INNOVATION};
        IPM_Financial_Year__c financialYear  = (IPM_Financial_Year__c)IPM_TestFactory.createSObject('IPM_Financial_Year__c',IPMFinancialYearMap,false); 
        if(doInsert) { 
            insert financialYear;
        }
        return financialYear;
    }
    
    /***********************************************************************************************************************************************************
	* @description To load IPM_ProjectMetadata__c custom setting
	**************************************************************************************************/
    public static List<IPM_ProjectMetadata__c> createIPMProjectMetadata(){
        return Test.loadData(IPM_ProjectMetadata__c.sObjectType, 'IPM_Project_Metadata');   
    }  
    
    /***********************************************************************************************************************************************************
	* @description To insert IPM_CoreParameter_Strategic_help_content__c
	**************************************************************************************************/
    public static IPM_CoreParameter_Strategic_help_content__c createIPMCoreParameterStrategicHelpContent(Boolean doInsert) {
        Map<String,Object> IPMCoreParameterStrategicHelpContentMap =  new Map<String,Object>{NAME=>'IPM CoreParameter Strategic text',
            'IPM_BLG__c'=>'Activity which does not involve a physical change to the product or pack but builds penetration and/or consumption of the current range usually via an activation activity. ...we know our growth is not only dependent on physical product launches and we mus',
            'IPM_Innovation__c'=>'A physical change to the product or pack that brings new consumer benefits and/or significant improvements in performance and claim strength utilizing technology that does not already exist in the market. ...true innovation is not commonplace approximatel',
            'IPM_Renovation__c'=>'A physical change to the product or pack that is perceived as a variation to an existing offering in the market and uses technology that already exists in the market. ...the majority of our projects are renovation as we are always improving our product an'};
        IPM_CoreParameter_Strategic_help_content__c IPMCoreParameterStrategicHelpContent  = (IPM_CoreParameter_Strategic_help_content__c)IPM_TestFactory.createSObject('IPM_CoreParameter_Strategic_help_content__c',IPMCoreParameterStrategicHelpContentMap,false);    
        if(doInsert) { 
            insert IPMCoreParameterStrategicHelpContent;
        }
        return IPMCoreParameterStrategicHelpContent;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert IPM_Questionnaire__c
	**************************************************************************************************/
    public static IPM_Questionnaire__c createIPMQuestionnaire(Id projId, Boolean doInsert) {
        Map<String,Object> IPMQuestionnaireMap =  new Map<String,Object>{'IPM_HelpText_Yes__c'=>'Less',
            'IPM_HelpText_No__c'=>THREE,
            'IPM_HelpText_Partly__c'=>STRINGVALUE_4,
            'IPM_Question__c'=>'Investment Risk'};
        if(projId != null) {IPMQuestionnaireMap.put(IPM_PROJECT, projId);}
        IPM_Questionnaire__c IPMQuestionnaire  = (IPM_Questionnaire__c)IPM_TestFactory.createSObject('IPM_Questionnaire__c',IPMQuestionnaireMap,false); 
        if(doInsert) { 
            insert IPMQuestionnaire;
        }
        return IPMQuestionnaire;
    }
    
    
    /***********************************************************************************************************************************************************
	* @description To insert list of IPM_Questionnaire__c
	**************************************************************************************************/
    public static List<IPM_Questionnaire__c> createIPMQuestionnaireList(Id projId,Boolean doInsert){
        List<IPM_Questionnaire__c> IPMQuestionnaireList=new List<IPM_Questionnaire__c>();
        Id projectId=getMasterProjId();
        if(!String.isBlank(projId)){
            Map<String,List<Object>> IPMQuestionnaireMap =  new Map<String,List<Object>>{
                RECORD_TYPE_ID=>new List<Object>{Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.POS_QUESTIONNAIRE_RECORDTYPE).RecordTypeId,Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.POS_QUESTIONNAIRE_RECORDTYPE).RecordTypeId,Schema.SObjectType.IPM_Questionnaire__c.RecordTypeInfosByName.get(IPM_ConstantUtils.RQS_QUESTIONNAIRE_RECORDTYPE).RecordTypeId},
                'IPM_POS_Question_Type__c'=>new List<Object>{QUESTIONTYPE_STR, QUESTIONTYPE_STR,QUESTIONTYPE_STR},  
                'IPM_Sequence_Number__c'=>new List<Object>{1,2,3},
                'IPM_Question__c'=>new List<Object>{'Test POS Question1','Test POS Question2','Test RQS Question'},
                'IPM_HelpText_Yes__c'=>new List<Object>{'Help Text Yes','Help Text Yes','Help Text Yes'},
                'IPM_HelpText_No__c'=>new List<Object>{'help Text No','help Text No','help Text No'},
                'Is_Master__c'=>new List<Object>{true,true,true},
                'IPM_HelpText_Partly__c'=>new List<Object>{'help text partly','help text partly','help text partly'},
                //IPM_PROJECT=>new List<Object>{EMPTY_STRING,EMPTY_STRING,EMPTY_STRING},
                IPM_PROJECT=>new List<Object>{projectId,projectId,projectId},
                'IPM_Show_Create_Link__c'=>new List<Object>{null,C_TRUE,null}, 
                'IPM_RQS_Gate_Type__c'=>new List<Object>{EMPTY_STRING,EMPTY_STRING,CHARTER},
                'IPM_HelpText_Five__c'=>new List<Object>{EMPTY_STRING,EMPTY_STRING,'One more'}
            };
            
            IPMQuestionnaireList=(List<IPM_Questionnaire__c>)IPM_TestFactory.createSObjectList('IPM_Questionnaire__c',IPMQuestionnaireMap,false);
            if(doInsert) { 
                insert IPMQuestionnaireList;
            }
        }
        return IPMQuestionnaireList;    
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert IPM_Gate_CMI__c
	**************************************************************************************************/
    public static IPM_Gate_CMI__c createGateCMI(Id projId, Boolean doInsert){
        Map<String,Object> GateCMIMap =  new Map<String,Object>{'Test__c'=>'Test', 'KPI__c'=>'testkpi', 'Gate__c'=>CONTRACT};
        if(projId != null) {GateCMIMap.put(IPM_PROJECT, projId);}
        IPM_Gate_CMI__c GateCMI  = (IPM_Gate_CMI__c)IPM_TestFactory.createSObject('IPM_Gate_CMI__c',GateCMIMap,false);  
        if(doInsert) { 
            insert GateCMI;
        }
        return GateCMI;
    }
    
    
    /***********************************************************************************************************************************************************
	* @description To insert IPM_Gate_CMI_KPI_Inputs__c
	**************************************************************************************************/
    public static IPM_Gate_CMI_KPI_Inputs__c createGateCMIKPIInputs(Boolean doInsert){
        Map<String,Object> GateCMIKPIInputsMap =  new Map<String,Object>{NAME=>'settings1','IPM_Test__c'=>'Test', 'IPM_KPI__c'=>'testkpi', 'IPM_Inputs__c'=>'Test Input1,Test Input2'};
        
        IPM_Gate_CMI_KPI_Inputs__c GateCMIKPIInputs  = (IPM_Gate_CMI_KPI_Inputs__c)IPM_TestFactory.createSObject('IPM_Gate_CMI_KPI_Inputs__c',GateCMIKPIInputsMap,false);   
        if(doInsert) { 
            insert GateCMIKPIInputs;
        }
        return GateCMIKPIInputs;
    }
    
    
    /***********************************************************************************************************************************************************
	* @description to insert sample data of IPM_CorePara_helps_example__c
	**************************************************************************************************/
    public static IPM_CorePara_helps_example__c createCoreParamHelpExapmle(Boolean doInsert){
        Map<String,Object> coreParamHelpExapmleMap =  new Map<String,Object>{'IPM_Answer__c'=>'ImprovementTest','IPM_Core_Parameter_Helps__c'=>'Test', 'IPM_Core_Parameter_Help__c'=>'testkpi'};
        
        IPM_CorePara_helps_example__c coreParamHelpExapmle  = (IPM_CorePara_helps_example__c)IPM_TestFactory.createSObject('IPM_CorePara_helps_example__c',coreParamHelpExapmleMap,false);   
        if(doInsert) { 
            insert coreParamHelpExapmle;
        }
        return coreParamHelpExapmle;
        
    }
    
    /******************************************************
    * @description: to create IPM Projects
    **************************************************************************************************/
   
    public static List<IPM_Project__c> createIPMProjects(Id bosscard){
        
        //retreive all the projects with full & lite complexities
        List<IPM_Project__c > listOfIpmProjects= [SELECT IPM_Complexity__c 
        FROM IPM_Project__c 
        WHERE IPM_Complexity__c =: FULL OR IPM_Complexity__c =:LITE];
        List<IPM_Project__c> ipmProjects = new List<IPM_Project__c>();
        if(listOfIpmProjects!=null && listOfIpmProjects.isEmpty()){
            IPM_Project__c ipmProject = IPM_TestFactory_Helper.createIPMProject(false);
            if(bosscard !=  null){
                ipmProject.IPM_Bosscard__c = bosscard;
            }
            ipmProject.IPM_Project_Name__c ='test1';
            ipmProjects.add(ipmProject);
            ipmProject = new IPM_Project__c();
            ipmProjects.add(ipmProject);
            insert ipmProjects;
        } else{
            ipmProjects = listOfIpmProjects;  
            
        }
        return ipmProjects;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert sample data of IPM_OTIF_Status__c
	**************************************************************************************************/
    public static IPM_OTIF_Status__c createIPMOTIFStatus(Boolean doInsert){
        Map<String,Object> IPMOTIFStatusMap =  new Map<String,Object>{NAME=>'Contract Attractive Business'};
        
        IPM_OTIF_Status__c IPMOTIFStatus  = (IPM_OTIF_Status__c)IPM_TestFactory.createSObject('IPM_OTIF_Status__c',IPMOTIFStatusMap,false); 
        if(doInsert) { 
            insert IPMOTIFStatus;
        }
        return IPMOTIFStatus;
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert sample data list of IPM_POS_RQS_Mapping__c
	**************************************************************************************************/
    public static List<IPM_POS_RQS_Mapping__c> createPOS_RQSMapping(Boolean doInsert){
        List<IPM_POS_RQS_Mapping__c> ipmPosRqsMappingCustomSettingList = new List<IPM_POS_RQS_Mapping__c>();
        IPM_POS_RQS_Mapping__c prm1 = new IPM_POS_RQS_Mapping__c(Name='Brand',Score__c=3);
        ipmPosRqsMappingCustomSettingList.add(prm1);
        if(doInsert) { 
            insert ipmPosRqsMappingCustomSettingList;
        }
        return ipmPosRqsMappingCustomSettingList;
    }
    
    
    
    /************************Creation Of Share Objects**************************/
    
    /***********************************************************************************************************************************************************
	* @description Create generic share object record
	**************************************************************************************************/
    
    
    public static SObject createShareObject (String ObjectName){ //IPM_Project_Rollout__c.id,psa.assigneeId,falseorTrue
        Map<String,Object> ShareMap =  new Map<String,Object>{'accesslevel'=> IPM_ConstantUtils.ACCESS_EDIT};
        
        SObject Share  = IPM_TestFactory.createSObject(ObjectName,ShareMap,false);  
        
        return Share;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create mdo Geography object record
	**************************************************************************************************/
    
    public static mdo_Geography__c createMDOGeography(Boolean doInsert) {  
        Map<String,Object> geoMap =  new Map<String,Object>{NAME=>'Test Geography'};
        mdo_Geography__c geo  = (mdo_Geography__c)IPM_TestFactory.createSObject('mdo_Geography__c',geoMap,false);   
        if(doInsert) { 
            insert geo;
        }
        return geo;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create mdo product category object record
	**************************************************************************************************/
    
    public static MDO_Category__c createMDOCategory(Boolean doInsert) {
        Map<String,Object> catMap =  new Map<String,Object>{NAME=>'Test Categoty','geography_type__c'=>'Cluster'};
        MDO_Category__c categoryR  = (MDO_Category__c)IPM_TestFactory.createSObject('MDO_Category__c',CatMap,false);   
        if(doInsert) { 
            insert categoryR;
        }
        return categoryR;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create mdo Brand Positioning object record
	**************************************************************************************************/
    
    public static MDO_BrandPosition__c createMDOBrandPosition(Boolean doInsert) {
        Map<String,Object> BrandPMap =  new Map<String,Object>{NAME=>'Test Brand P',STATUS=>ACTIVE};
        MDO_BrandPosition__c BrandP  = (MDO_BrandPosition__c)IPM_TestFactory.createSObject('MDO_BrandPosition__c',BrandPMap,false);   
        if(doInsert) { 
            insert BrandP;
        }
        return BrandP;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create mdm Brand Positioning object record
	**************************************************************************************************/
    
    public static mdm_Brand_Position__c createMDMBrandPosition(Boolean doInsert) {
        Map<String,Object> BrandPMap =  new Map<String,Object>{NAME=>'Test Brand P',STATUS=>ACTIVE,'Category_Name__c'=>'Laundry'};
        mdm_Brand_Position__c BrandP  = (mdm_Brand_Position__c)IPM_TestFactory.createSObject('mdm_Brand_Position__c',BrandPMap,false);   
        if(doInsert) { 
            insert BrandP;
        }
        return BrandP;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create mdm Brand Positioning object record
	**************************************************************************************************/
    
    public static mdm_Product_Category__c createMDMCategory(Boolean doInsert) {
        Map<String,Object> BrandPMap =  new Map<String,Object>{NAME=>'Test Brand P','L2_Product_Category__c'=>HOUSEHOLDCARE,'L5_Product_Category__c'=>'Dishwash'};
        mdm_Product_Category__c BrandP  = (mdm_Product_Category__c)IPM_TestFactory.createSObject('mdm_Product_Category__c',BrandPMap,false);   
        if(doInsert) { 
            insert BrandP;
        }
        return BrandP;
    }
    
    
    /***********************************************************************************************************************************************************
	* @description Create mdm Brand Positioning object record
	**************************************************************************************************/
    
    public static  List<mdm_Brand_Position__c> createMDMBrandPositionList(Boolean doInsert) 
    {
        
        Map<String,List<Object>> MDMBrandPosMap = new Map<String,List<Object>>{
            NAME => new List<String>{'TestBrand1','TestBrand2','TestBrand3'},
            STATUS=>new List<String>{ACTIVE,ACTIVE,ACTIVE},
            'Brand_Position_Name__c'=>new List<String>{'BP1','BP2','BP3'},
            'Category_Name__c' => new List<String>{LAUNDRY,'RegionalManagedCategory','LocalManagedCategory'}
        };
        
        
        List<mdm_Brand_Position__c> brandPositionList = (List<mdm_Brand_Position__c>)IPM_TestFactory.createSObjectList('mdm_Brand_Position__c',MDMBrandPosMap,false);
        
        if(doInsert) { 
            insert brandPositionList;
        }
        return brandPositionList;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create mdo Brand Positions object record 
	**************************************************************************************************/
    
    public static MDO_BrandPositions__c createMDOBrandPositions(Boolean doInsert) {
        Map<String,Object> BrandPMap =  new Map<String,Object>{NAME=>'Test Brand Postions',STATUS=>ACTIVE};
        MDO_BrandPositions__c BrandP  = (MDO_BrandPositions__c)IPM_TestFactory.createSObject('MDO_BrandPositions__c',BrandPMap,false);   
        if(doInsert) { 
            insert BrandP;
        }
        return BrandP; 
    }
    
    /***********************************************************************************************************************************************************
	* @description Create IPM_Market_Cluster_Short_Names__c object record 
	**************************************************************************************************/
    public static IPM_Market_Cluster_Short_Names__c createMarketshortName(Boolean doInsert){
        Map<String,Object> clusterMap =  new Map<String,Object>{NAME=>'SAS','Unilever_Cluster__c'=>SOUTH_ASIA,'Short_Name__c'=>'SAS'};
        IPM_Market_Cluster_Short_Names__c mCluster  = (IPM_Market_Cluster_Short_Names__c)IPM_TestFactory.createSObject('IPM_Market_Cluster_Short_Names__c',clusterMap,false);   
        if(doInsert) { 
            insert mCluster;
        }
        return mCluster; 
        
    }

    
    /***********************************************************************************************************************************************************
	* @description Create IPM_MCO_Short_Names__c object record 
	**************************************************************************************************/
    public static IPM_MCO_Short_Names__c createMCOshortName(Boolean doInsert){
        Map<String,Object> mcoMap =  new Map<String,Object>{NAME=>'OSA','Country_Group__c'=>'Other South Asia','Short_Name__c'=>'OSA'};
        IPM_MCO_Short_Names__c mco  = (IPM_MCO_Short_Names__c)IPM_TestFactory.createSObject('IPM_MCO_Short_Names__c',mcoMap,false);   
        if(doInsert) { 
            insert mco;
        }
        return mco; 
        
    }
    
    
    /***********************************************************************************************************************************************************
	* @description Create uw_Inoplan_Project__c object record 
	**************************************************************************************************/
    public static uw_BET__c getTestBet(){
        uw_Brand__c brand = new uw_Brand__c(Name = 'Test Brand',StylePalette__c = 'toolkit-theme-light');
        insert brand;
        
        uw_Inoplan_Project__c inopProject = new uw_Inoplan_Project__c(name = 'No Inoplan Project' + Math.random());
        insert inopProject;
        
        uw_BET__c bet = new uw_BET__c(uw_Brand__c = brand.id,Status__c = 'First release',Inoplan_Project__c = inopProject.id,Name = 'TestBET');
        return bet;
    }
    
    /***********************************************************************************************************************************************************
	* @description Create IPM_Assessment__c object record 
	*************************************************************************************************/
    public static IPM_Assessment__c createAssessments(Boolean doInsert, Id projectId, Id countryId, String projPhase){
        IPM_Assessment__c assessment = new IPM_Assessment__c();
        assessment.Name = 'Assessment 1';
        assessment.IPM_Assessment_GHG_PCU__c = 1;
        assessment.IPM_Assessment_Waste_PCU__c =2;
        assessment.IPM_Assessment_Water_PCU__c =3;
        assessment.IPM_Assessment_GHG_PCU_Percentage__c =4;
        assessment.IPM_Assessment_Waste_PCU_Percentage__c =5;
        assessment.IPM_Assessment_Water_PCU_Percentage__c =6;
        assessment.IPM_Global_Category_Average_View_GHG__c =7;
        assessment.IPM_Global_Category_Average_View_Waste__c =8;
        assessment.IPM_Global_Category_Average_View_Water__c =9;
        assessment.IPM_Country__c = countryId;
        assessment.IPM_Project__c = projectId;
        assessment.Project_Phase__c = projPhase;
        
        if(doInsert)
        {
            insert assessment;
        }
        
        return assessment;
    }
    
    /***********************************************************************************************************************************************************
	* @description For Sharing access to Master Project record.
	**************************************************************************************************/
    
    public static void shareMasterProject(List<User> userList)
    {
        List<IPM_Project__c> masterProjectList =  [Select Id from IPM_Project__c where IPM_Project_Name__c ='IPM_MasterProject'];
        System.assertEquals(masterProjectList.size(),1);
        
        List<IPM_Project__Share> masterProjectShareList = new List<IPM_Project__Share>();
        for(User lUser : userList)
        {       
            IPM_Project__Share projectShare  = new IPM_Project__Share();
            projectShare.ParentId = masterProjectList[0].Id;
            projectShare.AccessLevel = 'Read';
            projectShare.RowCause = Schema.IPM_Project__Share.RowCause.Manual;
            projectShare.UserOrGroupId = lUser.Id;  
            masterProjectShareList.add(projectShare);
        }
        insert masterProjectShareList;   
    }
    
    public static List<IPM_Project_Template__c> projectTemplateList{get;set;}
    public static List<IPM_Document_Template__c> documentTemplateList{get;set;}
    public static List<IPM_Task__c> taskTemplateList{get;set;}
    public static List<IPM_Section__c> sectionTemplateList{get;set;}
    public static List<IPM_Milestone__c> milestoneTemplateList{get;set;}
    public static List<IPM_Questionnaire__c> questionnaireTemplateList{get;set;}
    public static List<IPM_ProjectMetadata__c> projectMetadataList{get;set;}
    public static List<IPM_Project_Type__c> projectTypeList{get;set;}
    public static List<MDM_Geography__c> mdmGeoList {get;set;}
    public static List<IPM_Gate_CMI_KPI_Inputs__c> cmiGateKPIInputList {get;set;}
    public static List<IPM_CMI_Color_Mapping__c> cmiColorCodes {get;set;}
    
    /***********************************************************************************************************************************************************
	* @description To get  project master data
	**************************************************************************************************/
    public static void getProjectMasterData()
    {
        
        // Create Project Template Master Map to store Project Template specific information.
        Map<String,List<Object>> projectTemplateMap = new Map<String,List<Object>>
        { 'IPM_Category__c'=> new List<String>{HOUSEHOLDCARE,'Laundry'},
            'IPM_Template_Complexity__c' => new List<String>{FULL,LITE},
            'IPM_Template_Name__c' => new List<String>{'HHC-FULL','HHC-Lite'},
            IPM_PROJECT_TYPE => new List<String>{ORIGINAL_PROJECTYPE,ORIGINAL_PROJECTYPE}
        };
        
        projectTemplateList = (List<IPM_Project_Template__c>)IPM_TestFactory.createSObjectList(IPM_PROJECT_TEMPLATE,projectTemplateMap,false);  
        
        insert projectTemplateList;
        
        
        // Create Document Template Map to store document Template specific information based on Project Template.
        Map<String,List<Object>> documentTemplateMap = new Map<String,List<Object>>
        { 'IPM_Document_Order__c'=> new List<String>{'1.0','2.0','3.0','4.0','1.0','2.0','3.0','4.0'},
            IPM_DOCUMENT_TEMPLATE_NAME => new List<String>{'Charter Gate Full','Contract Gate Full','Market Ready Gate Full','Market Deployment Gate Full','Charter Gate Lite','Contract Gate Lite','Market Ready Gate Lite','Market Deployment Gate Lite'},
            'IPM_Document_Type__c' => new List<String>{CHARTER,CONTRACT,MARKET_READY,MARKET_DEPLOYMENT,CHARTER,CONTRACT,MARKET_READY,MARKET_DEPLOYMENT},
            IPM_PROJECT_TEMPLATE => new List<Id>{projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[1].Id,projectTemplateList[1].Id,projectTemplateList[1].Id,projectTemplateList[1].Id}  
        };
        
        documentTemplateList = (List<IPM_Document_Template__c>)IPM_TestFactory.createSObjectList(IPM_DOCUMENT_TEMPLATE,documentTemplateMap,false);
        
        insert documentTemplateList; 
        
        
        // Create Master Project For sharing to work for master tasks and milestones.
        Map<String,Object> masterProjectMap =  new Map<String,Object>{IPM_PROJECT_NAME => 'IPM_MasterProject','IPM_Phase__c' => IDEAS,'IPM_Category_Group__c' => HOUSEHOLDCARE,'IPM_PM_Approach__c' => EXTERNAL,'IPM_IsCompleted__c' => true,'IPM_Fast_Track_Project__c' => false,'IPM_Market_Type__c' =>IPM_ConstantUtils.MARKETTYPE_DEVELOPING,IPM_TARGET_LAUNCH_DATES => System.today()+100,IPM_PROJECT_LEADER => UserInfo.getUserId(),IPM_PROJECT_SPAN => IPM_ConstantUtils.SpanGlobal};
        
        IPM_Project__c masterProjectObj = (IPM_Project__c)IPM_TestFactory.createSObject(IPM_PROJECT,masterProjectMap,true);
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = true;
        insert   masterProjectObj;
        IPM_ProjectJob_Queue.PROJECT_QUEUE_CONTEXT_STARTED = false;
        
        // validate whether project is successfully inserted.
        List<IPM_Project__c> masterProjectList =  [Select Id from IPM_Project__c where IPM_Project_Name__c ='IPM_MasterProject'];
        
        System.assertEquals(masterProjectList.size(),1);
        
        Map<String,List<Object>> taskMasterMap = new Map<String,List<Object>>{
            'IPM_Function__c' => new List<String>{BD,R_D,SC,CD,CMI,CMI,FINANCE,BB,R_D,CMI},
            'IPM_Is_Master__c' => new List<Boolean>{true,true,true,true,true,true,true,true,true,true},
            IPM_PHASE => new List<String>{IDEAS,FEASIBILITY,CAPABILITY,MARKET_READY,MARKET_DEPLOYMENT,IDEAS,FEASIBILITY,CAPABILITY,MARKET_READY,MARKET_DEPLOYMENT},
            IPM_PROJECT_TEMPLATE => new List<Id>{projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[0].Id,projectTemplateList[1].Id,projectTemplateList[1].Id,projectTemplateList[1].Id,projectTemplateList[1].Id,projectTemplateList[1].Id},
            'IPM_Task_Complexity__c' => new List<String>{FULL,FULL,FULL,FULL,FULL,LITE,LITE,LITE,LITE,LITE},
            'IPM_Task_Name__c' =>new List<String>{'Develop and lock concept','Develop packaging brief ','Action customer feedback','Full stock building','Identify target audience','Prepare for consumer concept','Ensure Customer appeal is clear','Factory commissioning','Action customer feedback','Respond to questions from BB to any open ends'},
            'IPM_Task_Type__c' => new List<String>{NON_NEGOTIABLE,NON_NEGOTIABLE,NON_NEGOTIABLE,NON_NEGOTIABLE,NON_NEGOTIABLE,NEGOTIABLE,NEGOTIABLE,NEGOTIABLE,NEGOTIABLE,NEGOTIABLE},
            'IPM_Type_of_Gate__c' =>new List<String>{CHARTER,CONTRACT,MARKET_READY,MARKET_DEPLOYMENT,CHARTER,CONTRACT,MARKET_READY,MARKET_DEPLOYMENT},
            NAME => new List<String>{'Develop and lock concept','Develop packaging brief ','Action customer feedback','Full stock building','Identify target audience','Ensure Customer appeal is clear','Factory commissioning','Respond to questions from BB to any open ends'},
            RECORD_TYPE_ID => new List<Id>{taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType,taskMasterRecordType},
            IPM_PROJECT => new List<Id>{masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id}
        };
        
        taskTemplateList = (List<IPM_Task__c>)IPM_TestFactory.createSObjectList('IPM_Task__c',taskMasterMap,false);
        
        insert taskTemplateList;
        
        List<IPM_Task__c> masterTasks = [Select Id,IPM_Phase__c,IPM_Project_Template__c,IPM_Task_Complexity__c,IPM_Task_Name__c from IPM_Task__c where recordTypeId =:taskMasterRecordType AND IPM_Project_Template__c in :projectTemplateList];
        
        Map<String,List<IPM_Task__c>> phaseToTaskList = new Map<String,List<IPM_Task__c>>();
        Map<String,List<IPM_Task__c>> complexityToTaskList = new Map<String,List<IPM_Task__c>>();
        
        for(IPM_Task__c task : masterTasks) 
        {
            List<IPM_Task__c> taskList = new List<IPM_Task__c>();
            
            if(phaseToTaskList.containsKey(task.IPM_Phase__c))
            {
                taskList = phaseToTaskList.get(task.IPM_Phase__c);  
            }
            taskList.add(task);
            phaseToTaskList.put(task.IPM_Phase__c,taskList);
            
            List<IPM_Task__c> ctaskList = new List<IPM_Task__c>();
            
            if(complexityToTaskList.containsKey(task.IPM_Task_Complexity__c))
            {
                ctaskList = complexityToTaskList.get(task.IPM_Task_Complexity__c);  
            }
            ctaskList.add(task);
            complexityToTaskList.put(task.IPM_Task_Complexity__c,ctaskList);
        }
        
        System.assertEquals(phaseToTaskList.get(IDEAS).size(), 2);
        System.assertEquals(complexityToTaskList.get(FULL).size(), 5);
        
        Map<String,String> sectionTypeMap = new Map<String,String>{STRINGVALUE_1=>HEADER,STRINGVALUE_2=>HEADER,THREE=>HEADER,STRINGVALUE_4=>HEADER,STRINGVALUE_5=>HEADER,STRINGVALUE_6=>HEADER,STRINGVALUE_7=>HEADER,
            STRINGVALUE_8=>HEADER,STRINGVALUE_1_2=>SUB_HEADER,STRINGVALUE_2_2=>SUB_HEADER,STRINGVALUE_3_1=>SUB_HEADER,STRINGVALUE_3_2=>SUB_HEADER,STRINGVALUE_3_3=>SUB_HEADER,STRINGVALUE_3_4=>SUB_HEADER,
            STRINGVALUE_4_2=>SUB_HEADER,STRINGVALUE_6_2=>SUB_HEADER,STRINGVALUE_1_1=>TEXT,STRINGVALUE_1_2=>TEXT,STRINGVALUE_1_3=>TEXT,STRINGVALUE_2_1=>TEXT,STRINGVALUE_3_2=>TEXT,STRINGVALUE_3_4=>TEXT,STRINGVALUE_3_5=>TEXT,
            STRINGVALUE_5_1=>TEXT,STRINGVALUE_5_2=>TEXT,STRINGVALUE_6_2=>TEXT,STRINGVALUE_7_1=>TEXT,STRINGVALUE_7_2=>TEXT,STRINGVALUE_7_3=>TEXT,STRINGVALUE_7_4=>TEXT,STRINGVALUE_8_1=>TEXT,STRINGVALUE_8_2=>TEXT,STRINGVALUE_8_3=>TEXT,
            STRINGVALUE_8_4=>TEXT,STRINGVALUE_8_5=>TEXT,STRINGVALUE_8_6=>TEXT,STRINGVALUE_8_7=>TEXT,STRINGVALUE_1_2_1=>TEXT,STRINGVALUE_1_2_2=>TEXT,STRINGVALUE_2_2_2=>TEXT,STRINGVALUE_3_1_1=>TEXT,STRINGVALUE_3_1_2=>TEXT,
            STRINGVALUE_3_1_3=>TEXT,STRINGVALUE_3_1_5=>TEXT,STRINGVALUE_3_2_2=>TEXT,STRINGVALUE_3_3_2=>TEXT,STRINGVALUE_3_4_1=>TEXT,STRINGVALUE_3_4_2=>TEXT,STRINGVALUE_4_2_1=>TEXT,STRINGVALUE_4_2_2=>TEXT,STRINGVALUE_4_2_3=>TEXT,
            STRINGVALUE_2_2=>STATIC_TABLE,STRINGVALUE_4_1=>STATIC_TABLE,STRINGVALUE_5_3=>STATIC_TABLE,STRINGVALUE_6_3=>STATIC_TABLE,STRINGVALUE_7_1=>STATIC_TABLE,STRINGVALUE_7_2=>STATIC_TABLE,
            STRINGVALUE_7_3=>STATIC_TABLE,STRINGVALUE_6_2_1=>STATIC_TABLE,STRINGVALUE_3_3=>DYNAMIC_COMPLEX_TABLE,STRINGVALUE_6_1=>DYNAMIC_COMPLEX_TABLE,STRINGVALUE_6_3=>DYNAMIC_COMPLEX_TABLE,
            STRINGVALUE_6_2_2=>DYNAMIC_COMPLEX_TABLE};
        
        List<String> functionalGroup = new List<String>{BD,PL,BB,CD,CMI,R_D,SC,FINANCE,'RnD'};
		
		List<String> SequenceList = new List<String>{STRINGVALUE_1,STRINGVALUE_1_1,STRINGVALUE_1_2,STRINGVALUE_1_3,STRINGVALUE_1_4,STRINGVALUE_2,STRINGVALUE_2_1,STRINGVALUE_2_2,THREE,STRINGVALUE_3_1,STRINGVALUE_3_2,STRINGVALUE_3_3,STRINGVALUE_3_4,STRINGVALUE_3_5,STRINGVALUE_4,STRINGVALUE_4_1,STRINGVALUE_4_2,STRINGVALUE_5,STRINGVALUE_5_1,STRINGVALUE_5_2,STRINGVALUE_5_3,STRINGVALUE_6,STRINGVALUE_6_1,STRINGVALUE_6_2,STRINGVALUE_6_3,STRINGVALUE_7,STRINGVALUE_7_1,STRINGVALUE_7_2,STRINGVALUE_7_3,STRINGVALUE_7_4};        

        Map<String,String> sectionNameMap = new Map<String,String>{STRINGVALUE_1=>'Introduction',STRINGVALUE_1_1=>'Idea / Graphic',STRINGVALUE_1_2=>'Feedback from Last Gate',STRINGVALUE_1_2=>'Justification',STRINGVALUE_1_3=>'Key Changes since Contract Gate',STRINGVALUE_1_3=>'Feedback from BOSSCARD',STRINGVALUE_1_3=>'Key Issues Needing Focus in Gate Meeting',STRINGVALUE_1_3=>'Key Changes since Market Ready Gate',STRINGVALUE_1_4=>'Gate Keeper Checklist',STRINGVALUE_2=>EXTERNAL,STRINGVALUE_2_1=>'Competitors',STRINGVALUE_2_1=>'Competitors',STRINGVALUE_2_2=>'Customers',STRINGVALUE_2_2=>'Customers/Channels',THREE=>'Mix',STRINGVALUE_3_1=>'Proposition',STRINGVALUE_3_2=>'Pack',STRINGVALUE_3_2=>'Product',STRINGVALUE_3_2=>'Pack',STRINGVALUE_3_3=>'Product',STRINGVALUE_3_3=>'Mix Qualification Plan and Action Standards (Table)',STRINGVALUE_3_4=>'Price',STRINGVALUE_3_4=>'Degree of Commonality',STRINGVALUE_3_5=>'Full Mix',STRINGVALUE_4=>'Deployment',STRINGVALUE_4_1=>'Promotion Guidance for Deployment - PRELIMINARY',STRINGVALUE_4_2=>'Place Guidance for Deployment',STRINGVALUE_4_2=>'Place',STRINGVALUE_5=>'Technical',STRINGVALUE_5=>'Technical',STRINGVALUE_5_1=>'R&D Technical  Readiness',STRINGVALUE_5_1=>'R&D Initial Outline (Product/Pack)',STRINGVALUE_5_1=>'R&D Feasibility',STRINGVALUE_5_2=>'Supply Chain Technical  Readiness',STRINGVALUE_5_2=>'Supply Chain Initial Outline',STRINGVALUE_5_2=>'Supply Chain Feasibility',STRINGVALUE_5_3=>'Environmental Impact',STRINGVALUE_6=>'Financial',STRINGVALUE_6_1=>'Business Case vs. Action Standards',STRINGVALUE_6_2=>'Assumptions, Risks, Sensitivities',STRINGVALUE_6_2=>'Initial Estimate of Opportunity',STRINGVALUE_6_2=>'Business Waste',STRINGVALUE_6_3=>'BD/BB Alignment',STRINGVALUE_6_3=>'Monitoring Performance in Market',STRINGVALUE_7=>'Project Management',STRINGVALUE_7_1=>'Rollout Plans',STRINGVALUE_7_1=>'Risk',STRINGVALUE_7_2=>'Country Feedback & Requirements',STRINGVALUE_7_2=>'Milestones',STRINGVALUE_7_3=>'Regional BD Team FB & Reqs',STRINGVALUE_7_3=>'Regional BD Team Feedback to Global',STRINGVALUE_7_3=>'OTIF',STRINGVALUE_7_4=>'Human Resources',STRINGVALUE_8=>'Appendix',STRINGVALUE_8_1=>'BD/BB Alignment',STRINGVALUE_8_1=>'CUs and Complexity',STRINGVALUE_8_1=>'Customers / Channels',STRINGVALUE_8_1=>'Milestones',STRINGVALUE_8_2=>'Rollout Plans',STRINGVALUE_8_2=>'Consumer Evidence - Concept',STRINGVALUE_8_2=>'Assortment Strategy',STRINGVALUE_8_3=>'Monitoring Performance in Market',STRINGVALUE_8_4=>'Mix Qualification Plan and Action Standards (Table)',STRINGVALUE_8_5=>'Environmental Impact',STRINGVALUE_8_6=>'Pack/Graphics',STRINGVALUE_8_6=>'Initial Estimate of Opportunity',STRINGVALUE_8_7=>'Risk',STRINGVALUE_8_7=>'Regional BD Team FB & Reqs',STRINGVALUE_1_2_1=>'Consumer Need',STRINGVALUE_1_2_1=>'Fit with National Category Building Plan (NCBP)',STRINGVALUE_1_2_2=>'Strategic Fit',STRINGVALUE_1_2_2=>'Fit with BMP Jobs to be Done',STRINGVALUE_2_2_2=>'Trade Story',STRINGVALUE_3_1_1=>'Target Audience',STRINGVALUE_3_1_2=>CONCEPT,STRINGVALUE_3_1_3=>'Consumer Evidence - Concept',STRINGVALUE_3_1_3=>'Communication',STRINGVALUE_3_1_5=>'Consumer Evidence - Communication',STRINGVALUE_3_1_5=>'Trademarks',STRINGVALUE_3_2_1=>'CUs and Complexity',STRINGVALUE_3_2_2=>'Consumer Evidence - Pack',STRINGVALUE_3_3_2=>'Consumer Evidence - Product',STRINGVALUE_3_4_1=>'Proposed Pricing',STRINGVALUE_3_4_2=>'Consumer Evidence - Price',STRINGVALUE_3_4_2=>'Other Price Rationale (beyond consumer evidence shown in 3.5 below)',STRINGVALUE_4_2_1=>'Assortment Strategy',STRINGVALUE_4_2_2=>'Merchandising Strategy',STRINGVALUE_4_2_3=>'Trade Promotion Strategy',STRINGVALUE_6_2_1=>'Assumptions',STRINGVALUE_6_2_2=>'Sensitivity Analysis'};
        Map<String,String> sectionExternalIDMap = new Map<String,String>{STRINGVALUE_1=>'Introduction',STRINGVALUE_1_1=>'Idea_Graphic',STRINGVALUE_1_2=>'Feedback_from_Last_Gate',STRINGVALUE_1_2=>'Country_Strategic_Context',STRINGVALUE_1_3=>'Key_Changes_since_Contract_Gate',STRINGVALUE_1_3=>'Feedback_from_BOSSCARD',STRINGVALUE_1_3=>'Key_Issues_needing_focus_in_Gate_Meeting',STRINGVALUE_1_3=>'Key_Changes_since_Market_Ready_Gate',STRINGVALUE_1_4=>'Gate_Keeper_Checklist',STRINGVALUE_2=>EXTERNAL,STRINGVALUE_2_1=>'Competitors',STRINGVALUE_2_1=>'Competitor',STRINGVALUE_2_2=>'Customers',STRINGVALUE_2_2=>'Customers_Channels',THREE=>'Mix',STRINGVALUE_3_1=>'Proposition',STRINGVALUE_3_2=>'Pack',STRINGVALUE_3_2=>'Product',STRINGVALUE_3_2=>'Pack_Graphics',STRINGVALUE_3_3=>'Product_Sub_Header',STRINGVALUE_3_3=>'Mix_Qualification_Plan_and_Action_Standards',STRINGVALUE_3_4=>'Price',STRINGVALUE_3_4=>'Degree_of_Commonality',STRINGVALUE_3_5=>'Full_Mix',STRINGVALUE_4=>'Deployment',STRINGVALUE_4_1=>'Promotion_Guidance_for_Deployment',STRINGVALUE_4_2=>'Place_Guidance_for_Deployment',STRINGVALUE_4_2=>'Place',STRINGVALUE_5=>'Technical_Header',STRINGVALUE_5=>'Technical',STRINGVALUE_5_1=>'R&D_Technical_Readiness',STRINGVALUE_5_1=>'R&D_Initial_Outline_Product_Pack',STRINGVALUE_5_1=>'R&D_Feasibility',STRINGVALUE_5_2=>'Supply_Chain_Technical_Readiness',STRINGVALUE_5_2=>'Supply_Chain_Initial_Outline',STRINGVALUE_5_2=>'Supply_Chain_Feasibility',STRINGVALUE_5_3=>'Environmental_Impact',STRINGVALUE_6=>'Financial',STRINGVALUE_6_1=>'Business_Case_Action_Standards',STRINGVALUE_6_2=>'Assumptions_Risks_Sensitivities',STRINGVALUE_6_2=>'Initial_Estimate_of_Opportunity',STRINGVALUE_6_2=>'Business_Waste',STRINGVALUE_6_3=>'BD/BB_Alignment',STRINGVALUE_6_3=>'Monitoring_Performance_in_Market',STRINGVALUE_7=>'Project_Management',STRINGVALUE_7_1=>'Rollout_Plans',STRINGVALUE_7_1=>'Risk',STRINGVALUE_7_2=>'Country_Feedback_Requirements',STRINGVALUE_7_2=>'Milestones',STRINGVALUE_7_3=>'Regional_BD_Team_FB_Req',STRINGVALUE_7_3=>'Regional_BD_Team_Feedback_to_Global',STRINGVALUE_7_3=>'OTIF_Status',STRINGVALUE_7_4=>'Human_Resources',STRINGVALUE_8=>'Appendix',STRINGVALUE_8_1=>'BD/BB_Alignment_Appendix',STRINGVALUE_8_1=>'CU_And_Complexity_Appendix',STRINGVALUE_8_1=>'Customers_Channels_Appendix',STRINGVALUE_8_1=>'Milestones_Appendix',STRINGVALUE_8_2=>'Rollout_Plans_Appendix',STRINGVALUE_8_2=>'Consumer_Evidence_Concept_Appendix',STRINGVALUE_8_2=>'Assortment_Strategy_Appendix',STRINGVALUE_8_3=>'Monitoring_Performance_in_Market_Appendix',STRINGVALUE_8_4=>'Mix_Qualification_Plan_and_Action_Standards_Appendix',STRINGVALUE_8_5=>'Environmental_Impact_Appendix',STRINGVALUE_8_6=>'Pack_Graphics_Appendix',STRINGVALUE_8_6=>'Initial_Estimate_of_Opportunity_Appendix',STRINGVALUE_8_7=>'Risk_Appendix',STRINGVALUE_8_7=>'Regional_BD_Team_FB_Req_Appendix',STRINGVALUE_1_2_1=>'Consumer_Need',STRINGVALUE_1_2_1=>'Fit_with_National_Category_Building_Plan',STRINGVALUE_1_2_2=>'Strategic_Fit',STRINGVALUE_1_2_2=>'Fit_with_BMP_Jobs_to_be_Done',STRINGVALUE_2_2_2=>'Trade_Story',STRINGVALUE_3_1_1=>'Target_Audience',STRINGVALUE_3_1_2=>CONCEPT,STRINGVALUE_3_1_3=>'Consumer_Evidence_Concept',STRINGVALUE_3_1_3=>'Communication',STRINGVALUE_3_1_5=>'Consumer_Evidence_Communication',STRINGVALUE_3_1_5=>'Trademarks',STRINGVALUE_3_2_1=>'CU_And_Complexity',STRINGVALUE_3_2_2=>'Consumer_Evidence_Pack',STRINGVALUE_3_3_2=>'Consumer_Evidence_Product',STRINGVALUE_3_4_1=>'Proposed_Pricing',STRINGVALUE_3_4_2=>'Consumer_Evidence_Price',STRINGVALUE_3_4_2=>'Other_Price_Rationale',STRINGVALUE_4_2_1=>'Assortment_Strategy',STRINGVALUE_4_2_2=>'Merchandising_Strategy',STRINGVALUE_4_2_3=>'Trade_Promotion_Strategy',STRINGVALUE_6_2_1=>'Assumptions',STRINGVALUE_6_2_2=>'Sensitivity_Analysis'}; 
        Map<String,Boolean> sectionNegotiableMap = new Map<String,Boolean>{STRINGVALUE_1=>FALSE,STRINGVALUE_1_1=>FALSE,STRINGVALUE_1_2=>FALSE,STRINGVALUE_1_2=>FALSE,STRINGVALUE_1_3=>FALSE,STRINGVALUE_1_3=>FALSE,STRINGVALUE_1_3=>FALSE,STRINGVALUE_1_3=>FALSE,STRINGVALUE_1_4=>TRUE,STRINGVALUE_2=>TRUE,STRINGVALUE_2_1=>TRUE,STRINGVALUE_2_1=>TRUE,STRINGVALUE_2_2=>FALSE,STRINGVALUE_2_2=>TRUE,THREE=>FALSE,STRINGVALUE_3_1=>FALSE,STRINGVALUE_3_2=>FALSE,STRINGVALUE_3_2=>TRUE,STRINGVALUE_3_2=>FALSE,STRINGVALUE_3_3=>FALSE,STRINGVALUE_3_3=>FALSE,STRINGVALUE_3_4=>FALSE,STRINGVALUE_3_4=>TRUE,STRINGVALUE_3_5=>FALSE,STRINGVALUE_4=>TRUE,STRINGVALUE_4_1=>TRUE,STRINGVALUE_4_2=>TRUE,STRINGVALUE_4_2=>TRUE,STRINGVALUE_5=>FALSE,STRINGVALUE_5=>FALSE,STRINGVALUE_5_1=>FALSE,STRINGVALUE_5_1=>FALSE,STRINGVALUE_5_1=>FALSE,STRINGVALUE_5_2=>FALSE,STRINGVALUE_5_2=>FALSE,STRINGVALUE_5_2=>FALSE,STRINGVALUE_5_3=>TRUE,STRINGVALUE_6=>TRUE,STRINGVALUE_6_1=>FALSE,STRINGVALUE_6_2=>FALSE,STRINGVALUE_6_2=>FALSE,STRINGVALUE_6_2=>TRUE,STRINGVALUE_6_3=>TRUE,STRINGVALUE_6_3=>TRUE,STRINGVALUE_7=>FALSE,STRINGVALUE_7_1=>TRUE,STRINGVALUE_7_1=>FALSE,STRINGVALUE_7_2=>TRUE,STRINGVALUE_7_2=>TRUE,STRINGVALUE_7_3=>TRUE,STRINGVALUE_7_3=>TRUE,STRINGVALUE_7_3=>FALSE,STRINGVALUE_7_4=>TRUE,STRINGVALUE_8=>FALSE,STRINGVALUE_8_1=>TRUE,STRINGVALUE_8_1=>FALSE,STRINGVALUE_8_1=>TRUE,STRINGVALUE_8_1=>TRUE,STRINGVALUE_8_2=>TRUE,STRINGVALUE_8_2=>TRUE,STRINGVALUE_8_2=>TRUE,STRINGVALUE_8_3=>TRUE,STRINGVALUE_8_4=>FALSE,STRINGVALUE_8_5=>FALSE,STRINGVALUE_8_6=>FALSE,STRINGVALUE_8_6=>FALSE,STRINGVALUE_8_7=>FALSE,STRINGVALUE_8_7=>TRUE,STRINGVALUE_1_2_1=>FALSE,STRINGVALUE_1_2_1=>TRUE,STRINGVALUE_1_2_2=>TRUE,STRINGVALUE_1_2_2=>TRUE,STRINGVALUE_2_2_2=>FALSE,STRINGVALUE_3_1_1=>FALSE,STRINGVALUE_3_1_2=>TRUE,STRINGVALUE_3_1_3=>TRUE,STRINGVALUE_3_1_3=>TRUE,STRINGVALUE_3_1_5=>TRUE,STRINGVALUE_3_1_5=>FALSE,STRINGVALUE_3_2_1=>TRUE,STRINGVALUE_3_2_2=>TRUE,STRINGVALUE_3_3_2=>TRUE,STRINGVALUE_3_4_1=>FALSE,STRINGVALUE_3_4_2=>TRUE,STRINGVALUE_3_4_2=>TRUE,STRINGVALUE_4_2_1=>TRUE,STRINGVALUE_4_2_2=>TRUE,STRINGVALUE_4_2_3=>TRUE,STRINGVALUE_6_2_1=>FALSE,STRINGVALUE_6_2_2=>TRUE}; 
        Map<String,String> sectionFunctionalMap = new Map<String,String>{STRINGVALUE_1=>EMPTY_STRING,STRINGVALUE_1_1=>PL,STRINGVALUE_1_2=>PL,STRINGVALUE_1_2=>BD,STRINGVALUE_1_3=>BD,STRINGVALUE_1_3=>PL,STRINGVALUE_1_3=>PL,STRINGVALUE_1_3=>BB,STRINGVALUE_1_4=>PL,STRINGVALUE_2=>EMPTY_STRING,STRINGVALUE_2_1=>BD,STRINGVALUE_2_1=>BD,STRINGVALUE_2_2=>BD,STRINGVALUE_2_2=>CD,THREE=>EMPTY_STRING,STRINGVALUE_3_1=>CMI,STRINGVALUE_3_2=>CMI,STRINGVALUE_3_2=>CMI,STRINGVALUE_3_2=>BB,STRINGVALUE_3_3=>BB,STRINGVALUE_3_3=>CMI,STRINGVALUE_3_4=>CMI,STRINGVALUE_3_4=>BD,STRINGVALUE_3_5=>CMI,STRINGVALUE_4=>EMPTY_STRING,STRINGVALUE_4_1=>BD,STRINGVALUE_4_2=>BD,STRINGVALUE_4_2=>BD,STRINGVALUE_5=>EMPTY_STRING,STRINGVALUE_5=>R_D,STRINGVALUE_5_1=>R_D,STRINGVALUE_5_1=>R_D,STRINGVALUE_5_1=>R_D,STRINGVALUE_5_2=>SC,STRINGVALUE_5_2=>SC,STRINGVALUE_5_2=>SC,STRINGVALUE_5_3=>R_D,STRINGVALUE_6=>EMPTY_STRING,STRINGVALUE_6_1=>FINANCE,STRINGVALUE_6_2=>FINANCE,STRINGVALUE_6_2=>FINANCE,STRINGVALUE_6_2=>BB,STRINGVALUE_6_3=>FINANCE,STRINGVALUE_6_3=>BB,STRINGVALUE_7=>EMPTY_STRING,STRINGVALUE_7_1=>PL,STRINGVALUE_7_1=>BB,STRINGVALUE_7_2=>BB,STRINGVALUE_7_2=>BB,STRINGVALUE_7_3=>BD,STRINGVALUE_7_3=>BD,STRINGVALUE_7_3=>BB,STRINGVALUE_7_4=>PL,STRINGVALUE_8=>EMPTY_STRING,STRINGVALUE_8_1=>FINANCE,STRINGVALUE_8_1=>BD,STRINGVALUE_8_1=>CD,STRINGVALUE_8_1=>BD,STRINGVALUE_8_2=>BD,STRINGVALUE_8_2=>CMI,STRINGVALUE_8_2=>CD,STRINGVALUE_8_3=>BB,STRINGVALUE_8_4=>CMI,STRINGVALUE_8_5=>'RnD',STRINGVALUE_8_6=>BD,STRINGVALUE_8_6=>FINANCE,STRINGVALUE_8_7=>BD,STRINGVALUE_8_7=>BD,STRINGVALUE_1_2_1=>BD,STRINGVALUE_1_2_1=>BB,STRINGVALUE_1_2_2=>BD,STRINGVALUE_1_2_2=>BB,STRINGVALUE_2_2_2=>CD,STRINGVALUE_3_1_1=>BD,STRINGVALUE_3_1_2=>BD,STRINGVALUE_3_1_3=>CMI,STRINGVALUE_3_1_3=>BB,STRINGVALUE_3_1_5=>CMI,STRINGVALUE_3_1_5=>BD,STRINGVALUE_3_2_1=>BD,STRINGVALUE_3_2_2=>CMI,STRINGVALUE_3_3_2=>CMI,STRINGVALUE_3_4_1=>BD,STRINGVALUE_3_4_2=>CMI,STRINGVALUE_3_4_2=>BB,STRINGVALUE_4_2_1=>CD,STRINGVALUE_4_2_2=>CD,STRINGVALUE_4_2_3=>CD,STRINGVALUE_6_2_1=>FINANCE,STRINGVALUE_6_2_2=>FINANCE};
        
        Map<String,String> sectionSpanMap = new Map<String,String>{STRINGVALUE_1=>SECTION_SPAN,STRINGVALUE_1_1=>SECTION_SPAN,STRINGVALUE_1_2=>SECTION_SPAN,STRINGVALUE_1_2=>SECTION_SPAN,STRINGVALUE_1_3=>SECTION_SPAN,STRINGVALUE_1_3=>SECTION_SPAN,STRINGVALUE_1_3=>SECTION_SPAN,STRINGVALUE_1_3=>SECTION_SPAN,STRINGVALUE_1_4=>SECTION_SPAN,STRINGVALUE_2=>SECTION_SPAN,STRINGVALUE_2_1=>SECTION_SPAN,STRINGVALUE_2_1=>SECTION_SPAN,STRINGVALUE_2_2=>SECTION_SPAN,STRINGVALUE_2_2=>SECTION_SPAN,THREE=>SECTION_SPAN,STRINGVALUE_3_1=>SECTION_SPAN,STRINGVALUE_3_2=>SECTION_SPAN,STRINGVALUE_3_2=>SECTION_SPAN,STRINGVALUE_3_2=>SECTION_SPAN,STRINGVALUE_3_3=>SECTION_SPAN,STRINGVALUE_3_3=>SECTION_SPAN,STRINGVALUE_3_4=>SECTION_SPAN,STRINGVALUE_3_4=>SECTION_SPAN,STRINGVALUE_3_5=>SECTION_SPAN,STRINGVALUE_4=>SECTION_SPAN,STRINGVALUE_4_1=>SECTION_SPAN,STRINGVALUE_4_2=>SECTION_SPAN,STRINGVALUE_4_2=>SECTION_SPAN,STRINGVALUE_5=>SECTION_SPAN,STRINGVALUE_5=>SECTION_SPAN,STRINGVALUE_5_1=>SECTION_SPAN,STRINGVALUE_5_1=>SECTION_SPAN,STRINGVALUE_5_1=>SECTION_SPAN,STRINGVALUE_5_2=>SECTION_SPAN,STRINGVALUE_5_2=>SECTION_SPAN,STRINGVALUE_5_2=>SECTION_SPAN,STRINGVALUE_5_3=>SECTION_SPAN,STRINGVALUE_6=>SECTION_SPAN,STRINGVALUE_6_1=>SECTION_SPAN,STRINGVALUE_6_2=>SECTION_SPAN,STRINGVALUE_6_2=>SECTION_SPAN,STRINGVALUE_6_2=>SECTION_SPAN,STRINGVALUE_6_3=>SECTION_SPAN,STRINGVALUE_6_3=>SECTION_SPAN,STRINGVALUE_7=>SECTION_SPAN,STRINGVALUE_7_1=>SECTION_SPAN,STRINGVALUE_7_1=>SECTION_SPAN,STRINGVALUE_7_2=>SECTION_SPAN,STRINGVALUE_7_2=>SECTION_SPAN,STRINGVALUE_7_3=>SECTION_SPAN,STRINGVALUE_7_3=>SECTION_SPAN,STRINGVALUE_7_3=>SECTION_SPAN,STRINGVALUE_7_4=>SECTION_SPAN,STRINGVALUE_8=>SECTION_SPAN,STRINGVALUE_8_1=>SECTION_SPAN,STRINGVALUE_8_1=>SECTION_SPAN,STRINGVALUE_8_1=>SECTION_SPAN,STRINGVALUE_8_1=>SECTION_SPAN,STRINGVALUE_8_2=>SECTION_SPAN,STRINGVALUE_8_2=>SECTION_SPAN,STRINGVALUE_8_2=>SECTION_SPAN,STRINGVALUE_8_3=>SECTION_SPAN,STRINGVALUE_8_4=>SECTION_SPAN,STRINGVALUE_8_5=>SECTION_SPAN,STRINGVALUE_8_6=>SECTION_SPAN,STRINGVALUE_8_6=>SECTION_SPAN,STRINGVALUE_8_7=>SECTION_SPAN,STRINGVALUE_8_7=>SECTION_SPAN,STRINGVALUE_1_2_1=>SECTION_SPAN,STRINGVALUE_1_2_1=>SECTION_SPAN,STRINGVALUE_1_2_2=>SECTION_SPAN,STRINGVALUE_1_2_2=>SECTION_SPAN,STRINGVALUE_2_2_2=>SECTION_SPAN,STRINGVALUE_3_1_1=>SECTION_SPAN,STRINGVALUE_3_1_2=>SECTION_SPAN,STRINGVALUE_3_1_3=>SECTION_SPAN,STRINGVALUE_3_1_3=>SECTION_SPAN,STRINGVALUE_3_1_5=>SECTION_SPAN,STRINGVALUE_3_1_5=>SECTION_SPAN,STRINGVALUE_3_2_1=>SECTION_SPAN,STRINGVALUE_3_2_2=>SECTION_SPAN,STRINGVALUE_3_3_2=>SECTION_SPAN,STRINGVALUE_3_4_1=>SECTION_SPAN,STRINGVALUE_3_4_2=>SECTION_SPAN,STRINGVALUE_3_4_2=>SECTION_SPAN,STRINGVALUE_4_2_1=>SECTION_SPAN,STRINGVALUE_4_2_2=>SECTION_SPAN,STRINGVALUE_4_2_3=>SECTION_SPAN,STRINGVALUE_6_2_1=>SECTION_SPAN,STRINGVALUE_6_2_2=>SECTION_SPAN};
        
        Map<String,List<Object>> sectionMasterMap = new Map<String,List<Object>>{
            'External_ID__c' => new List<Object>(),IPM_DOCUMENT_TEMPLATE => new List<Object>(),'IPM_FunctionalRole__c' => new List<Object>(),
            'IPM_Negotiable__c' => new List<Object>(),IPM_SECTION_Name => new List<Object>(),IPM_SECTION_SEQUENCE=>new List<Object>(),
            'IPM_Section_Type__c' => new List<Object>(),'ProjectSpan__c' => new List<Object>() };
        
        for(IPM_Document_Template__c tempDoc : documentTemplateList)
        {
            for(Integer counter =0;counter < SequenceList.size();counter++)
            {
                if(sectionExternalIDMap.containsKey(SequenceList.get(counter)))
                {
                    sectionMasterMap.get('External_ID__c').add(sectionExternalIDMap.get(SequenceList.get(counter)));
                }
                
                if(sectionFunctionalMap.containsKey(SequenceList.get(counter)))
                {
                    sectionMasterMap.get('IPM_FunctionalRole__c').add(sectionFunctionalMap.get(SequenceList.get(counter)));
                }
                
                if(sectionNegotiableMap.containsKey(SequenceList.get(counter)))
                {
                    sectionMasterMap.get('IPM_Negotiable__c').add(sectionNegotiableMap.get(SequenceList.get(counter)));
                }
                
                if(sectionNameMap.containsKey(SequenceList.get(counter)))
                {
                    sectionMasterMap.get(IPM_SECTION_Name).add(sectionNameMap.get(SequenceList.get(counter)));
                }
                
                if(sectionExternalIDMap.containsKey(SequenceList.get(counter)))
                {
                    sectionMasterMap.get('IPM_Section_Type__c').add(sectionTypeMap.get(SequenceList.get(counter)));
                }
                
                if(sectionSpanMap.containsKey(SequenceList.get(counter)))
                {
                    sectionMasterMap.get('ProjectSpan__c').add(sectionSpanMap.get(SequenceList.get(counter)));
                }
                
                if(!String.isBlank(SequenceList.get(counter)))
                {
                    sectionMasterMap.get(IPM_SECTION_SEQUENCE).add(SequenceList.get(counter));
                }
                else
                {
                    sectionMasterMap.get(IPM_SECTION_SEQUENCE).add(counter+'.1');
                }
                
                sectionMasterMap.get(IPM_DOCUMENT_TEMPLATE).add(tempDoc.Id);
            }
        }
        
        sectionTemplateList = (List<IPM_Section__c>)IPM_TestFactory.createSObjectList('IPM_Section__c',sectionMasterMap,false);
        
        insert sectionTemplateList;
        
        Map<String,List<Object>> milestoneTemplateMap = new Map<String,List<Object>>
        {
            'IPM_Category__c' => new List<String>{HOUSEHOLDCARE,HOUSEHOLDCARE,HOUSEHOLDCARE,HOUSEHOLDCARE,HOUSEHOLDCARE,LAUNDRY,LAUNDRY,LAUNDRY,LAUNDRY},
            'IPM_Name__c' => new List<String>{'Charter Gate Approval','Contract Gate Approval','Market Ready Gate Approval','Market Deployment Gate Approval','Post Launch Evaluation','Charter Gate Approval','Contract Gate Approval','Market Ready Gate Approval','Post Launch Evaluation'},
            'IPM_No_Of_Days_for_Developing_Emerging__c' => new List<String>{EMPTY_STRING,EMPTY_STRING,EMPTY_STRING,'-120',EMPTY_STRING,EMPTY_STRING,EMPTY_STRING,'-120',EMPTY_STRING},
            'IPM_No_Of_Days_for_Developing__c' => new List<String>{EMPTY_STRING,EMPTY_STRING,EMPTY_STRING,'-180',EMPTY_STRING,EMPTY_STRING,EMPTY_STRING,'-180',EMPTY_STRING},
            'IPM_No_Of_Days__c' => new List<String>{BLANK_SPACE,BLANK_SPACE,BLANK_SPACE,'0',BLANK_SPACE,BLANK_SPACE,BLANK_SPACE,BLANK_SPACE,BLANK_SPACE},
            'IPM_Active__c'=> new list<Boolean>{true,true,true,true,true,true,true,true,true},
            IPM_PHASE=> new List<String>{IDEAS,FEASIBILITY,CAPABILITY,MARKET_READY,MARKET_DEPLOYMENT,IDEAS,FEASIBILITY,CAPABILITY,MARKET_READY},
            'IPM_Type_of_gate__c' => new List<String>{CHARTER,CONTRACT,MARKET_READY,MARKET_DEPLOYMENT,EMPTY_STRING,CHARTER,CONTRACT,MARKET_READY,EMPTY_STRING},
            'IPM_Type_of_Milestone__c' => new List<String>{STANDARD,STANDARD,STANDARD,STANDARD,STANDARD,STANDARD,STANDARD,STANDARD,STANDARD},
            IPM_PROJECT_TYPE => new List<String>{ORIGINAL_PROJECTYPE,ORIGINAL_PROJECTYPE,ORIGINAL_PROJECTYPE,ORIGINAL_PROJECTYPE,ORIGINAL_PROJECTYPE,OPERATIONAL_PROJECTYPE,OPERATIONAL_PROJECTYPE,OPERATIONAL_PROJECTYPE,OPERATIONAL_PROJECTYPE},
            IPM_PROJECT => new List<Id>{masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id,masterProjectList[0].Id},
            RECORD_TYPE_ID => new List<Id>{SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE,SYSTEM_MILESTONE_RECTYPE} 
        };
        
        milestoneTemplateList = (List<IPM_Milestone__c>)IPM_TestFactory.createSObjectList('IPM_Milestone__c',milestoneTemplateMap,false);
        
        
        insert milestoneTemplateList;
        
        
        List<Id> recordIdList = new List<Id>{recTypeRnD,recTypeIDPOS,recTypeIDRQS,recTypeIDCR,recTypeRnDFeasibility,recTypeSCFeasibility,recTypeRisk};
        
        Map<String,List<Object>> questionnaireMap = new Map<String,List<Object>>{RECORD_TYPE_ID => new List<Id>(),
            'IPM_Charter_Score__c' => new List<Integer>(),'IPM_Contract_Score__c' => new List<Integer>(),'IPM_Market_Deployment_Score__c' => new List<Integer>(),'IPM_Market_Ready_Score__c' => new List<Integer>(),
            'Is_Master__c' => new List<Boolean>(),IPM_PROJECT => new List<Id>(),'IPM_Score__c' => new List<Integer>()};
        
        for(Id recordId : recordIdList)
        {
            for(Integer counter=0;counter < 3;counter++)
            {
                questionnaireMap.get(RECORD_TYPE_ID).add(recordId);  
                questionnaireMap.get('Is_Master__c').add(true);
                questionnaireMap.get('IPM_Score__c').add(counter);
                questionnaireMap.get('IPM_Charter_Score__c').add(counter);
                questionnaireMap.get('IPM_Contract_Score__c').add(counter);
                questionnaireMap.get('IPM_Market_Deployment_Score__c').add(counter);
                questionnaireMap.get('IPM_Market_Ready_Score__c').add(counter);
                questionnaireMap.get(IPM_PROJECT).add(masterProjectList[0].Id); 
            }
        }
        
        questionnaireTemplateList = (List<IPM_Questionnaire__c>)IPM_TestFactory.createSObjectList('IPM_Questionnaire__c',questionnaireMap,false);
        
        insert questionnaireTemplateList;
        
        mdmGeoList = Test.loadData(MDM_Geography__c.sObjectType, 'IPM_Unilever_Geo');
        
        projectMetadataList = Test.loadData(IPM_ProjectMetadata__c.sObjectType, 'IPM_Project_Metadata');
        
        projectTypeList = Test.loadData(IPM_Project_Type__c.sObjectType, 'IPM_ProjectType'); 
        
        cmiGateKPIInputList = Test.loadData(IPM_Gate_CMI_KPI_Inputs__c.sObjectType, 'IPM_GateCMIKPIInputs');
        
        cmiColorCodes = Test.loadData(IPM_CMI_Color_Mapping__c.sObjectType, 'IPM_CMIColorCodes');
    }
    
    /***********************************************************************************************************************************************************
	* @description To insert sample data list of IPM_Gate_CMI__c
	**************************************************************************************************/
    public static List<IPM_Gate_CMI__c> createCMIGateRecords(Boolean doInsert,List<IPM_Project__c> pProjectList)
    {
        List<IPM_Gate_CMI__c> finalCMIGateList = new List<IPM_Gate_CMI__c>();
        
        Map<String,List<Object>> CMIGateRecordMap = new Map<String,List<Object>>{
            'Gate__c' => new List<String>{CHARTER,CHARTER,CONTRACT},
            'Element__c' => new List<String>{CONCEPT,CONCEPT,'Product Test'},
            'Test__c' => new List<String>{'Idea Screener - Nielsen','Innoscreen * ideas - Ipsos','Branded Product Test - Ipsos'},
            'IPM_Skip_Test__c' => new List<Boolean>{false,false,false},
            'Country__c' => new List<String>{AFRICA,'Brazil',AFRICA},
            'KPI__c' => new List<String>{'Salience/Attraction Matrix','RED','Overall Score'}
        };
        
        for(IPM_project__c project : pProjectList)
        {
            List<IPM_Gate_CMI__c> tempCMIGateList = (List<IPM_Gate_CMI__c>)IPM_TestFactory.createSObjectList('IPM_Gate_CMI__c',CMIGateRecordMap,false);
            
            for(IPM_Gate_CMI__c cmiGate : tempCMIGateList)
            {
                cmiGate.IPM_Project__c = project.Id;
            }
            
            finalCMIGateList.addAll(tempCMIGateList);
        }
        
        if(doInsert)
        {
            insert finalCMIGateList;
        }
        
        return finalCMIGateList;
    }

    /***********************************************************************************************************************************************************
	* @description Create reporting custom setting records
	**************************************************************************************************/
    
    public static IPM_Reporting__c createIPMReportingCustomSetting(String strName, Boolean doInsert) {
        
        IPM_Reporting__c RP = new IPM_Reporting__c(Name = strName, Last_Batch_RunDate__c= System.now(), Y1__c = 1, Y2__c=2, Y3__c=3, Y4__c=4, Y5__c=5, Y_1__c = -1, Y_2__c=-2, Y_3__c=-3);  
        if(doInsert){
        	insert RP;
        }
        return RP;
    } 
    
    /***********************************************************************************************************************************************************
	* @description coreparameter configuration
	**************************************************************************************************/
    
    public static List<IPM_CoreParameter_Configration__c> createIPMCoreParameterConfig() {
        return Test.loadData(IPM_CoreParameter_Configration__c.sObjectType, 'IPM_CoreparameterConfig');
    } 
    
    /***********************************************************************************************************************************************************
	* @description To get all coreparameter questions
	**************************************************************************************************/
    
    public static List<IPM_CoreParameter_Questions__c> createIPMCoreParameterAllQuestions() {
        return Test.loadData(IPM_CoreParameter_Questions__c.sObjectType, 'IPM_CoreparameterQuestions');   
    } 
    
    /***********************************************************************************************************************************************************
	* @description To  get innovation and renovation details
	**************************************************************************************************/
    
    public static List<IPM_InnovationRenovation__c> createIPMCoreParameterInnoReno() {
        return Test.loadData(IPM_InnovationRenovation__c.sObjectType, 'IPM_InnovationRenova');   
    } 
    
    /***********************************************************************************************************************************************************
	* @description To get category based conditions
	**************************************************************************************************/
    
    public static List<IPM_Category__c> createIPMCategory() {
        return Test.loadData(IPM_Category__c.sObjectType, 'IPM_Category');   
    }  
    
    /***********************************************************************************************************************************************************
	* @description To get Project Type data
	**************************************************************************************************/
    
    public static List<IPM_Project_Type__c> createIPMProjectType() {
        return Test.loadData(IPM_Project_Type__c.sObjectType, 'IPM_ProjectType'); 
    } 
    
    /***********************************************************************************************************************************************************
	* @description To get coreparameter graph
	**************************************************************************************************/
    
    public static List<IPM_Coreparameter_Graph__c> createCoreGraph() {
        return Test.loadData(IPM_Coreparameter_Graph__c.sObjectType, 'IPM_Coreparameter_Graph'); 
    }
    
    /***********************************************************************************************************************************************************
	* @description To get list of  ipm_project__share
	**************************************************************************************************/
    public static List<ipm_project__share> shareIPMProject(List<IPM_Project__c>listProjects,List<User>listUsers){
        List<ipm_project__share>listProjShare=new List<ipm_project__share>();
        for(IPM_Project__c pro:listProjects){
            for(user u:listUsers){
                ipm_project__share projShare=new ipm_project__share();
                projShare.accessLevel=IPM_ConstantUtils.EDIT_ACCESS;
                projShare.userorgroupid=u.id;
                projShare.parentid=pro.id;
                listProjShare.add(projShare);
            }
        }
        
        return listProjShare;
    }
    
    /***********************************************************************************************************************************************************
	* @description To share rollout records
	**************************************************************************************************/
    
    public static List<IPM_Project_Rollout__Share> shareIPMRollout(List<IPM_Project_Rollout__c>listProjectRollouts,List<User>listUsers){
        List<IPM_Project_Rollout__Share>listProjRollShare=new List<IPM_Project_Rollout__Share>();
        for(IPM_Project_Rollout__c pro:listProjectRollouts){
            for(user u:listUsers){
                IPM_Project_Rollout__Share projRollShare=new IPM_Project_Rollout__Share();
                projRollShare.accessLevel=IPM_ConstantUtils.EDIT_ACCESS;
                projRollShare.userorgroupid=u.id;
                projRollShare.parentid=pro.id;
                listProjRollShare.add(projRollShare);
            }
        }
        
        return listProjRollShare;
    }
    
    /***********************************************************************************************************************************************************
	* @description To share bosscard records
	**************************************************************************************************/
    
    public static List<ipm_bosscard__share> shareIPMBosscard(List<IPM_Bosscard__c>listBosscard,List<User>listUsers){
        List<ipm_bosscard__share>listBossShare=new List<ipm_bosscard__share>();
        for(IPM_Bosscard__c pro:listBosscard){
            for(user u:listUsers){
                ipm_bosscard__share bossShare=new ipm_bosscard__share();
                bossShare.accessLevel=IPM_ConstantUtils.EDIT_ACCESS;
                bossShare.userorgroupid=u.id;
                bossShare.parentid=pro.id;
                listBossShare.add(bossShare);
            }
        }
        
        return listBossShare;
    }
    
    /***********************************************************************************************************************************************************
	* @description To share bosscard records
	**************************************************************************************************/
    
    public static List<IPM_Company_Card__Share> shareCompanyCard(List<IPM_Company_Card__c>listCCard,List<User>listUsers){
        List<IPM_Company_Card__Share>listCCShare=new List<IPM_Company_Card__Share>();
        for(IPM_Company_Card__c pro:listCCard){
            for(user u:listUsers){
                IPM_Company_Card__Share ccShare=new IPM_Company_Card__Share();
                ccShare.accessLevel=IPM_ConstantUtils.EDIT_ACCESS;
                ccShare.userorgroupid=u.id;
                ccShare.parentid=pro.id;
                listCCShare.add(ccShare);
            }
        }
        
        return listCCShare;
    }
    
    /***********************************************************************************************************************************************************
	* @description To share ipm_section__share list
	**************************************************************************************************/
    public static List<ipm_section__share> shareIPMSection(List<IPM_Section__c>listSections,List<User>listUsers){
        List<ipm_section__share>listSecShare=new List<ipm_section__share>();
        for(IPM_Section__c pro:listSections){
            for(user u:listUsers){
                ipm_section__share secShare=new ipm_section__share();
                secShare.accessLevel=IPM_ConstantUtils.EDIT_ACCESS;
                secShare.userorgroupid=u.id;
                secShare.parentid=pro.id;
                listSecShare.add(secShare);
            }
        }
        
        return listSecShare;
    }
    
    /***********************************************************************************************************************************************************
	* @description To share IPM_Project_Document_Section_Content__share list
	**************************************************************************************************/
    public static List<IPM_Project_Document_Section_Content__share> shareIPMSectionContent(List<IPM_Project_Document_Section_Content__c>listContents,List<User>listUsers){
        List<IPM_Project_Document_Section_Content__share>listSecConShare=new List<IPM_Project_Document_Section_Content__share>();
        for(IPM_Project_Document_Section_Content__c prosecCon:listContents){
            for(user u:listUsers){
                IPM_Project_Document_Section_Content__share secConShare=new IPM_Project_Document_Section_Content__share();
                secConShare.accessLevel=IPM_ConstantUtils.EDIT_ACCESS;
                secConShare.userorgroupid=u.id;
                secConShare.parentid=prosecCon.id;
                listSecConShare.add(secConShare);
            }
        }
        
        return listSecConShare;
    }
    
    /***********************************************************************************************************************************************************
	* @description To get IPM_Gate_CMI_KPI_Inputs__c
	**************************************************************************************************/
    public static List<IPM_Gate_CMI_KPI_Inputs__c> loadCMIKPIInput(){
        return Test.loadData(IPM_Gate_CMI_KPI_Inputs__c.sObjectType, 'IPM_GateCMIKPIInputs');
    }
    
    /***********************************************************************************************************************************************************
	* @description To get IPM_CMI_Color_Mapping__c
	**************************************************************************************************/
    public static List<IPM_CMI_Color_Mapping__c> loadCMIColorMapping(){
        return Test.loadData(IPM_CMI_Color_Mapping__c.sObjectType, 'IPM_CMIColorCodes');
    }
    
}
