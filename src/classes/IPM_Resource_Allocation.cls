/*************************************************************************************************************
* @author:Cognizant
* @date: 25/09/2014
* @description:add new team members in current project.
*    and assign project leader,deputy project leader and gatekeeper based on company card of current project.
*    assign technical project leader.
Assign PL or FL for rollouts.
* @reference:IPM_Resource_Allocation_PartRevamp page
@Business Logic: This class is used to Allocate the Resources in a Project across various Roles eg: BD, FInancie,Guest etc.
				This class also is used to Support the PL selection for the Rollouts. The user is selected based on the category, 
				userprofile and company card information availavble. If a user foesnot belong to the company card for which it is selected. The Business logic suggest to dynamically create the same.

*/
public with sharing class IPM_Resource_Allocation {   
    
    //String Literals replacement
    private static final String QUERY_ROLE_STR = 'IPM_User_Role__c=\''; 
    private static final String QUERY_FIELDS_STR = 'ipm_user__r.smallphotourl,';
    private static final String QUERY_WHERE_STR = 'IPM_User__r.UserRole.Name FROM IPM_user_profile__c WHERE  (IPM_User__r.IsActive=True '; 
    private static final String QUERY_HOLDCATEGORY_STR = ' and IPM_HoldCategory__c like \'%'; 
    private static final String QUERY_HOLDCATEGORY_STRING = 'IPM_HoldCategory__c like \'%';
    private static final String QUERY_STRING_PROFILE='IPM_User__r.UserRole.Name FROM IPM_user_profile__c WHERE  (IPM_User__r.IsActive=True AND ';
    public static final  String IPM_RESOURCEALLOCATION_STR = IPM_Resource_Allocation.class.getName();
    private static final string ADD_MEMBER_TO_WRAPPER = 'AddMemberToWrapper';
    private static final string UPDATE_CORE_MEMBER = 'UpdateCoreMember';
    private static final string CREATE_FINANCE_MEMBER ='createfinanceMember';
    private static final string DELETE_FINANCE_MEMBER ='deletefinanceMember';
    private static final string FILTER_LEADER_MEMBER ='FilterLeaderMember';
    private static final string SAME_CATEGORY_ROLLOUT_PROFILES ='getSameCategoryRolloutProfiles'; 
    private static final string ASSIGN_LEADER_MEMBER ='assignLeaderMember'; // used in exception message
    private static final string BEGIN_QUERY ='SELECT IPM_User__c,IPM_User_Role__c,IPM_User__r.name,IPM_User__r.email,';
    private static final string BEGIN_QUERY_TEAM ='SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,IPM_User__r.email,';
    private static final string MID_QUERY_TEAM =' IPM_User__r.SmallPhotoUrl,';
    private static final string PERCENTAGE_SLASH='%\'';
	private static final String MCO_STRING = ' IPM_Company_Card__r.IPM_MCO__c = \'';
	private static final String BCKWRD_SLASH = '\'';  
    private static final string QUERY_LIMIT=' limit 100';
    private static final string GKM3_CAT='Personal Care' ;
    private static final string MY_MCO='myMCO' ;
	private static final string GKM3=IPM_ConstantUtils.GATE_KEEPING_MODEL_3;
	private static final string AND_STRING =' AND ';
	private static final string OLD_SRC_FLTR = '  ) AND IPM_User__r.id NOT IN :oldresourceid';
	private static final string SOQL_INCLUDES = ' IPM_User_Category__c INCLUDES ';
	private static final string SRCH_FILTER ='IPM_User__r.email LIKE :querySearchTeamMem OR  IPM_User_Role__c LIKE :querySearchTeamMem)';
	private static final string CAT_STRNG ='(:category)';
	private static final string QUERY_PORTION1 = 'IPM_User__r.UserRole.Name FROM IPM_user_profile__c WHERE  IPM_User__r.IsActive=True AND ';
	private static final string QUERY_PORTION2 = 'IPM_User__r.UserRole.Name FROM IPM_user_profile__c WHERE  (IPM_User__r.IsActive=True';
	private static final String PROJECT_LEADER=IPM_ConstantUtils.TEAM_PROJECT_LEADER;
	private static final String FUNCTION_LEADER = IPM_ConstantUtils.FUNCTIONAL_ROLE_FINANCE;
	private static final String PERCNT_STRING = '\'%' ;
	private static final String USER_FUNCTION_STRING ='AND IPM_User_Function__c = \'';
	private static final String USERNAME_CLAUSE =' AND (IPM_User__r.Name Like \'';
	private static final String USEREMAIL_CLAUSE =' or IPM_User__r.email like \'';
	private static final String USERECAT_CLAUSE =' IPM_HoldCategory__c LIKE ';
	private static final string ALL_CAT_STRNG ='allcategory';
	private static final string FNCT_STRNG = '  ) AND IPM_User_Function__c = \'';
	private static final string USER_ROLE_STRNG = '  ) AND IPM_User_Role__c = \''; 
	private static final string HLD_CAT_STRNG=' and IPM_HoldCategory__c LIKE ';
	
    //@description:To store project id FROM url parameter

    public String projectID{get;set;}
    //@description:To store role type FROM url parameter
    public String roleType{get;set;}
    //@description:To store category FROM url parameter
    public String category{get;set;}
    //@description:get a list of assigned member
    public list<IPM_Project_Resource__c>assignedMember{get;set;}
    //@description:get a set of assigned member
    public set<String>assignedList=new set<string>();
    //@description:hold PL value
    public string PL{get;set;}
    //@description:hold DPL value
    public string DPL{get;set;}
    //@description:checking whether PL has edit access
    public boolean isPLEdit{get;set;}
    //@description:wrapper class to add new team members
    public list<wrapperclass> teamMembers{get;set;}
    //@description:hold search member value
    public String searchTeamMem{get;set;}
    //@description:hold search member by category
    public string searchTeambyCat{get;set;}
    //@description:hold search leader member by category
    public string searchLeaderbyCat{get;set;}
    //@description:hold core member details FROM url
    public string coreMembers{get;set;}
    //@description:list of user profile details
    public list<IPM_User_Profile__c>lstUserProfile{get;set;}
    //@description:hold project company card name
    public string CCardName{get;set;}
    //@description:hold search core member value FROM page
    public string searchCoreTeam{get;set;}
    //@description:hold search leader member value FROM page
    public string searchLeader{get;set;}
    //@description:hold SELECTed core member value FROM page
    public string selecetedCoreMember{get;set;}
    //@description:hold button label value
    public string buttonLabel{get;set;}
    //@description:if no match found while search member FROM filter
    public string isNoMatchfound{get;set;}
    //@description:get user role type
    public string changeRoleType{get;set;}
    //@description:get already added members for current project
    public set<id>oldresourceid=new set<id>();
    //@description:set of duplicate members
    public set<id>avoidDupUser{get;set;}
    
    //@description:to distinguish if the page is invoked from Rollouts to use selectOptions instead of checkboxes for user selection
    public Boolean isInvokedFromRollouts{get;set;}
    //@description:Rollouts user selection type - PL/FL
    public String leaderType{get;set;}
    //@description:to distinguish if the Rollouts user selection is for PL
    public Boolean isLeaderTypePL{get;set;}
    //@description:to distinguish if the Rollouts user selection is for FL
    public Boolean isLeaderTypeFL{get;set;}
    
    //@description:hold SELECTed leader member value FROM page
    public string selectedLeaderMember{get;set;}
    //@description:hold SELECTed leader member value FROM page
    public string rolloutId{get;set;}
    //@description:hold SELECTed span of rollout leader member value FROM page
    public string rolloutSpan{get;set;}
    //@description:to render / hode My/All Category selections 
    public Boolean isMyORAllCatSelectAva{get;set;} 
    //@description: leader user profiles filtered from IPM_RolloutPlansTableController 
    public list<IPM_User_Profile__c> leaderUsers{get;set;}
     
    public IPM_Project_Rollout__c cntxtRLOut{get;set;} 
     
    @TestVisible private set<id>plDPLSet=new set<id>();//set project leader id's and deputy project leader id's
    @TestVisible private set<id>dupPLDPLSet=new set<id>();//set project leader id's and deputy project leader id's
    @TestVisible private set<id>projectPLDPLSet=new set<id>();//set of PL and DPL id's
    @TestVisible public  IPM_Project__c ipmproject{get;set;}  
    
    private Map<String,IPM_Category__c> customSettingCategory = IPM_Category__c.getAll();
    private string filterCatList;

    
    
       
    
    /*************************************************************************************************************
    * @description:Constructor of the class.get all url parameter values in variables.get project details.
    */
    public IPM_Resource_Allocation (){
    
        IPM_IECompatible.ieFix();//Added for compatibility fix
        avoidDupUser=new set<id>();
        leaderUsers = new list<IPM_User_Profile__c>(); 
        string RoletypeRND=IPM_ConstantUtils.BLANK;
        isNoMatchfound=IPM_ConstantUtils.BLANK;
        changeRoleType=IPM_ConstantUtils.BLANK;
        isLeaderTypePL=false;
        isLeaderTypeFL=false;
        isInvokedFromRollouts = false;
        
        projectID=Apexpages.currentpage().getParameters().get(String.escapeSingleQuotes(IPM_ConstantUtils.TEAM_PROJECTID));
        ipmproject=[SELECT id,IPM_Project_Rollout__r.MCO_Name__c,IPM_ProjectGKM__c,IPM_GateKeepingModel__c,Deputy_Project_Leader__c,IPM_Project_Gatekeeper__c,IPM_Project_Leader__c,IPMProject_Span__c,
            IPM_Technical_Project_Leader__c,IPM_Company_Card__c,IPM_Category_Text__c FROM 
            IPM_Project__c WHERE id=:projectID LIMIT 1];
        category=Ipmproject.IPM_Category_Text__c;

        // get user profile map
        string invokedFrom = Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.INVOKED_FROM); 
        if(invokedFrom != Null && invokedFrom.equals(IPM_ConstantUtils.INVOKED_FROM_ROLLOUTS))
        {
            isInvokedFromRollouts = true;   
        }
        
        searchTeambyCat= (!isInvokedFromRollouts && ipmproject.IPM_ProjectGKM__c == GKM3 && ipmproject.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_GLOBAL) 
           ||( ipmproject.IPM_ProjectGKM__c!=GKM3)?IPM_ConstantUtils.TEAM_MYCATEGORY :MY_MCO;
        
        Set<String> excludeCatSelGKMs  = new Set<String>{IPM_ConstantUtils.GKM_1,IPM_ConstantUtils.GKM_2,IPM_ConstantUtils.GKM_4};
        
        isMyORAllCatSelectAva = isInvokedFromRollouts && (!excludeCatSelGKMs.Contains(ipmproject.IPM_ProjectGKM__c)) ;  
        
        // check if the Team Management is invoked or Member (PL and Finance) selection for Rollouts is invoked 
       if(isInvokedFromRollouts!=null && isInvokedFromRollouts)
        {
            
            leaderType = Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.ROLLOUT_LEADER_TYPE);           
            rolloutId = Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.ROLLOUTID);            
            rolloutSpan = Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.ROLLOUT_SPAN);
            cntxtRLOut =[Select Id,IPM_Rollout_Span__c,Local_Project_Span__c,Name,MCO_Name__c from IPM_Project_Rollout__c where Id=:rolloutId];
            
            if(leaderType != Null && leaderType==IPM_ConstantUtils.ROLLOUT_PL_TYPE)
            {
                isLeaderTypePL = true;  
              
                if(leaderType==IPM_ConstantUtils.ROLLOUT_PL_TYPE && rolloutSpan == IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL)
                {
                    ButtonLabel=IPM_ConstantUtils.USER_FUNCTON_PL;
                }
                else if(leaderType==IPM_ConstantUtils.ROLLOUT_PL_TYPE && rolloutSpan == IPM_ConstantUtils.ROLLOUT_SPAN_LOCAL)
                {
                    ButtonLabel=Label.IPM_MCO_Rollout_Leader;
                }
            }
            else if(leaderType==IPM_ConstantUtils.ROLLOUT_FL_TYPE)
            {
                isLeaderTypeFL = true; 
                ButtonLabel=IPM_ConstantUtils.USER_FUNCTON_FL;
            }  
            SearchLeaderbyCat='';
            getSameCategoryRolloutProfiles();      
        }else
        {
            if(String.IsNotBlank(String.valueOf(ipmproject.Deputy_Project_Leader__c)))
            {
                plDPLSet.add(ipmproject.Deputy_Project_Leader__c);
            }
            if(String.IsNotBlank(String.valueOf(ipmproject.IPM_Project_Gatekeeper__c)) && ipmproject.Deputy_Project_Leader__c!=ipmproject.IPM_Project_Gatekeeper__c
            && Ipmproject.IPM_Project_Leader__c!=ipmproject.IPM_Project_Gatekeeper__c)
            {
                avoidDupUser.add(ipmproject.IPM_Project_Gatekeeper__c);
            }
            if(String.IsNotBlank(String.valueOf(ipmproject.IPM_Project_Leader__c)))
            {
                plDPLSet.add(Ipmproject.IPM_Project_Leader__c);
            }
            if(String.IsNotBlank(String.valueOf(ipmproject.IPM_Technical_Project_Leader__c)) && ipmproject.Deputy_Project_Leader__c!=ipmproject.IPM_Technical_Project_Leader__c
            && Ipmproject.IPM_Project_Leader__c!=ipmproject.IPM_Technical_Project_Leader__c)
            {
                avoidDupUser.add(Ipmproject.IPM_Technical_Project_Leader__c);
            }
            
            PL=Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.TEAM_PL);
            
            DPL=Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.TEAM_DPL); 
            
            
            if(IPM_ConstantUtils.TEAM_TRUE==PL||IPM_ConstantUtils.TEAM_TRUE==DPL)
            {
                isPLEdit=true;
            }
            projectID=String.escapeSingleQuotes(projectID);
            
            roleType=Apexpages.currentpage().getParameters().get(String.escapeSingleQuotes(IPM_ConstantUtils.TEAM_ROLETYPE));
            
            RoletypeRND=Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.TEAM_ROLETYPE);
            
                 
            coreMembers=Apexpages.currentpage().getParameters().get(IPM_ConstantUtils.TEAM_COREMEMBER);
            
            CCardName=Ipmproject.IPM_Company_Card__c;
            if(IPM_ConstantUtils.TEAM_RND==RoletypeRND)
            {
                roleType=IPM_ConstantUtils.TEAM_RESEARCH_DEVELOPMENT;
            }
            changeRoleType = roleType;
            
            if(IPM_ConstantUtils.TEAM_GUEST == roleType && !(ipmproject.IPM_ProjectGKM__c==GKM3 && ipmproject.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_LOCAL ))
            {
                searchTeambyCat=IPM_ConstantUtils.TEAM_ALLCATEGORY;
            }
            //get list of role FROM user object
            getAssignedTeamMember();
            getSameCategory();
            GetCoreMemberds();
        }
    }
    /*************************************************************************************************************
    * @description:Get all members FROM same category for functional role.
    */
    public void getSameCategoryPartOne()
    {
      list<IPM_Project_Resource__c>lstoldres=[SELECT IPM_User__c,IPM_Role_Type__c FROM IPM_Project_Resource__c WHERE IPM_Project__c=:projectID LIMIT 50000];
        for(IPM_Project_Resource__c res:lstoldres)
        { 
            if(string.isNotBlank(roleType) && roleType.equals(res.IPM_Role_Type__c) && plDPLSet.contains(res.IPM_User__c)){
                dupPLDPLSet.add(res.IPM_User__c);
            }
            oldresourceid.add(res.IPM_User__c);
        }
        getSameCategoryPartThree();
        
       
    }
    /*************************************************************************************************************
    * @description:Get all members FROM same category for functional role.
    */
    public void getSameCategoryPartThree()
    {
      if(!dupPLDPLSet.isEmpty()&& String.IsNotBlank(String.valueOf(ipmproject.Deputy_Project_Leader__c)) && !dupPLDPLSet.isEmpty() && !dupPLDPLSet.contains(ipmproject.Deputy_Project_Leader__c)){
           projectPLDPLSet.add(ipmproject.Deputy_Project_Leader__c);   
         }
        if(!dupPLDPLSet.isEmpty()&& String.IsNotBlank(String.valueOf(ipmproject.IPM_Project_Leader__c)) && !dupPLDPLSet.contains(ipmproject.IPM_Project_Leader__c)){
            projectPLDPLSet.add(ipmproject.IPM_Project_Leader__c);  
        }
        if(dupPLDPLSet.isEmpty() && String.IsNotBlank(String.valueOf(ipmproject.Deputy_Project_Leader__c))){
            projectPLDPLSet.add(ipmproject.Deputy_Project_Leader__c);
        }
        if(dupPLDPLSet.isEmpty() && String.IsNotBlank(String.valueOf(ipmproject.IPM_Project_Leader__c))){
            projectPLDPLSet.add(ipmproject.IPM_Project_Leader__c);
        }
    }
  /*************************************************************************************************************
    * @description:Get all members FROM same category for functional role.
    */
    public void getSameCategoryPartTwo(string UQuery)
    {
    list<IPM_User_Profile__c>lstuser=new list<IPM_User_Profile__c>();
    map<id,id>uniqueUsers=new map<id,id>();
    lstuser=database.query(UQuery);
            for(IPM_User_Profile__c u:lstuser)
            {
                if((avoidDupUser.contains(u.IPM_User__r.id) && u.IPM_User_Role__c == IPM_ConstantUtils.FUNCTIONAL_ROLE_RD) || !avoidDupUser.contains(u.IPM_User__r.id) )
                {
                    uniqueUsers.put(u.IPM_User__c,u.id);
                }
            }
            if(!projectPLDPLSet.isEmpty()){
                List<IPM_user_profile__c>lstPLUser=new List<IPM_user_profile__c>();
                lstPLUser=[SELECT IPM_User__c FROM IPM_user_profile__c WHERE IPM_User__c IN:projectPLDPLSet LIMIT 1000];
                for(IPM_User_Profile__c u:lstPLUser){
                    uniqueUsers.put(u.IPM_User__c,u.id);
                }
            }
            lstuser=[SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,
            IPM_User__r.email,IPM_User__r.SmallPhotoUrl,
            IPM_User__r.UserRole.Name 
            FROM IPM_user_profile__c WHERE id IN:uniqueUsers.values() LIMIT 10000];
            for(IPM_User_Profile__c u:lstuser)
            {
                teamMembers.add(new wrapperclass(u));
            }
  }
    /*************************************************************************************************************
    * @description:Get all members FROM same category for functional role.
    */
    public void getSameCategory()
    {
        getSameCategoryPartOne();
    teamMembers=new list<wrapperclass>();
        string UQuery=IPM_ConstantUtils.BLANK;
        
        filterCategoriesString();
              
       if(searchTeambyCat==MY_MCO)  
          {
        String QUERY_STRING = BEGIN_QUERY_TEAM + MID_QUERY_TEAM + QUERY_STRING_PROFILE ; 
          String resolvedField =  ipmproject.IPM_Project_Rollout__r.MCO_Name__c;
        UQuery = QUERY_STRING +MCO_STRING + resolvedField+BCKWRD_SLASH ; 
          
          if(String.IsNotBlank(String.valueOf(changeRoleType)))
              {
                  UQuery=UQuery+AND_STRING+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+BCKWRD_SLASH;
              }
              
              UQuery= UQuery + OLD_SRC_FLTR+QUERY_LIMIT;
          }  
     
     else if(searchTeambyCat==IPM_ConstantUtils.TEAM_MYCATEGORY)
          {
                    String filterCat = ipmproject.IPM_ProjectGKM__c==GKM3 ? (!isInvokedFromRollouts && ipmproject.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_GLOBAL ? CAT_STRNG:filterCatList)  :CAT_STRNG; 
              UQuery=IPM_ConstantUtils.BLANK;
              UQuery = BEGIN_QUERY_TEAM;
              UQuery = UQuery+MID_QUERY_TEAM;
              UQuery = UQuery+QUERY_STRING_PROFILE;
              UQuery = UQuery+SOQL_INCLUDES+ filterCat ; 
             
              if(String.IsNotBlank(String.valueOf(changeRoleType)))
              {
                  UQuery=UQuery+AND_STRING+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+BCKWRD_SLASH;
              }
              UQuery= UQuery + OLD_SRC_FLTR+QUERY_LIMIT;
          }
        else if(IPM_ConstantUtils.TEAM_ALLCATEGORY==searchTeambyCat)
        {
            if(IPM_ConstantUtils.TEAM_GUEST==roleType)
            {
                UQuery=IPM_ConstantUtils.BLANK;
                UQuery =BEGIN_QUERY_TEAM;
                UQuery = UQuery+MID_QUERY_TEAM;
                UQuery = UQuery+QUERY_PORTION2;
                UQuery = UQuery+' AND IPM_HoldCategory__c!=null) ';
                UQuery = UQuery+'AND IPM_User__r.id NOT IN :oldresourceid '+QUERY_LIMIT;
                
            }
            else
            {
                UQuery =IPM_ConstantUtils.BLANK;
                UQuery = BEGIN_QUERY_TEAM;
                UQuery = UQuery+MID_QUERY_TEAM;
                UQuery = UQuery+QUERY_STRING_PROFILE;
                UQuery = UQuery+' IPM_HoldCategory__c != null ';
                if(String.IsNotBlank(String.valueOf(changeRoleType)))
                {
                    UQuery = UQuery+AND_STRING+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+'\' ';
                }
                UQuery = UQuery+' ) AND IPM_User__r.id NOT IN :oldresourceid '+QUERY_LIMIT;
            } 
        }
        try
        {
      getSameCategoryPartTwo(UQuery);
            
        }
        catch(QueryException ex)
        {
           ApexPages.addmessage(new ApexPages.message(ApexPages.severity.Error,Label.IPM_Generic_ErrorMessage));
        }
  }
    /*************************************************************************************************************
    * @description:Search for same category members
    */
    public void filterTeamMember()
    {
        map<id,id>uniqueUsers=new map<id,id>();
        teamMembers=new list<wrapperclass>();
        list<IPM_User_Profile__c>lstuser=new list<IPM_User_Profile__c>();
        string uQuery=IPM_ConstantUtils.BLANK;
       
        string querySearchTeamMem=IPM_ConstantUtils.PERCENTAGE+String.escapeSingleQuotes(searchTeamMem) +IPM_ConstantUtils.PERCENTAGE;//used in the query below
        UQuery='SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,IPM_User__r.email, ';
        uQuery=uQuery+QUERY_FIELDS_STR;
        uQuery=uQuery+QUERY_PORTION1;
        
        filterCategoriesString();
          
         if(searchTeambyCat==MY_MCO) 
          {
             
        String resolvedField =  ipmproject.IPM_Project_Rollout__r.MCO_Name__c; 
        uQuery = uQuery  + MCO_STRING + resolvedField+BCKWRD_SLASH ; 
          
          if(String.IsNotBlank(String.valueOf(changeRoleType)))
              {
                  uQuery=uQuery+AND_STRING+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+BCKWRD_SLASH;
              }
              
              uQuery=uQuery+' AND (IPM_User__r.name LIKE :querySearchTeamMem  OR ';
              uQuery=uQuery+SRCH_FILTER;
              uQuery=uQuery+' AND IPM_User__r.id !=:oldresourceid '+QUERY_LIMIT;
              
          }
          else if(searchTeambyCat==IPM_ConstantUtils.TEAM_MYCATEGORY)
          {
            uQuery = partialFilterTeamMember1(uQuery); 
          }
        else if(searchTeambyCat==IPM_ConstantUtils.TEAM_ALLCATEGORY )
        {
            uQuery = partialFilterTeamMember2(uQuery);
        }
        try
        {
            partialFilterTeamMember3(uQuery,lstuser,querySearchTeamMem,uniqueUsers);
        }
        catch(QueryException ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
            'filterTeamMember',ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,null); 
        }
    }
    
    /*****************************************************************************
        @Description: This method is created to resolve nPath Complexity issue  
        @Return: Void
    *****************************************************************************/
    private String  partialFilterTeamMember1(string uQuery){
        
        if(ipmproject.IPM_ProjectGKM__c==GKM3 )
            {
              String filterCat = ipmproject.IPM_ProjectGKM__c==GKM3 ? filterCatList :CAT_STRNG; 
                UQuery=IPM_ConstantUtils.BLANK;
                UQuery = BEGIN_QUERY_TEAM;
                UQuery = UQuery+MID_QUERY_TEAM; 
                UQuery = UQuery+QUERY_PORTION1;
                UQuery = UQuery+SOQL_INCLUDES+ filterCat ;
                
                if(String.IsNotBlank(String.valueOf(changeRoleType)))
                {
                    UQuery=UQuery+AND_STRING+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+BCKWRD_SLASH;
                }
            }
              
              else  
              {
                if(String.IsNotBlank(category))
                {
                    
                    uQuery=uQuery+QUERY_HOLDCATEGORY_STRING+ String.escapeSingleQuotes(category) + '%\'' +AND_STRING;
                }
                
                if(String.IsNotBlank(changeRoleType))
                {
                    
                    uQuery= uQuery+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+BCKWRD_SLASH; 
                }
              }
            
              uQuery=uQuery+' AND (IPM_User__r.name LIKE :querySearchTeamMem  OR ';
              uQuery=uQuery+SRCH_FILTER;
              uQuery=uQuery+' AND IPM_User__r.id !=:oldresourceid '+QUERY_LIMIT;
             return uQuery;
    }
    
    
    /*****************************************************************************
        @Description: This method is created to resolve nPath Complexity issue  
        @Return: Void
    *****************************************************************************/
    private String partialFilterTeamMember2(string uQuery)
    {
        if(roleType==IPM_ConstantUtils.TEAM_GUEST)
            {
                uQuery=uQuery+' IPM_HoldCategory__c !=null AND';
                uQuery=uQuery+'(IPM_User__r.name LIKE :querySearchTeamMem  OR IPM_User__r.email LIKE :querySearchTeamMem OR ';
                uQuery=uQuery+'IPM_User_Role__c LIKE :querySearchTeamMem) AND IPM_User__r.id !=:oldresourceid '+QUERY_LIMIT;
            }
            else
            {
                uQuery=uQuery+'  IPM_HoldCategory__c !=null AND ';
                uQuery=uQuery+QUERY_ROLE_STR+String.escapeSingleQuotes(changeRoleType)+'\' AND(IPM_User__r.name LIKE :querySearchTeamMem  OR ';
                uQuery=uQuery+SRCH_FILTER;
                uQuery=uQuery+'AND IPM_User__r.id !=:oldresourceid '+QUERY_LIMIT; 
            }
            return uQuery;
    }
    
    
    /*****************************************************************************
        @Description: This method is created to resolve nPath Complexity issue  
        @Return: Void
    *****************************************************************************/
    private void partialFilterTeamMember3(string uQuery,list<IPM_User_Profile__c>lstuser,string querySearchTeamMem,map<id,id>uniqueUsers)
    {
            lstuser=database.query(uQuery);
            List<IPM_User_Profile__c>plDPLUserList=new List<IPM_User_Profile__c>();
            if(!projectPLDPLSet.isEmpty()){
            
                plDPLUserList=[SELECT IPM_User__c FROM IPM_User_Profile__c WHERE (IPM_User__r.name LIKE :querySearchTeamMem  OR 
                                IPM_User__r.email LIKE :querySearchTeamMem OR  IPM_User_Role__c LIKE :querySearchTeamMem) AND IPM_User__c IN:projectPLDPLSet LIMIT 1000];
                for(IPM_User_Profile__c u:plDPLUserList)
        {
                    uniqueUsers.put(u.IPM_User__c,u.id);
                }
        }
            if(lstuser.isEmpty() && plDPLUserList.isEmpty())
        {
            isNoMatchfound=IPM_ConstantUtils.TEAM_TRUE;
        }
        else
        {
            isNoMatchfound=IPM_ConstantUtils.BLANK;
        }
        for(IPM_User_Profile__c u:lstuser)
        {
            if((avoidDupUser.contains(u.IPM_User__r.id) && u.IPM_User_Role__c==IPM_ConstantUtils.FUNCTIONAL_ROLE_RD) || !avoidDupUser.contains(u.IPM_User__r.id) )
            {
                uniqueUsers.put(u.IPM_User__c,u.id);
            }
        }
        
        
        lstuser=[SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,IPM_User__r.email,
        IPM_User__r.SmallPhotoUrl, 
        IPM_User__r.UserRole.Name FROM IPM_user_profile__c WHERE id IN:uniqueUsers.values() limit 50000];
        
        
        for(IPM_User_Profile__c u:lstuser)
        {
            teamMembers.add(new wrapperclass(u));
            }
        
        
    }
    
    /*************************************************************************************************************
    * @description:Add members FROM same category which are SELECTed FROM page
    */
    public void addMemberToWrapper()
    {
        list<IPM_Project_Resource__c>lstnewResource=new list<IPM_Project_Resource__c>();
        
        for(wrapperclass MAdd:teamMembers)
        {
            if(MAdd.checkboxuser != null && MAdd.checkboxuser)
            {
                
                IPM_Project_Resource__c iPMresource=new IPM_Project_Resource__c();
                iPMresource=new IPM_Project_Resource__c();
                iPMresource.IPM_Project__c= projectID;
                iPMresource.IPM_User__c=MAdd.listofuser.IPM_User__r.id;
                iPMresource.IPM_Role_Type__c=roleType;
                
                if(CountProjectMembers(roleType)>0 && !roleType.equals(IPM_ConstantUtils.IPM_ROLE_GUEST))
                {
                    iPMresource.IPM_Project_Role_Owner__c=false;
                }
                else if(CountProjectMembers(roleType)==0 && lstnewResource.isEmpty() && !roleType.equals(IPM_ConstantUtils.IPM_ROLE_GUEST))
                {
                    iPMresource.IPM_Project_Role_Owner__c=true;
                }
                iPMresource.IPM_Unique_Resource__c=projectID+MAdd.listofuser.IPM_User__r.id;//added to support data migration
                lstnewResource.add(iPMresource);
            }
            
        }
        try
        {
            insert lstnewResource;
        }
        
        catch(Exception ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
               ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                 ADD_MEMBER_TO_WRAPPER,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
          
        }
    }   
    
    /*************************************************************************************************************
    * @description:Get list of already assigned members in the current project
    */
    public void  getAssignedTeamMember()
    {
        assignedList=new set<string>();
        assignedMember=new list<IPM_Project_Resource__c>();
        assignedMember=[SELECT id,IPM_User__c,IPM_User__r.name,IPM_User__r.SmallPhotoUrl,IPM_Project_Role_Owner__c,
        IPM_Role_Type__c FROM IPM_Project_Resource__c WHERE IPM_Role_Type__c=:roleType and 
        IPM_Project__r.id=:projectID order by IPM_User__c ASC limit 50000]; 
        
        if(!assignedMember.isEmpty())
        {
            for(IPM_Project_Resource__c assignedmem:assignedMember)
            {
                assignedList.add(assignedmem.IPM_User__r.id);
                avoidDupUser.add(assignedmem.IPM_User__c);
            }
        }
        
    }
    /*************************************************************************************************************
    * @author:Cognizant
    * @date: 25/09/2014
    * @description:list out all users FROM user profile and add one boolean value with user profile record.
    *               this is used while adding the SELECTed users FROM page
    */
    public class wrapperclass
    {
        /*************************************************************************************************************
        * @description:flag whether check box in true or false
        */
        public Boolean checkboxuser{get;set;}
        /*************************************************************************************************************
        * @description:initialise the user profile object
        */
        public IPM_User_Profile__c listofuser{get;set;}
        /*************************************************************************************************************
        * @description:constructor,get user profile records.
        * @param:user profile object
        */
        public wrapperclass(IPM_User_Profile__c lstuser)
        {
            checkboxuser=false;
            listofuser=lstuser;
        }
    } 
    /*************************************************************************************************************
    * @description:Get Core members FROM user profiles(PL,DPL,TPL,Gatekeeper users)
    */
    public void getCoreMemberds()
    {
        string strCoreMem=IPM_ConstantUtils.BLANK;
        lstUserProfile=new list<IPM_User_Profile__c>();
        string uQuery=IPM_ConstantUtils.BLANK;

        if(IPM_ConstantUtils.TEAM_COREPL==coreMembers)
        {
            buttonLabel=IPM_ConstantUtils.TEAM_PROJECT_LEADER;
            strCoreMem=IPM_ConstantUtils.TEAM_PROJECT_LEADER;
            SelecetedCoreMember=Ipmproject.IPM_Project_Leader__c;
        }
        else if(IPM_ConstantUtils.TEAM_COREDPL==coreMembers)
        {
            buttonLabel=IPM_ConstantUtils.TEAM_DEPUTY_PROJECT_LEADER;
            strCoreMem=IPM_ConstantUtils.TEAM_PROJECT_LEADER;
            SelecetedCoreMember=Ipmproject.Deputy_Project_Leader__c;
        }
        else if(IPM_ConstantUtils.TEAM_COREGATEK==coreMembers)
        {
            buttonLabel=IPM_ConstantUtils.TEAM_GATEKEEPER;
            strCoreMem=IPM_ConstantUtils.TEAM_GATEKEEPER;
            SelecetedCoreMember=Ipmproject.IPM_Project_Gatekeeper__c;
        }
        else if(IPM_ConstantUtils.TEAM_CORETPL==coreMembers)
        {
            buttonLabel=IPM_ConstantUtils.TEAM_TECHNICAL_PROJECT_LEADER;
            strCoreMem=IPM_ConstantUtils.TEAM_RESEARCH_DEVELOPMENT;
            SelecetedCoreMember=Ipmproject.IPM_Technical_Project_Leader__c;
            uQuery=BEGIN_QUERY;
            uQuery=uQuery+QUERY_FIELDS_STR;
            uQuery=uQuery+QUERY_WHERE_STR;
            uQuery=uQuery+QUERY_HOLDCATEGORY_STR + String.escapeSingleQuotes(category) + PERCENTAGE_SLASH ;
            uQuery=uQuery+' AND IPM_User_Role__c=\''+strCoreMem+'\') '+QUERY_LIMIT;
        }    
        if(IPM_ConstantUtils.TEAM_COREDPL==coreMembers || IPM_ConstantUtils.TEAM_COREGATEK==coreMembers)
        {
            uQuery=BEGIN_QUERY;
            uQuery=uQuery+QUERY_FIELDS_STR;
            uQuery=uQuery+QUERY_WHERE_STR;
            uQuery=uQuery+QUERY_HOLDCATEGORY_STR + String.escapeSingleQuotes(category) + PERCENTAGE_SLASH ; 
            uQuery=uQuery+' AND IPM_User_Function__c=\''+strCoreMem+'\' AND IPM_Company_Card__c=\''+CCardName+'\') '+QUERY_LIMIT;
        }
        else if(IPM_ConstantUtils.TEAM_COREPL ==coreMembers)
        {
            uQuery=IPM_ConstantUtils.BLANK;
            uQuery=BEGIN_QUERY;
            uQuery=uQuery+QUERY_FIELDS_STR;
            uQuery=uQuery+QUERY_WHERE_STR;
            uQuery=uQuery+' AND IPM_User_Function__c=\''+strCoreMem+'\' ) '+QUERY_LIMIT;
        }
        
        if(string.isNotBlank(uQuery))
        {
            try
            {
                lstUserProfile=database.query(uQuery);
                Map<id,id>uniqueUserMapId=new Map<id,id>();
                if(lstUserProfile != null && !lstUserProfile.isEmpty())
                { 
                    for(IPM_User_Profile__c u:lstUserProfile)
                    {
                        uniqueUserMapId.put(u.IPM_User__c,u.id);
                    }
                 
                }
                if(!uniqueUserMapId.isEmpty())
                {
                    lstUserProfile=[SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,
                    IPM_User__r.email,IPM_User__r.SmallPhotoUrl,
                    IPM_User__r.UserRole.Name
                    FROM IPM_user_profile__c WHERE id IN:uniqueUserMapId.values() Limit 50000];
                }
            }
            catch(QueryException ex)
            {
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.Error,Label.IPM_Generic_ErrorMessage));    
            }
        }
        
    }
    /*************************************************************************************************************
    * @description:Filter core members FROM user profiles(PL,DPL,TPL,Gatekeeper users)
    * This method is used to query the core team member name and role and email id in case of task and milestones team updation.
    * user selection is based on the company card of the project and fucntion.
    * Resource allocation window will enlist these user for further selection of team.
    * return none
    */
    public void filterCoreMember()
    {
        lstUserProfile=new list<IPM_User_Profile__c>();
        string strCoreMem=IPM_ConstantUtils.BLANK;
        string uQuery=IPM_ConstantUtils.BLANK;
        string querySearchCoreTeam = IPM_ConstantUtils.PERCENTAGE+searchCoreTeam+IPM_ConstantUtils.PERCENTAGE;//used in the query below
        uQuery=BEGIN_QUERY;
        uQuery=uQuery+QUERY_FIELDS_STR;
        uQuery=uQuery+QUERY_WHERE_STR;
        
        if(IPM_ConstantUtils.TEAM_COREPL==coreMembers || IPM_ConstantUtils.TEAM_COREDPL==coreMembers)
        {
            strCoreMem=IPM_ConstantUtils.TEAM_PROJECT_LEADER;
        }
        else if(IPM_ConstantUtils.TEAM_COREGATEK==coreMembers)
        {
            strCoreMem=IPM_ConstantUtils.TEAM_GATEKEEPER;
        }
        else if(IPM_ConstantUtils.TEAM_CORETPL==coreMembers)
        {
            strCoreMem=IPM_ConstantUtils.TEAM_RESEARCH_DEVELOPMENT;
            uQuery=uQuery+QUERY_HOLDCATEGORY_STR + String.escapeSingleQuotes(category) + '%\')' ;
            uQuery=uQuery+' AND IPM_User_Role__c=\''+strCoreMem+BCKWRD_SLASH;
            uQuery=uQuery+' AND (IPM_User__r.name LIKE :querySearchCoreTeam OR IPM_User__r.email LIKE :querySearchCoreTeam) '+QUERY_LIMIT ;
        } 
        
        if(IPM_ConstantUtils.TEAM_COREDPL==coreMembers || IPM_ConstantUtils.TEAM_COREGATEK==coreMembers)
        {
            uQuery=uQuery+QUERY_HOLDCATEGORY_STR + String.escapeSingleQuotes(category) + '%\')' ;
            uQuery=uQuery+' AND IPM_User_Function__c=\''+strCoreMem+'\' AND IPM_Company_Card__c=\''+CCardName+'\' ';
            uQuery=uQuery+' AND (IPM_User__r.name Like :querySearchCoreTeam OR IPM_User__r.email Like :querySearchCoreTeam) '+QUERY_LIMIT ;
        }
        else if(IPM_ConstantUtils.TEAM_COREPL==coreMembers)
        {
            uQuery=uQuery+' AND IPM_User_Function__c=\''+strCoreMem+'\' )';
            uQuery=uQuery+' AND (IPM_User__r.name Like :querySearchCoreTeam OR IPM_User__r.email Like :querySearchCoreTeam) '+QUERY_LIMIT ;
        }
        
        try
        {
            
            lstUserProfile=database.query(uQuery);
            Map<id,id>uniqueUserMapId=new Map<id,id>();
            if(lstUserProfile != null && !lstUserProfile.isEmpty())
            { 
                for(IPM_User_Profile__c u:lstUserProfile)
                {
                    uniqueUserMapId.put(u.IPM_User__c,u.id);
                }
             
            }
            if(!uniqueUserMapId.isEmpty())
            {
                lstUserProfile=[SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,
                IPM_User__r.email,IPM_User__r.SmallPhotoUrl,
                IPM_User__r.UserRole.Name
                FROM IPM_user_profile__c WHERE id IN:uniqueUserMapId.values() Limit 50000];
            }
            if(lstUserProfile.isEmpty())
            {
                isNoMatchfound=IPM_ConstantUtils.TEAM_TRUE ;
            }
            else
            {
                isNoMatchfound=IPM_ConstantUtils.BLANK;
            }
            
        }
        catch(QueryException ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
             ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                'filterCoreMember',ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
       }
        
        
    } 
    /*************************************************************************************************************
    * @description:Update Core Members for current project(PL,DPL,TPL,Gatekeeper users)
    */
    public void updateCoreMember()
    {
        list<IPM_Project__c>iPMProjectList=new list<IPM_Project__c>();
        IPM_Project__c ipmproject=new IPM_Project__c(id=projectID);
        if(IPM_ConstantUtils.TEAM_COREPL==coreMembers)
        {
            List<IPM_User_Profile__c>checkValidUserCompanyCList=[SELECT IPM_Company_Card__c FROM IPM_User_Profile__c WHERE IPM_User__c=:selecetedCoreMember AND
                                                                     IPM_Company_Card__c =:CCardName LIMIT 1];
                    
            if(checkValidUserCompanyCList.isEmpty()){
                IPM_WithoutShareController.createUserProfile(CCardName,selecetedCoreMember,category);//create user profile for selected PL with company card
            }
            ipmproject.IPM_Project_Leader__c=selecetedCoreMember;
        }
        else if(IPM_ConstantUtils.TEAM_COREdPL==coreMembers)
        {
            ipmproject.Deputy_Project_Leader__c =selecetedCoreMember;
        }
        else if(IPM_ConstantUtils.TEAM_COREGATEK==coreMembers)
        {
            ipmproject.IPM_Project_Gatekeeper__c=selecetedCoreMember;
        }
        else if(IPM_ConstantUtils.TEAM_CORETPL==coreMembers)
        {
            ipmproject.IPM_Technical_Project_Leader__c=selecetedCoreMember;
        }
        iPMProjectList.add(ipmproject);
        try{
            if(!IPMProjectList.isEmpty()){
                update iPMProjectList;
            }
        }
        
        catch(Exception ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
             ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                UPDATE_CORE_MEMBER,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
       }
    } 
    /*************************************************************************************************************
    * @description:Hold core member id from UI
    */
    public void holdCoreMember()
    {
        //holding core members
    }        
    
    /*******************************************************************************************************
    * @Description:create finance members when regional rollout having finance user
    * @Param:map of regional project id's and finance user id's    
    */
    
    public static void createFinanceMember(Map<Id,Id>newproAndUserMap)
    {
        if(newproAndUserMap == null || newproAndUserMap.isEmpty()){
          return;
        }
        
        list<IPM_Project_Resource__c>lstnewResource=new list<IPM_Project_Resource__c>();
        for(Id projid:newproAndUserMap.keySet())
        {
            IPM_Project_Resource__c iPMresource=new IPM_Project_Resource__c();
            iPMresource.IPM_Project__c= projid;
            iPMresource.IPM_User__c=newproAndUserMap.get(projid);
            iPMresource.IPM_Role_Type__c=IPM_ConstantUtils.FUNCTIONAL_ROLE_FINANCE;
            iPMresource.IPM_Project_Role_Owner__c=true;
            iPMresource.IPM_Unique_Resource__c=projid+string.valueof(newproAndUserMap.get(projid));//added to support Data migration
            lstnewResource.add(IPMresource);
        }
        if(!lstnewResource.isEmpty())
        {
            try
            {
                insert lstnewResource;
            }
            
            catch(Exception ex)
            {
                If(!Trigger.isExecuting)
                {
                    ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
                }
                ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                CREATE_FINANCE_MEMBER,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
            }
        }
    }
    /*******************************************************************************************************
    * @Description:Delete finance members when local rollout having finance user
    * @Param:map of local project id's and finance user id's    
    */
    public static void deleteFinanceMember(Map<Id,Id>newproAndUserMap)
    {
        list<IPM_Project_Resource__c>lstnewResource=new list<IPM_Project_Resource__c>();
        lstnewResource=[SELECT Id FROM IPM_Project_Resource__c WHERE IPM_Role_Type__c=:IPM_ConstantUtils.FUNCTIONAL_ROLE_FINANCE
        AND IPM_Project__c IN:newproAndUserMap.keySet() AND IPM_User__c =:newproAndUserMap.values()];
        
        if(!lstnewResource.isEmpty())
        {
            try
            {
                //To Check CRUD
                if (IPM_Project_Resource__c.sObjectType.getDescribe().isDeletable())
                {
                    delete lstnewResource;
                }    
             }
            
            catch(Exception ex)
            {
                ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
                ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                DELETE_FINANCE_MEMBER,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
            }
        }
    }
    
    /*************************************************************************************************************
    * @description:Hold the Leader member id from UI
    */
    public void holdLeader()
    {
        //holding leader members
    }
    
    /*************************************************************************************************************
    * @description:Assign Project Leader or Finance leader for current rollout
    */
    public void assignLeaderMember()
    {
        IPM_Project_Rollout__c inContextRollout = null;
        
        
        // Get Project Specific information 
        IPM_Project__c ipmproject = [SELECT id,IPM_ProjectGKM__c,Deputy_Project_Leader__c,IPM_Project_Gatekeeper__c,IPM_Project_Leader__c,IPMProject_Span__c, 
            IPM_Technical_Project_Leader__c,IPM_Company_Card__c,IPM_Category_Text__c FROM 
            IPM_Project__c WHERE id=:projectID LIMIT 1];
        
       
        String projectManagedCategory = ipmproject.IPM_Category_Text__c;
        // Get In context Rollout Information
        List<IPM_Project_Rollout__c> lstRegRollout = [SELECT Id,IPM_Company_Card__c,Name,IPM_Regional_PL__c,IPM_Rollout_Gatekeeper__c,
                                                        Finance_Member__c,RecordTypeId,Market_Cluster_Name__c,IPM_Regional_PL_Text__c, IPM_Finance_Member_Text__c,(SELECT Id,Country_Name__c FROM IPM_Countries_Local__r) FROM IPM_Project_Rollout__c WHERE ID =: rolloutId LIMIT 1];
      
        List<User> lstUser = [SELECT Id,Name FROM User WHERE Id =:selectedLeaderMember LIMIT 1];
        if(!lstRegRollout.isEmpty())
        {
            inContextRollout = lstRegRollout[0];
    }  
        
        
       
        
        if(!lstUser.isEmpty())
        { 
            if(IPM_ConstantUtils.USER_FUNCTON_PL.equalsIgnoreCase(ButtonLabel) || IPM_ConstantUtils.USER_FUNCTON_CL.equalsIgnoreCase(ButtonLabel))
            {   
                                                                                                           
                inContextRollout.IPM_Regional_PL_Text__c = lstUser[0].Name;
                inContextRollout.IPM_Regional_PL__c = lstUser[0].Id;
                
                if(!lstRegRollout.isEmpty() && lstRegRollout[0].IPM_Company_Card__c!=null)
                {
                    List<IPM_User_Profile__c>checkValidUserCompanyCList=[SELECT IPM_Company_Card__c FROM IPM_User_Profile__c WHERE IPM_User__c=:selectedLeaderMember AND
                                                                     IPM_Company_Card__c =:lstRegRollout[0].IPM_Company_Card__c LIMIT 1];
                    
                    if(checkValidUserCompanyCList.isEmpty()){
                        
                        IPM_WithoutShareController.createUserProfile(lstRegRollout[0].IPM_Company_Card__c,selectedLeaderMember,projectManagedCategory);//create user profile for selected PL with company card
                    }
                    
                    
                }
                
             if(inContextRollout.IPM_Company_Card__c!=null){
                id companyCardId=inContextRollout.IPM_Company_Card__c;
                list<IPM_User_Profile__c>lstGatekeeper=[SELECT IPM_User__c FROM IPM_User_Profile__c WHERE IPM_Company_Card__c=:companyCardId 
                                                        AND IPM_User_Function__c=:IPM_ConstantUtils.TEAM_GATEKEEPER LIMIT 1];  
                if(lstGatekeeper!=null && !lstGatekeeper.isEmpty()){
                    inContextRollout.IPM_Rollout_Gatekeeper__c=lstGatekeeper[0].IPM_User__c;    
                }else{
                inContextRollout.IPM_Rollout_Gatekeeper__c=lstUser[0].Id;   
                }  
             }else{
                inContextRollout.IPM_Rollout_Gatekeeper__c=lstUser[0].Id;   
             }  
            }
            else if(IPM_ConstantUtils.USER_FUNCTON_FL.equalsIgnoreCase(ButtonLabel))
            {                                    
                inContextRollout.IPM_Finance_Member_Text__c = lstUser[0].Name;     
                inContextRollout.Finance_Member__c = lstUser[0].Id;       
            } 
        }          
        try
        {
            update inContextRollout;   
        }
        
        catch(Exception ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                ASSIGN_LEADER_MEMBER,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
        }
    }
    
    
    /*************************************************************************************************************
    * @description:Get all members FROM same category for functional role.
    */
    public void getSameCategoryRolloutProfiles()
    {
        leaderUsers.clear(); 
        List<IPM_User_Profile__c>lstuser=new List<IPM_User_Profile__c>();
        string uQuery=IPM_ConstantUtils.BLANK; 
        string holdCategory = PERCNT_STRING + String.escapeSingleQuotes(category) + PERCENTAGE_SLASH;
        if(isLeaderTypePL)
        {  
           if(IPM_ConstantUtils.TEAM_MYCATEGORY.equalsIgnoreCase(SearchLeaderbyCat))
           {    
                if(ipmproject.IPM_ProjectGKM__c==GKM3)
                {
                    String QUERY_STRING = BEGIN_QUERY_TEAM + MID_QUERY_TEAM + QUERY_STRING_PROFILE ; 
                    String resolvedField =  cntxtRLOut.MCO_Name__c;
                    UQuery = QUERY_STRING +MCO_STRING+ resolvedField +USER_FUNCTION_STRING+project_Leader+BCKWRD_SLASH+QUERY_LIMIT;
                }                
                else
                {
                    UQuery=IPM_ConstantUtils.BLANK;
                    UQuery = BEGIN_QUERY_TEAM;
                    UQuery = UQuery+MID_QUERY_TEAM;
                    UQuery = UQuery+QUERY_STRING_PROFILE;
                    UQuery = UQuery+USERECAT_CLAUSE+holdCategory;
                    UQuery= UQuery + FNCT_STRNG+project_Leader+BCKWRD_SLASH+QUERY_LIMIT;
                }
                
            }
            else if(IPM_ConstantUtils.TEAM_ALLCATEGORY.equalsIgnoreCase(SearchLeaderbyCat))
            {
                 if(ipmproject.IPM_ProjectGKM__c==GKM3)
                {
                    UQuery = BEGIN_QUERY_TEAM;
                    UQuery = UQuery+MID_QUERY_TEAM;
                    UQuery = UQuery+QUERY_PORTION2;
                    UQuery = UQuery+FNCT_STRNG+project_Leader+BCKWRD_SLASH;
                    UQuery = UQuery+QUERY_LIMIT;
                } 
                else
                {  
                    UQuery=IPM_ConstantUtils.BLANK;
                    UQuery =BEGIN_QUERY_TEAM;
                    UQuery = UQuery+MID_QUERY_TEAM;
                    UQuery = UQuery+QUERY_PORTION2;
                    UQuery = UQuery+HLD_CAT_STRNG+holdCategory+FNCT_STRNG+project_Leader+BCKWRD_SLASH;
                    UQuery = UQuery+QUERY_LIMIT;
                }
               
            }
            else 
            {
                UQuery=IPM_ConstantUtils.BLANK;
                UQuery = BEGIN_QUERY_TEAM;
                UQuery = UQuery+MID_QUERY_TEAM;
                UQuery = UQuery+QUERY_STRING_PROFILE;
                
                if(cntxtRLOut.IPM_Rollout_Span__c==IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL)
                { 
                    UQuery = UQuery+USERECAT_CLAUSE+holdCategory;
                    UQuery= UQuery + FNCT_STRNG +project_Leader+BCKWRD_SLASH+QUERY_LIMIT;
                }
                else 
                {
                     String resolvedField =  cntxtRLOut.MCO_Name__c;
                     UQuery = UQuery+MCO_STRING+ resolvedField+BCKWRD_SLASH;
                     UQuery= UQuery + FNCT_STRNG+project_Leader+BCKWRD_SLASH+QUERY_LIMIT;
                }
            }
        }
        
        else if(isLeaderTypeFL)
        {   
            if(IPM_ConstantUtils.TEAM_MYCATEGORY.equalsIgnoreCase(SearchLeaderbyCat))
           {
                if(ipmproject.IPM_ProjectGKM__c==GKM3)
                {
                    String QUERY_STRING = BEGIN_QUERY_TEAM + MID_QUERY_TEAM + QUERY_STRING_PROFILE ; 
                    String resolvedField =  cntxtRLOut.MCO_Name__c;
                    UQuery = QUERY_STRING +MCO_STRING+ resolvedField +'AND IPM_User_Role__c = \''+function_Leader+BCKWRD_SLASH+QUERY_LIMIT; 
                } 
                else
                {
                    UQuery=IPM_ConstantUtils.BLANK;
                    UQuery = BEGIN_QUERY_TEAM;
                    UQuery = UQuery+MID_QUERY_TEAM;
                    UQuery = UQuery+QUERY_STRING_PROFILE;
                    UQuery = UQuery+USERECAT_CLAUSE+holdCategory;
                    UQuery= UQuery + USER_ROLE_STRNG+function_Leader+BCKWRD_SLASH+QUERY_LIMIT;// l
                }
                
            }
            else if(IPM_ConstantUtils.TEAM_ALLCATEGORY.equalsIgnoreCase(SearchLeaderbyCat))
            {
                 if(ipmproject.IPM_ProjectGKM__c==GKM3)
                {
                    UQuery = BEGIN_QUERY_TEAM;
                    UQuery = UQuery+MID_QUERY_TEAM;
                    UQuery = UQuery+QUERY_PORTION2;
                    UQuery = UQuery+USER_ROLE_STRNG+function_Leader+BCKWRD_SLASH;
                    UQuery = UQuery+QUERY_LIMIT; 
                } 
                else
                {
                    UQuery=IPM_ConstantUtils.BLANK;
                    UQuery =BEGIN_QUERY_TEAM;
                    UQuery = UQuery+MID_QUERY_TEAM;
                    UQuery = UQuery+QUERY_PORTION2;
                    UQuery = UQuery+HLD_CAT_STRNG+holdCategory+USER_ROLE_STRNG+function_Leader+BCKWRD_SLASH;
                    UQuery = UQuery+QUERY_LIMIT;
                }
            }
            else 
            {
                UQuery=IPM_ConstantUtils.BLANK;
                UQuery = BEGIN_QUERY_TEAM;
                UQuery = UQuery+MID_QUERY_TEAM;
                UQuery = UQuery+QUERY_STRING_PROFILE;
               
                if(cntxtRLOut.IPM_Rollout_Span__c==IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL)
                { 
                    UQuery = UQuery+USERECAT_CLAUSE+holdCategory;
                    UQuery= UQuery + '  ) AND IPM_User_Role__c =\''+function_Leader+BCKWRD_SLASH+QUERY_LIMIT;
                }
                else 
                {    
                     String resolvedField =  cntxtRLOut.MCO_Name__c;
                     UQuery = UQuery+' IPM_Company_Card__r.IPM_MCO__c =\''+resolvedField+BCKWRD_SLASH; 
                     UQuery= UQuery + USER_ROLE_STRNG +function_Leader+BCKWRD_SLASH+QUERY_LIMIT;
                }
                
            }
        }
        
        Map<Id, Id> uniqueUserMapId = new Map<Id, Id>();
        try
        {
            lstuser=database.query(UQuery);
        }
        
        catch(Exception ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                SAME_CATEGORY_ROLLOUT_PROFILES,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
        }
       
        if(lstuser != null && !lstuser.isEmpty())
        { 
            IsNoMatchfound=IPM_ConstantUtils.BLANK;
            for(IPM_User_Profile__c u:lstuser)
            {
                uniqueUserMapId.put(u.IPM_User__r.Id,u.id);
                
            }
         
        }
        if(!uniqueUserMapId.isEmpty())
        {
            leaderUsers=[SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,
            IPM_User__r.email,IPM_User__r.SmallPhotoUrl,
            IPM_User__r.UserRole.Name
            FROM IPM_user_profile__c WHERE id IN:uniqueUserMapId.values() Limit 50000];
        }
    
      
    }
    
    /*************************************************************************************************************
    * @description:Filter leader members FROM user profiles
    */
    public void filterLeaderMember()
    {
        lstUserProfile=new list<IPM_User_Profile__c>();
        string UQuery=IPM_ConstantUtils.BLANK;
        string querySearchLeader = String.escapeSingleQuotes(SearchLeader) +PERCENTAGE_SLASH;//used in the query below
        UQuery=BEGIN_QUERY;
        UQuery=UQuery+QUERY_FIELDS_STR;
        UQuery=UQuery+QUERY_WHERE_STR;
        UQuery=UQuery+USERNAME_CLAUSE+querySearchLeader+USEREMAIL_CLAUSE+querySearchLeader+')) '+QUERY_LIMIT;
        
        try{
            if(UQuery!=IPM_ConstantUtils.BLANK)
            {
                lstUserProfile=database.query(UQuery);
                if(lstUserProfile.isEmpty())
                {
                    IsNoMatchfound=IPM_ConstantUtils.TEAM_TRUE ;
                    leaderUsers.clear();
                 }
                else
                {
                    IsNoMatchfound=IPM_ConstantUtils.BLANK;
                    leaderUsers = lstUserProfile;   
                                
                    Map<Id, Id> uniqueUserMapId = new Map<Id, Id>();
                    if(leaderUsers != null && !leaderUsers.isEmpty())
                    { 
                        for(IPM_User_Profile__c u:leaderUsers)
                        {
                            uniqueUserMapId.put(u.IPM_User__r.Id,u.id); 
                        }
                     
                    }
                    
                    if(!uniqueUserMapId.isEmpty())
                    {
                        leaderUsers=[SELECT IPM_User__r.id,IPM_User_Role__c,IPM_User__r.name,
                        IPM_User__r.email,IPM_User__r.SmallPhotoUrl,
                        IPM_User__r.UserRole.Name
                        FROM IPM_user_profile__c WHERE id IN:uniqueUserMapId.values() Limit 50000];
                    }
                }
            }
        }
        
        catch(Exception ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
                FILTER_LEADER_MEMBER,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
        }
        
        
        
    }
    
     public Integer CountProjectMembers(string role)
     {
        Integer countUserRole=[SELECT count() 
        FROM IPM_Project_Resource__c WHERE IPM_Project__c=:projectID AND IPM_Role_Type__c=:role];
        return  countUserRole;
    }
    
    /*************************************************************************************************************
    * @description:This is to return users available for selection on entering the search string 
    */
     public void getUsersAvailableOnFiltering() 
     {
        leaderUsers.clear();
        List<IPM_User_Profile__c> usersAvailable = new List<IPM_User_Profile__c>();
        String querySearchLeader = String.escapeSingleQuotes(SearchLeader) +PERCENTAGE_SLASH;     
        String HOLD_CAT = PERCNT_STRING + String.escapeSingleQuotes(category) + PERCENTAGE_SLASH;   
        String USER_ROLE_STRING = ' AND IPM_User_Role__c = \''; 
        String END_PARENTHESIS=')) ';
        String QUERY_STRING = BEGIN_QUERY_TEAM + MID_QUERY_TEAM + (SearchLeaderbyCat!=ALL_CAT_STRNG?QUERY_STRING_PROFILE:'IPM_User__r.UserRole.Name FROM IPM_user_profile__c WHERE  (IPM_User__r.IsActive=True ')  ; 
        if(cntxtRLOut.IPM_Rollout_Span__c==IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL) 
        { 
	        QUERY_STRING= QUERY_STRING+ USERECAT_CLAUSE + HOLD_CAT;  
        }
        else 
        {
        	 if(SearchLeaderbyCat!=ALL_CAT_STRNG)
        	 {
        	 	String resolvedField =  cntxtRLOut.MCO_Name__c;
        	    QUERY_STRING= QUERY_STRING +MCO_STRING+ resolvedField+BCKWRD_SLASH;
        	 } 
        } 
        

        if(isLeaderTypePL) 
        {  
                QUERY_STRING = QUERY_STRING + USER_FUNCTION_STRING + PROJECT_LEADER + BCKWRD_SLASH +USERNAME_CLAUSE + querySearchLeader + USEREMAIL_CLAUSE + querySearchLeader + END_PARENTHESIS + QUERY_LIMIT;
        }
        else if(isLeaderTypeFL) 
        {   
            
                QUERY_STRING = QUERY_STRING + USER_ROLE_STRING + FUNCTION_LEADER + BCKWRD_SLASH+USERNAME_CLAUSE + querySearchLeader + USEREMAIL_CLAUSE + querySearchLeader + END_PARENTHESIS + QUERY_LIMIT;
        }
        
        Map<Id,IPM_User_Profile__c> uniqueUserMap = new Map<Id,IPM_User_Profile__c>();
        
        try 
        {
            usersAvailable=Database.Query(QUERY_STRING);
          
            if(!usersAvailable.isEmpty())
            { 
                IsNoMatchfound=IPM_ConstantUtils.BLANK;
                
                for(IPM_User_Profile__c userProfile :usersAvailable) 
                {
                    uniqueUserMap.put(userProfile.IPM_User__r.Id,userProfile); 		
                    
                }
             
            }
            
            if(!uniqueUserMap.isEmpty())
            {
                leaderUsers=uniqueUserMap.values();  
            }
            
            else
            {
            	leaderUsers.clear();
            	IsNoMatchfound = IPM_ConstantUtils.TEAM_TRUE; 
            
            }
        }
           
        catch(Exception ex)
        {
            ApexPages.addmessage(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),IPM_RESOURCEALLOCATION_STR,
            SAME_CATEGORY_ROLLOUT_PROFILES,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null, IPM_ConstantUtils.IPM_NG_APPLICATION);
        }
        
    } 
    
    /*************************************************************************************************************
     * @description:This is to prepare soql filter string to be used in include clause 
    **/
    private void filterCategoriesString()
    {
     	filterCatList ='(';
        
        for(IPM_Category__c catRec : customSettingCategory.values())
        { 
        	if(catRec.IPM_Category_Group__c==GKM3_CAT)
        	{
        		filterCatList = filterCatList +BCKWRD_SLASH+ catRec.name + BCKWRD_SLASH +',';  
        	}        
        }
       
        filterCatList =filterCatList.removeEnd(',')+')';  
        
    }
    
      
}
