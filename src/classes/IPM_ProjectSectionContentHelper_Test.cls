/****************************************************************************************************************************
*  @Author Cognizant
*  @name <Class name>
*  @CreateDate 16/09/2015
*  @Description Test Class for IPM_ProjectSectionContentHelper Class
*  @Version 1.0
*  @reference IPM_ProjectSectionContentHelper Class
*/
@isTest
public class IPM_ProjectSectionContentHelper_Test {
    public static IPM_Project__c project;
    public static IPM_Project__c project1;
    public static IPM_Project_Document__c projDoc;
    public static IPM_Project_Document_Section__c projDocSec;
    public static IPM_Project_Document_Section_Content__c projDocSecCon;
    
    public static User projSecConUser;
    public static Map<Id,List<IPM_Project_Document_Section__c>> docSecMap;
    public static Map<Id,Map<String,IPM_Project_Document__c>> docMap;
    public static Map<Id,IPM_Project__c> projMap;
    public static List<IPM_Project_Document_Section__c> docSecLst;
    public static Set<Id> projDocSecIdSet;
    public static List<IPM_Project_Document__c> docLst;
    public static Map<String,IPM_Project_Document__c>docStringMap;
    public static IPM_Gate_CMI__c gateCMI;
    
    private static String TEST_PROJECT = 'Test Project';
    private static String STR_GLOBAL_COMPANY = 'Global Company Card';
    private static String STR_CLUSTERING =  'Clustering';
    public static final string STR_INNOVATION_RENOVATION = 'Innovation/Renovation'; 
    /****************************************************************************************************************************
    *  @Description Initializing test data  
    *  @name initializeData
    *  @param None
    *  @return void
    */
    static void initializeData(){
        projSecConUser=IPM_TestFactory_Helper.createUser(true);
        System.runAs(projSecConUser){
            //Test.StartTest();
            project = IPM_TestFactory_Helper.createIPMProject(false);
            project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;  
            project.Name=TEST_PROJECT;
            project.IPM_Project_Name__c=TEST_PROJECT;
            project.IPM_Selected_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL;
            project.IPM_Project_Type__c =IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            project.IPM_Technical_Project_Leader__c =userinfo.getuserid();
            project.IPM_Project_Leader__c = userinfo.getuserid();
            project.Deputy_Project_Leader__c = userinfo.getuserid();
            project.IPM_Project_Gatekeeper__c = userinfo.getuserid();
            project.IPM_Phase__c= IPM_ConstantUtils.PHASE_CAPABILITY;
            project.Sustainability_Period__c='3';
            project.Deputy_Project_Leader__c=userinfo.getuserid();
            project.IPMProject_Span__c=IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            project.IPM_Complexity__c=IPM_ConstantUtils.IPM_COMPLEXITY_FULL;
            project.IPM_CompanyCardText__c=STR_GLOBAL_COMPANY;
            project.IPM_Category_Text__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectSubType__c=STR_INNOVATION_RENOVATION;
            project.IPM_UserCategory__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectJobType__c=IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL;
            project.IPM_IsCompleted__c=true;
            project.RecordTypeID=Schema.SObjectType.IPM_Project__c.RecordTypeInfosByName.get(STR_CLUSTERING).RecordTypeId;
            insert project;
           
            IPM_Project__c projectObj=[select IPM_IsCompleted__c from IPM_Project__c where id=:project.Id];
            system.assert(projectObj.IPM_IsCompleted__c,System.Label.IPM_Record_successfully_saved);
            
            
            projDoc=IPM_TestFactory_Helper.createIPMProjectDocument(FALSE);
            projDoc.IPM_Project__c=project.ID;
            projDoc.IPM_GateDocuments__c=IPM_ConstantUtils.MARKET_READY_GATE;
            insert projDoc;
            System.assertEquals(projDoc.IPM_Project__c,project.ID); //check whether parent project for project document is equal to project
            IPM_Project_Document__c projectDocObj=[select IPM_Project__c from IPM_Project_Document__c where id=:projDoc.Id];
            system.assertEquals(projectDocObj.IPM_Project__c,project.ID,System.Label.IPM_Record_successfully_saved);
            
            docLst=new List<IPM_Project_Document__c>();
            
            docLst.add(projDoc);
            
            projDocSec=IPM_TestFactory_Helper.createIPMProjectDocumentSection(FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            insert projDocSec;
            
             Map<String,Object> projDocSecMap =  new Map<String,Object>{'IPM_Section_Name__c' => IPM_ConstantUtils.OTIF_STATUS,
                                            'IPM_Default_Section__c' => True};
            projDocSec = (IPM_Project_Document_Section__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section__c'
                                                ,projDocSecMap,FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            projDocSec.IPM_Section_Name__c = IPM_ConstantUtils.OTIF_STATUS;
            insert projDocSec;
            
            System.assertEquals(projDocSec.IPM_Project_Document__c,projDoc.ID); //check whether parent project document for project document section is equal to projDoc
            IPM_Project_Document_Section__c projectDocSecObj=[select IPM_Project_Document__c from IPM_Project_Document_Section__c where id=:projDocSec.Id];
            system.assertEquals(projectDocSecObj.IPM_Project_Document__c,projDoc.ID,System.Label.IPM_Record_successfully_saved);
            
            docSecLst=new List<IPM_Project_Document_Section__c>();
            docSecLst.add(projDocSec);
            
            projDocSecCon=IPM_TestFactory_Helper.createIPMProjectDocumentSectionContent(FALSE);
            projDocSecCon.IPM_Project_Document_Section__c=projDocSec.ID;
            projDocSecCon.IPM_Content_Type__c=IPM_ConstantUtils.CMIGATE_CONTENT_TYPE;
            insert projDocSecCon;
            
            System.assert(projDocSecCon!=null); //check whether project doc section is not equal to null
            IPM_Project_Document_Section_Content__c projectDocSecConObj=[select IPM_Project_Document_Section__c from IPM_Project_Document_Section_Content__c where id=:projDocSecCon.Id];
            system.assertEquals(projectDocSecConObj.IPM_Project_Document_Section__c,projDocSec.ID,System.Label.IPM_Record_successfully_saved);
       
            List<IPM_Project_Type__c> customsettingList = new List<IPM_Project_Type__c>();
            
            IPM_Project_Type__c customsetting = new IPM_Project_Type__c();
            customsetting.name = 'Test';
            customsetting.IPM_Phase__c = IPM_ConstantUtils.PHASE_CAPABILITY;
            customsetting.IPM_Project_Span__c = IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            customsetting.IPM_Project_Type__c = IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            customsetting.IPM_GateKeeping_Model__c = IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;
            customsetting.IPM_Source_Company_Card__c = STR_GLOBAL_COMPANY;
            customsetting.IPM_Gate_Document__c= IPM_ConstantUtils.MARKET_READY_GATE;
            
            customsettingList.add(customsetting);
            
            insert customsettingList;
            
            List<IPM_OTIF_Status__c> OTIFSettingList = new List<IPM_OTIF_Status__c>();
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 1', IPM_Gate_Document_Type__c= IPM_ConstantUtils.CHARTER_GATE));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 2',IPM_Gate_Document_Type__c= 'Contract'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 3',IPM_Gate_Document_Type__c= 'Market Deployment'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 4',IPM_Gate_Document_Type__c= IPM_ConstantUtils.MARKET_READY_GATE));
            
            insert OTIFSettingList; 
            //Test.StopTest();
            }
      }
      
      static void initializeData1(){
        projSecConUser=IPM_TestFactory_Helper.createUser(true);
        System.runAs(projSecConUser){
            //Test.StartTest();
            project = IPM_TestFactory_Helper.createIPMProject(false);
            project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;  
            project.Name=TEST_PROJECT;
            project.IPM_Project_Name__c=TEST_PROJECT;
            project.IPM_Selected_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL;
            project.IPM_Project_Type__c =IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            project.IPM_Technical_Project_Leader__c =userinfo.getuserid();
            project.IPM_Project_Leader__c = userinfo.getuserid();
            project.Deputy_Project_Leader__c = userinfo.getuserid();
            project.IPM_Project_Gatekeeper__c = userinfo.getuserid();
            project.IPM_Phase__c= IPM_ConstantUtils.PHASE_CAPABILITY;
            project.Sustainability_Period__c='3';
            project.Deputy_Project_Leader__c=userinfo.getuserid();
            project.IPMProject_Span__c=IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            project.IPM_Complexity__c=IPM_ConstantUtils.IPM_COMPLEXITY_FULL;
            project.IPM_CompanyCardText__c=STR_GLOBAL_COMPANY;
            project.IPM_Category_Text__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectSubType__c=STR_INNOVATION_RENOVATION;
            project.IPM_UserCategory__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectJobType__c=IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL;
            project.IPM_IsCompleted__c=true;
            project.RecordTypeID=Schema.SObjectType.IPM_Project__c.RecordTypeInfosByName.get(STR_CLUSTERING).RecordTypeId;
            insert project;
           
            IPM_Project__c projectObj=[select IPM_IsCompleted__c from IPM_Project__c where id=:project.Id];
            system.assert(projectObj.IPM_IsCompleted__c,System.Label.IPM_Record_successfully_saved);
            
            
            projDoc=IPM_TestFactory_Helper.createIPMProjectDocument(FALSE);
            projDoc.IPM_Project__c=project.ID;
            projDoc.IPM_GateDocuments__c=IPM_ConstantUtils.CHARTER_GATE;
            insert projDoc;
            System.assertEquals(projDoc.IPM_Project__c,project.ID); //check whether parent project for project document is equal to project
            IPM_Project_Document__c projectDocObj=[select IPM_Project__c from IPM_Project_Document__c where id=:projDoc.Id];
            system.assertEquals(projectDocObj.IPM_Project__c,project.ID,System.Label.IPM_Record_successfully_saved);
            
            docLst=new List<IPM_Project_Document__c>();
            docLst.add(projDoc);
            
            /*projDocSec=IPM_TestFactory_Helper.createIPMProjectDocumentSection(FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            insert projDocSec;*/
            
             Map<String,Object> projDocSecMap =  new Map<String,Object>{'IPM_Section_Name__c' => IPM_ConstantUtils.OTIF_STATUS,
                                            'IPM_Default_Section__c' => True};
            projDocSec = (IPM_Project_Document_Section__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section__c'
                                                ,projDocSecMap,FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            projDocSec.IPM_Section_Name__c = IPM_ConstantUtils.OTIF_STATUS;
            projDocSec.IPM_Master_Section_External_Id__c = 'Business_Case_Action_Standards';
            insert projDocSec;
            
            System.assertEquals(projDocSec.IPM_Project_Document__c,projDoc.ID); //check whether parent project document for project document section is equal to projDoc
            IPM_Project_Document_Section__c projectDocSecObj=[select IPM_Project_Document__c from IPM_Project_Document_Section__c where id=:projDocSec.Id];
            system.assertEquals(projectDocSecObj.IPM_Project_Document__c,projDoc.ID,System.Label.IPM_Record_successfully_saved);
            
            docSecLst=new List<IPM_Project_Document_Section__c>();
            docSecLst.add(projDocSec);
            
            projDocSecCon=IPM_TestFactory_Helper.createIPMProjectDocumentSectionContent(FALSE);
            projDocSecCon.IPM_Project_Document_Section__c=projDocSec.ID;
            insert projDocSecCon;
            System.assert(projDocSecCon!=null); //check whether project doc section is not equal to null
            IPM_Project_Document_Section_Content__c projectDocSecConObj=[select IPM_Project_Document_Section__c from IPM_Project_Document_Section_Content__c where id=:projDocSecCon.Id];
            system.assertEquals(projectDocSecConObj.IPM_Project_Document_Section__c,projDocSec.ID,System.Label.IPM_Record_successfully_saved);
            
            List<IPM_Project_Type__c> customsettingList = new List<IPM_Project_Type__c>();
            
            IPM_Project_Type__c customsetting = new IPM_Project_Type__c();
            customsetting.name = 'Test';
            customsetting.IPM_Phase__c = IPM_ConstantUtils.PHASE_CAPABILITY;
            customsetting.IPM_Project_Span__c = IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            customsetting.IPM_Project_Type__c = IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            customsetting.IPM_GateKeeping_Model__c = IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;
            customsetting.IPM_Source_Company_Card__c = STR_GLOBAL_COMPANY;
            customsetting.IPM_Gate_Document__c= IPM_ConstantUtils.CHARTER_GATE;
            
            customsettingList.add(customsetting);
            
            insert customsettingList;
            
            List<IPM_OTIF_Status__c> OTIFSettingList = new List<IPM_OTIF_Status__c>();
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 1', IPM_Gate_Document_Type__c= IPM_ConstantUtils.CHARTER_GATE));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 2',IPM_Gate_Document_Type__c= 'Contract'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 3',IPM_Gate_Document_Type__c= 'Market Deployment'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 4',IPM_Gate_Document_Type__c= IPM_ConstantUtils.MARKET_READY_GATE));
            
            insert OTIFSettingList; 
            //Test.StopTest();
            }
      }
      
      static void initializeData2(){
        projSecConUser=IPM_TestFactory_Helper.createUser(true);
        System.runAs(projSecConUser){
            //Test.StartTest();
            project = IPM_TestFactory_Helper.createIPMProject(false);
            project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;  
            project.Name=TEST_PROJECT;
            project.IPM_Project_Name__c=TEST_PROJECT;
            project.IPM_Selected_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL;
            project.IPM_Project_Type__c =IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            project.IPM_Technical_Project_Leader__c =userinfo.getuserid();
            project.IPM_Project_Leader__c = userinfo.getuserid();
            project.Deputy_Project_Leader__c = userinfo.getuserid();
            project.IPM_Project_Gatekeeper__c = userinfo.getuserid();
            project.IPM_Phase__c= IPM_ConstantUtils.PHASE_CAPABILITY;
            project.Sustainability_Period__c='3';
            project.Deputy_Project_Leader__c=userinfo.getuserid();
            project.IPMProject_Span__c=IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            project.IPM_Complexity__c=IPM_ConstantUtils.IPM_COMPLEXITY_FULL;
            project.IPM_CompanyCardText__c=STR_GLOBAL_COMPANY;
            project.IPM_Category_Text__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectSubType__c=STR_INNOVATION_RENOVATION;
            project.IPM_UserCategory__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectJobType__c=IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL;
            project.IPM_IsCompleted__c=true;
            project.RecordTypeID=Schema.SObjectType.IPM_Project__c.RecordTypeInfosByName.get(STR_CLUSTERING).RecordTypeId;
            insert project;
            
            project1 = IPM_TestFactory_Helper.createIPMProject(false);
            project1.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;  
            project1.Name=TEST_PROJECT;
            project1.IPM_Project_Name__c='abcd1';
            project1.IPM_Selected_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL;
            project1.IPM_Project_Type__c =IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            project1.IPM_Technical_Project_Leader__c =userinfo.getuserid();
            project1.IPM_Project_Leader__c = userinfo.getuserid();
            project1.Deputy_Project_Leader__c = userinfo.getuserid();
            project1.IPM_Project_Gatekeeper__c = userinfo.getuserid();
            project1.IPM_Phase__c= IPM_ConstantUtils.PHASE_CAPABILITY;
            project1.Sustainability_Period__c='3';
            project1.Deputy_Project_Leader__c=userinfo.getuserid();
            project1.IPMProject_Span__c=IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            project1.IPM_Complexity__c=IPM_ConstantUtils.IPM_COMPLEXITY_FULL;
            project1.IPM_CompanyCardText__c=STR_GLOBAL_COMPANY;
            project1.IPM_Category_Text__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project1.IPM_ProjectSubType__c=STR_INNOVATION_RENOVATION;
            project1.IPM_UserCategory__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project1.IPM_ProjectJobType__c=IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL;
            project1.IPM_IsCompleted__c=true;
            project1.RecordTypeID=Schema.SObjectType.IPM_Project__c.RecordTypeInfosByName.get(STR_CLUSTERING).RecordTypeId;
            insert project1;
            
            project.IPM_Parent_Project__c = project1.ID;
            update project;
           
            IPM_Project__c projectObj=[select IPM_IsCompleted__c from IPM_Project__c where id=:project.Id];
            system.assert(projectObj.IPM_IsCompleted__c,System.Label.IPM_Record_successfully_saved);
            
            
            projDoc=IPM_TestFactory_Helper.createIPMProjectDocument(FALSE);
            projDoc.IPM_Project__c=project.ID;
            projDoc.IPM_GateDocuments__c=IPM_ConstantUtils.CHARTER_GATE;
            insert projDoc;
            System.assertEquals(projDoc.IPM_Project__c,project.ID); //check whether parent project for project document is equal to project
            IPM_Project_Document__c projectDocObj=[select IPM_Project__c from IPM_Project_Document__c where id=:projDoc.Id];
            system.assertEquals(projectDocObj.IPM_Project__c,project.ID,System.Label.IPM_Record_successfully_saved);
            
            docLst=new List<IPM_Project_Document__c>();
            docLst.add(projDoc);
            
            /*projDocSec=IPM_TestFactory_Helper.createIPMProjectDocumentSection(FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            insert projDocSec;*/
            
             Map<String,Object> projDocSecMap =  new Map<String,Object>{'IPM_Section_Name__c' => IPM_ConstantUtils.OTIF_STATUS,
                                            'IPM_Default_Section__c' => True};
            projDocSec = (IPM_Project_Document_Section__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section__c'
                                                ,projDocSecMap,FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            projDocSec.IPM_Section_Name__c = IPM_ConstantUtils.OTIF_STATUS;
            projDocSec.IPM_Master_Section_External_Id__c = 'Mix_Qualification_Plan_and_Action_Standards';
            
            insert projDocSec;
            
            System.assertEquals(projDocSec.IPM_Project_Document__c,projDoc.ID); //check whether parent project document for project document section is equal to projDoc
            IPM_Project_Document_Section__c projectDocSecObj=[select IPM_Project_Document__c from IPM_Project_Document_Section__c where id=:projDocSec.Id];
            system.assertEquals(projectDocSecObj.IPM_Project_Document__c,projDoc.ID,System.Label.IPM_Record_successfully_saved);
            
            docSecLst=new List<IPM_Project_Document_Section__c>();
            docSecLst.add(projDocSec);
            
            projDocSecIdSet = new Set<Id>();
            for(IPM_Project_Document_Section__c projDocSecObj : docSecLst){
                projDocSecIdSet.add(projDocSecObj.Id);
            }
            projDocSecCon=IPM_TestFactory_Helper.createIPMProjectDocumentSectionContent(FALSE);
            projDocSecCon.IPM_Project_Document_Section__c=projDocSec.ID;
            //projDocSecCon.IPM_Content_Type__c = IPM_ConstantUtils.CMIGATE_CONTENT_TYPE;
            insert projDocSecCon;
            System.assert(projDocSecCon!=null); //check whether project doc section is not equal to null
            IPM_Project_Document_Section_Content__c projectDocSecConObj=[select IPM_Project_Document_Section__c from IPM_Project_Document_Section_Content__c where id=:projDocSecCon.Id];
            system.assertEquals(projectDocSecConObj.IPM_Project_Document_Section__c,projDocSec.ID,System.Label.IPM_Record_successfully_saved);
            
            List<IPM_Project_Type__c> customsettingList = new List<IPM_Project_Type__c>();
            
            IPM_Project_Type__c customsetting = new IPM_Project_Type__c();
            customsetting.name = 'Operational-Regional-MR';
            customsetting.IPM_Phase__c = IPM_ConstantUtils.PHASE_CAPABILITY;
            customsetting.IPM_Project_Span__c = IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            customsetting.IPM_Project_Type__c = IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            customsetting.IPM_GateKeeping_Model__c = IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;
            customsetting.IPM_Source_Company_Card__c = STR_GLOBAL_COMPANY;
            customsetting.IPM_Gate_Document__c= IPM_ConstantUtils.CHARTER_GATE;
            customsetting.IPM_Parent_project_Type__c = 'Operational-Regional-MR';
            
            customsettingList.add(customsetting);
            
            insert customsettingList;
            
            List<IPM_OTIF_Status__c> OTIFSettingList = new List<IPM_OTIF_Status__c>();
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 1', IPM_Gate_Document_Type__c= IPM_ConstantUtils.CHARTER_GATE));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 2',IPM_Gate_Document_Type__c= 'Contract'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 3',IPM_Gate_Document_Type__c= 'Market Deployment'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 4',IPM_Gate_Document_Type__c= IPM_ConstantUtils.MARKET_READY_GATE));
            
            insert OTIFSettingList; 
            
            gateCMI = IPM_TestFactory_Helper.createGateCMI(project.ID, false);
            gateCMI.IPM_Project__c = project.ID;
            
            insert gateCMI;
            //Test.StopTest();
            }
      }
      
      static void initializeData3(){
        projSecConUser=IPM_TestFactory_Helper.createUser(true);
        System.runAs(projSecConUser){
            //Test.StartTest();
            project = IPM_TestFactory_Helper.createIPMProject(false);
            project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;  
            project.Name=TEST_PROJECT;
            project.IPM_Project_Name__c=TEST_PROJECT;
            project.IPM_Selected_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL;
            project.IPM_Project_Type__c =IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            project.IPM_Technical_Project_Leader__c =userinfo.getuserid();
            project.IPM_Project_Leader__c = userinfo.getuserid();
            project.Deputy_Project_Leader__c = userinfo.getuserid();
            project.IPM_Project_Gatekeeper__c = userinfo.getuserid();
            project.IPM_Phase__c= IPM_ConstantUtils.PHASE_CAPABILITY;
            project.Sustainability_Period__c='3';
            project.Deputy_Project_Leader__c=userinfo.getuserid();
            project.IPMProject_Span__c=IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            project.IPM_Complexity__c=IPM_ConstantUtils.IPM_COMPLEXITY_FULL;
            project.IPM_CompanyCardText__c=STR_GLOBAL_COMPANY;
            project.IPM_Category_Text__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectSubType__c=STR_INNOVATION_RENOVATION;
            project.IPM_UserCategory__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project.IPM_ProjectJobType__c=IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL;
            project.IPM_IsCompleted__c=true;
            project.RecordTypeID=Schema.SObjectType.IPM_Project__c.RecordTypeInfosByName.get(STR_CLUSTERING).RecordTypeId;
            insert project;
            
            project1 = IPM_TestFactory_Helper.createIPMProject(false);
            project1.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;  
            project1.Name=TEST_PROJECT;
            project1.IPM_Project_Name__c='abcd1';
            project1.IPM_Selected_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL;
            project1.IPM_Project_Type__c =IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            project1.IPM_Technical_Project_Leader__c =userinfo.getuserid();
            project1.IPM_Project_Leader__c = userinfo.getuserid();
            project1.Deputy_Project_Leader__c = userinfo.getuserid();
            project1.IPM_Project_Gatekeeper__c = userinfo.getuserid();
            project1.IPM_Phase__c= IPM_ConstantUtils.PHASE_CAPABILITY;
            project1.Sustainability_Period__c='3';
            project1.Deputy_Project_Leader__c=userinfo.getuserid();
            project1.IPMProject_Span__c=IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            project1.IPM_Complexity__c=IPM_ConstantUtils.IPM_COMPLEXITY_FULL;
            project1.IPM_CompanyCardText__c=STR_GLOBAL_COMPANY;
            project1.IPM_Category_Text__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project1.IPM_ProjectSubType__c=STR_INNOVATION_RENOVATION;
            project1.IPM_UserCategory__c=IPM_ConstantUtils.HOUSEHOLDCARE_CONSTANT;
            project1.IPM_ProjectJobType__c=IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL;
            project1.IPM_IsCompleted__c=true;
            project1.RecordTypeID=Schema.SObjectType.IPM_Project__c.RecordTypeInfosByName.get(STR_CLUSTERING).RecordTypeId;
            insert project1;
            
            project.IPM_Parent_Project__c = project1.ID;
            update project;
           
            IPM_Project__c projectObj=[select IPM_IsCompleted__c from IPM_Project__c where id=:project.Id];
            system.assert(projectObj.IPM_IsCompleted__c,System.Label.IPM_Record_successfully_saved);
            
            
            projDoc=IPM_TestFactory_Helper.createIPMProjectDocument(FALSE);
            projDoc.IPM_Project__c=project.ID;
            projDoc.IPM_GateDocuments__c=IPM_ConstantUtils.CHARTER_GATE;
            insert projDoc;
            System.assertEquals(projDoc.IPM_Project__c,project.ID); //check whether parent project for project document is equal to project
            IPM_Project_Document__c projectDocObj=[select IPM_Project__c from IPM_Project_Document__c where id=:projDoc.Id];
            system.assertEquals(projectDocObj.IPM_Project__c,project.ID,System.Label.IPM_Record_successfully_saved);
            
            docLst=new List<IPM_Project_Document__c>();
            docLst.add(projDoc);
            
            /*projDocSec=IPM_TestFactory_Helper.createIPMProjectDocumentSection(FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            insert projDocSec;*/
            
             Map<String,Object> projDocSecMap =  new Map<String,Object>{'IPM_Section_Name__c' => IPM_ConstantUtils.OTIF_STATUS,
                                            'IPM_Default_Section__c' => True};
            projDocSec = (IPM_Project_Document_Section__c)IPM_TestFactory.createSObject('IPM_Project_Document_Section__c'
                                                ,projDocSecMap,FALSE);
            projDocSec.IPM_Project_Document__c=projDoc.ID;
            projDocSec.IPM_Section_Name__c = IPM_ConstantUtils.OTIF_STATUS;
            projDocSec.IPM_Master_Section_External_Id__c = IPM_ConstantUtils.CONSUMER_EVIDENCE_CONCEPT;
            
            insert projDocSec;
            
            System.assertEquals(projDocSec.IPM_Project_Document__c,projDoc.ID); //check whether parent project document for project document section is equal to projDoc
            IPM_Project_Document_Section__c projectDocSecObj=[select IPM_Project_Document__c from IPM_Project_Document_Section__c where id=:projDocSec.Id];
            system.assertEquals(projectDocSecObj.IPM_Project_Document__c,projDoc.ID,System.Label.IPM_Record_successfully_saved);
            
            docSecLst=new List<IPM_Project_Document_Section__c>();
            docSecLst.add(projDocSec);
            projDocSecIdSet = new Set<Id>();
            for(IPM_Project_Document_Section__c projDocSecObj : docSecLst){
                projDocSecIdSet.add(projDocSecObj.Id);
            }
            projDocSecCon=IPM_TestFactory_Helper.createIPMProjectDocumentSectionContent(FALSE);
            projDocSecCon.IPM_Project_Document_Section__c=projDocSec.ID;
            projDocSecCon.IPM_Content_Type__c = IPM_ConstantUtils.EVIDENCE_CONTENT_TYPE;
            insert projDocSecCon;
            System.assert(projDocSecCon!=null); //check whether project doc section is not equal to null
            IPM_Project_Document_Section_Content__c projectDocSecConObj=[select IPM_Project_Document_Section__c from IPM_Project_Document_Section_Content__c where id=:projDocSecCon.Id];
            system.assertEquals(projectDocSecConObj.IPM_Project_Document_Section__c,projDocSec.ID,System.Label.IPM_Record_successfully_saved);
            
            List<IPM_Project_Type__c> customsettingList = new List<IPM_Project_Type__c>();
            
            IPM_Project_Type__c customsetting = new IPM_Project_Type__c();
            customsetting.name = 'Operational-Regional-MR';
            customsetting.IPM_Phase__c = IPM_ConstantUtils.PHASE_CAPABILITY;
            customsetting.IPM_Project_Span__c = IPM_ConstantUtils.ROLLOUT_SPAN_REGIONAL;
            customsetting.IPM_Project_Type__c = IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            customsetting.IPM_GateKeeping_Model__c = IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;
            customsetting.IPM_Source_Company_Card__c = STR_GLOBAL_COMPANY;
            customsetting.IPM_Gate_Document__c= IPM_ConstantUtils.CHARTER_GATE;
            customsetting.IPM_Parent_project_Type__c = 'Operational-Regional-MR';
            
            customsettingList.add(customsetting);
            
            insert customsettingList;
            
            List<IPM_OTIF_Status__c> OTIFSettingList = new List<IPM_OTIF_Status__c>();
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 1', IPM_Gate_Document_Type__c= IPM_ConstantUtils.CHARTER_GATE));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 2',IPM_Gate_Document_Type__c= 'Contract'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 3',IPM_Gate_Document_Type__c= 'Market Deployment'));
            OTIFSettingList.add(new IPM_OTIF_Status__c(Name = 'Test 4',IPM_Gate_Document_Type__c= IPM_ConstantUtils.MARKET_READY_GATE));
            
            insert OTIFSettingList; 
            
            gateCMI = IPM_TestFactory_Helper.createGateCMI(project.ID, false);
            gateCMI.IPM_Project__c = project.ID;
            
            insert gateCMI;
            //Test.StopTest();
            }
      }
       /*
    * @Description Tests actual content
    */
    static testMethod void testShowContent() {
        
        
        initializeData();
        
        system.RunAs(projSecConUser){
            Test.startTest();
            IPM_ProjectHelper.gateToOTIFCustomSetting = IPM_Utils.getOTIFMapping();
            docSecMap=new map<Id,List<IPM_Project_Document_Section__c>>();
            docSecMap.put(projDoc.Id,docSecLst);
            
            docStringMap=new Map<String,IPM_Project_Document__c>(); 
            docStringMap.put(IPM_ConstantUtils.MARKET_READY_GATE,projDoc);
            
            docMap=new Map<Id,Map<String,IPM_Project_Document__c>>();
            docMap.put(project.Id,docStringMap);
            projMap=new Map<Id,IPM_Project__c>();
            projMap.put(project.Id,project);
            
            
            IPM_ProjectSectionContentHelper.createOTIFStatus(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.createFinancialActionStandard(docSecMap,docMap, projMap);
            IPM_ProjectSectionContentHelper.manageCMISections(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.manageCustomerEvidenceConcepts(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCustomerChannel(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageFinancialActionStandards(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCuComplexity(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageAssumptions(projMap,docLst,docSecLst);
            
            // Validate that Project Document Section Content have been inserted
            //commented for Qatest but need to be corrected
            //List<IPM_Project_Document_Section_Content__c> lstProjDocSecContentList = [Select Id from IPM_Project_Document_Section_Content__c WHERE IPM_Project_Document_Section__c IN: projDocSecIdSet];
            //System.assert(lstProjDocSecContentList .size() > 0);
            System.assert(projMap.size() > 0);
            Test.stopTest();
        }
    }
    
    static testMethod void testFinancialActionStandard() {
        
        
        initializeData1();
        
        system.RunAs(projSecConUser){
            Test.startTest();
            IPM_ProjectHelper.gateToOTIFCustomSetting = IPM_Utils.getOTIFMapping();
            
            docSecMap=new map<Id,List<IPM_Project_Document_Section__c>>();
            docSecMap.put(projDoc.Id,docSecLst);
            
            docStringMap=new Map<String,IPM_Project_Document__c>(); 
            docStringMap.put(IPM_ConstantUtils.CHARTER_GATE,projDoc);
            
            docMap=new Map<Id,Map<String,IPM_Project_Document__c>>();
            docMap.put(project.Id,docStringMap);
            projMap=new Map<Id,IPM_Project__c>();
            projMap.put(project.Id,project);
            
            IPM_ProjectHelper.initializeProjectDetail(projMap);
            
            IPM_ProjectSectionContentHelper.createOTIFStatus(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.createFinancialActionStandard(docSecMap,docMap, projMap);
            IPM_ProjectSectionContentHelper.manageCMISections(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.manageCustomerEvidenceConcepts(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCustomerChannel(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageFinancialActionStandards(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCuComplexity(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageAssumptions(projMap,docLst,docSecLst);
           
            // Validate that Project Document Section Content have been inserted
            //commented for QATest but need to corrected
            //List<IPM_Project_Document_Section_Content__c> lstProjDocSecContentList = [Select Id from IPM_Project_Document_Section_Content__c WHERE IPM_Project_Document_Section__c IN: projDocSecIdSet];
            //System.assert(lstProjDocSecContentList.size() > 0);
            System.assert(projMap.size() > 0);
            Test.stopTest();
        }
    }
    
    static testMethod void testCMISections() {
        
        
        initializeData2();
        
        
        
        system.RunAs(projSecConUser){
            Test.startTest();
            IPM_ProjectHelper.gateToOTIFCustomSetting = IPM_Utils.getOTIFMapping();
            
            docSecMap=new map<Id,List<IPM_Project_Document_Section__c>>();
            docSecMap.put(projDoc.Id,docSecLst);
            
            docStringMap=new Map<String,IPM_Project_Document__c>(); 
            docStringMap.put(IPM_ConstantUtils.CHARTER_GATE,projDoc);
            
            docMap=new Map<Id,Map<String,IPM_Project_Document__c>>();
            docMap.put(project.Id,docStringMap);
            projMap=new Map<Id,IPM_Project__c>();
            projMap.put(project.Id,project);
            
            
            
            IPM_ProjectHelper.DBProjectdocumentSpecificSectionMap = docSecMap; 
           
            IPM_ProjectHelper.DBprojectSpecificDocumentMap.put(projMap.values()[0].ID, docLst);
           
            IPM_Project_Document_Section_Content__c tempProjDocSecCon = new IPM_Project_Document_Section_Content__c();
            tempProjDocSecCon = projDocSecCon;
            tempProjDocSecCon.IPM_Content_Type__c = IPM_ConstantUtils.CUSTOMER_CHANNEL_SECTION;
           
            projDocSecCon.IPM_Content_Type__c = IPM_ConstantUtils.CUSTOMER_CHANNEL_SECTION;
            IPM_ProjectHelper.DBprojectSectionSpecificContentMap.put(projDocSec.ID, new List<IPM_Project_Document_Section_Content__c>{projDocSecCon, tempProjDocSecCon });
            IPM_ProjectHelper.DBprojectSpecificCMIGateMap.put(projMap.values()[0].ID, new List<IPM_Gate_CMI__c>{gateCMI});
            IPM_ProjectHelper.initializeProjectDetail(projMap);           
                    
           
            IPM_ProjectSectionContentHelper.createOTIFStatus(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.createFinancialActionStandard(docSecMap,docMap, projMap);
            IPM_ProjectSectionContentHelper.manageCMISections(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.manageCustomerEvidenceConcepts(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCustomerChannel(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageFinancialActionStandards(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCuComplexity(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageAssumptions(projMap,docLst,docSecLst);
            // Validate that Project Document Section Content have been inserted
            List<IPM_Project_Document_Section_Content__c> lstProjDocSecContentList = [Select Id from IPM_Project_Document_Section_Content__c WHERE IPM_Project_Document_Section__c IN: projDocSecIdSet];
            System.assert(lstProjDocSecContentList.size() > 0);
          
            Test.stopTest();
        }
    }
    
    static testMethod void testManageCustomerEvidenceConcepts() {
        
        
        initializeData3();
        
        
        
        system.RunAs(projSecConUser){
            Test.startTest();
            IPM_ProjectHelper.gateToOTIFCustomSetting = IPM_Utils.getOTIFMapping();
            
            docSecMap=new map<Id,List<IPM_Project_Document_Section__c>>();
            docSecMap.put(projDoc.Id,docSecLst);
            
            docStringMap=new Map<String,IPM_Project_Document__c>(); 
            docStringMap.put(IPM_ConstantUtils.CHARTER_GATE,projDoc);
            
            docMap=new Map<Id,Map<String,IPM_Project_Document__c>>();
            docMap.put(project.Id,docStringMap);
            projMap=new Map<Id,IPM_Project__c>();
            projMap.put(project.Id,project);
           
            IPM_ProjectHelper.DBProjectdocumentSpecificSectionMap = docSecMap; 
           
            IPM_ProjectHelper.DBprojectSpecificDocumentMap.put(projMap.values()[0].ID, docLst);
            IPM_ProjectHelper.DBprojectSpecificDocumentMap.put(project1.ID, docLst);
            IPM_ProjectHelper.projectMasterMap.put(project.IPM_Parent_Project__c, project1);
           
            IPM_Project__c parentProject = IPM_ProjectHelper.projectMasterMap.get(project.IPM_Parent_Project__c);
           
            IPM_Project_Document_Section_Content__c tempProjDocSecCon = new IPM_Project_Document_Section_Content__c();
            tempProjDocSecCon = projDocSecCon;
            //tempProjDocSecCon .IPM_Content_Type__c = IPM_ConstantUtils.CMIGATE_CONTENT_TYPE;
           
            //projDocSecCon.IPM_Content_Type__c = IPM_ConstantUtils.CMIGATE_CONTENT_TYPE;
            IPM_ProjectHelper.DBprojectSectionSpecificContentMap.put(projDocSec.ID, new List<IPM_Project_Document_Section_Content__c>{projDocSecCon, tempProjDocSecCon });
            IPM_ProjectHelper.DBprojectSpecificCMIGateMap.put(projMap.values()[0].ID, new List<IPM_Gate_CMI__c>{gateCMI});
            IPM_ProjectHelper.initializeProjectDetail(projMap);       
            IPM_ProjectHelper.projectDocumentMap.put(projDoc.ID, projDoc);
            IPM_ProjectHelper.projectSectionMap.put(projDocSec.ID, projDocSec);
                    
           
            IPM_ProjectSectionContentHelper.createOTIFStatus(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.createFinancialActionStandard(docSecMap,docMap, projMap);
            IPM_ProjectSectionContentHelper.manageCMISections(docSecMap,docMap,projMap);
            IPM_ProjectSectionContentHelper.manageCustomerEvidenceConcepts(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCustomerChannel(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageFinancialActionStandards(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageCuComplexity(projMap,docLst,docSecLst);
            IPM_ProjectSectionContentHelper.manageAssumptions(projMap,docLst,docSecLst);
           
            // Validate that Project Document Section Content have been inserted
            List<IPM_Project_Document_Section_Content__c> lstProjDocSecContentList = [Select Id from IPM_Project_Document_Section_Content__c WHERE IPM_Project_Document_Section__c IN: projDocSecIdSet];
            System.assert(lstProjDocSecContentList.size() > 0);
            Test.stopTest();
        }
    }
}