/**
* IPM_List_Milestones_Test : This Test class for IPM_List_Milestones  apex class
* @author
*
*/@isTest
public class IPM_List_Milestones_Test {
    
    
    private static User stdUserForMilestone;
    
    /*
        *  Description: Milestone Set up data
        *  @name mileStoneSetUp
    */
    @testSetup static void mileStoneSetUp(){
        
        System.runAs(IPM_TestFactory_Helper.createUserAdmin(true))
        {
            // user has to be created as system admin 
            stdUserForMilestone = IPM_TestFactory_Helper.createIPMPlatformProfileUser('');
        }   
        // Create Company Card information 
        IPM_Company_Card__c globalCompanyCard = IPM_TestFactory_Helper.createGlobalCompanyCard(false);
        IPM_Company_Card__c regionalCompanyCard = IPM_TestFactory_Helper.createRegionalCompanyCard(false);
        IPM_Company_Card__c localCompanyCard = IPM_TestFactory_Helper.createLocalCompanyCard(false);
        
        List<IPM_Company_Card__c> companyCardList = new List<IPM_Company_Card__c>{globalCompanyCard,regionalCompanyCard,localCompanyCard};
        insert companyCardList;
        
        IPM_TestFactory_Helper.getProjectMasterData();
        List<IPM_Project__c> projectList = IPM_TestFactory_Helper.projectSetUp(1, stdUserForMilestone);
        System.runAs(stdUserForMilestone)
        {
            projectList[0].IPM_Market_Type__c = IPM_Utils.DevelopingIPM_Market_Type;
            projectList[0].BET_TLD_First_Release_Date__c = Date.today();
            projectList[0].BET_TLD_Final_Release_Date__c = Date.today().addDays(5);
            projectList[0].BET_First_Release_Missed__c = true;
            projectList[0].BET_Final_Release_Missed__c = true;
            insert projectList;
            
            List<IPM_Milestone__c> milestoneList = [Select Id, IPM_Phase__c, IPM_Due_Date__c from IPM_Milestone__c WHERE IPM_Project__c =: projectList[0].Id];
            
            for(Integer i =0; i < milestoneList.size(); i++){
                if(milestoneList[i].IPM_Phase__c == IPM_ConstantUtils.PHASE_MARKET_READY){
                    milestoneList[i].IPM_Due_Date__c = projectList[0].IPM_Target_Launch_Dates__c - 10;
                }
                
            }
            update milestoneList;
            
        } 
    } 
    
    
    /*
        *  Description Running Test Script
        *  @name listMilestoneTest
    */
    Static testMethod void listMilestoneTest(){
        
        Set<String> projectNameSet = new Set<String>{'TestComments1'};
        
        //Get the project data
        IPM_Project__c proj = [SELECT Id, Name, IPM_Target_Launch_Dates__c from IPM_project__c WHERE Name IN: projectNameSet ];
        // get the running user information
        User globalUser = [Select Id, LastName from User where LastName = 'PLATFORM_USER' limit 1];  
        
        System.runAs(globalUser)
        {
            Test.startTest();
            
            PageReference pg = Page.IPM_ProjectSetupView;
            Test.setCurrentPageReference(pg);
            ApexPages.CurrentPage().getparameters().put('Pid', proj.id); // NO SONAR. Pid has been used at mutiple places to cover multiple scenarios
            System.Assert(ApexPages.CurrentPage().getparameters().get('Pid') == proj.id, SHOULDBESAME);
            IPM_List_Milestones mileList = new IPM_List_Milestones();
            mileList.isCompleteMilestones = 'f'; 
            mileList.checkForOTIFWarning();
            
            // Methods to sort the milestones 
            mileList.toggleSortMilestones();
            mileList.toggleSortPhases();
            
            List<IPM_Milestone__c> milestoneList = [Select Id, IPM_Phase__c, IPM_Due_Date__c from IPM_Milestone__c WHERE IPM_Project__c =: proj.Id];
            // First milestone should be of Ideas phase
            System.Assert(milestoneList[0].IPM_Phase__c == IPM_ConstantUtils.PHASE_IDEAS);
            
            mileList.filteredphaseM();
            mileList.filterCompleteMilestones();
            mileList.setMilestoneId(STR_TEST);
            String milestoneid = mileList.getMilestoneId();
            System.Assert(milestoneid == STR_TEST, SHOULDBESAME);
            mileList.setphaseM(STR_TEST);
            String phasevalue = mileList.getphaseM();
            System.Assert(phasevalue == STR_TEST, SHOULDBESAME);
            
            IPM_Milestone__c ipmMilestone = [Select Id, Name, IPM_Project__c from IPM_Milestone__c WHERE IPM_Project__c =: proj.Id limit 1];
            
            mileList.milestoneId = String.valueOf(ipmMilestone.Id);
            mileList.isChecked = 'true';
            mileList.markCompleteM();
            
            mileList.toggleSortCompletion();
            mileList.toggleSortCompletedOn();
            List<IPM_Milestone__c> completedmilestoneList = [Select Id, IPM_Phase__c, IPM_Completed__c, IPM_Completed_On__c from IPM_Milestone__c WHERE IPM_Project__c =: proj.Id];
            // First milestone should be completed and today date should be set.
            System.Assert(completedmilestoneList[0].IPM_Completed__c);
            System.Assert(completedmilestoneList[0].IPM_Completed_On__c == System.today());
            
            
            // Assert to check milestone has been completed.
            System.assertEquals(true, [Select Id, IPM_Completed__c from IPM_Milestone__c WHERE Id =:ipmMilestone.Id].IPM_Completed__c,'Milestone has Not Completed');
            mileList.deleteMilestone();
            // Assert to check milestone has been deleted.
            System.assert([Select Id, IPM_Completed__c from IPM_Milestone__c WHERE Id =:ipmMilestone.Id].size() == 0);
            Test.stopTest();
        }
    }
    
    
    public static final string SHOULDBESAME = 'Should be same';
    public static final String STR_TEST = 'test';
    static User runningUser = IPM_TestFactory_Helper.createUser(true);
    

    /**************************************************
    * @description : Test method for  BET warning messages on milestones
    ***************************************************/
    Static testMethod void betWarningMessagesnMilestonestest() {  
         Set<String> projectNameSet = new Set<String>{'TestComments1'};
        
        //Get the project data
        IPM_Project__c proj = [SELECT Id, Name,BET_TLD_First_Release_Date__c,BET_TLD_Final_Release_Date__c,BET_Final_Release_Missed__c ,
                               BET_First_Release_Missed__c ,IPM_Target_Launch_Dates__c from IPM_project__c WHERE Name IN: projectNameSet ];
      
        System.Assert(proj.Id != null, 'The project record not inserted');

        Id  PROJECT_MILESTONE_RECTYPE = Schema.SObjectType.IPM_Milestone__c.getRecordTypeInfosByName().get(IPM_Utils.milePMRecordType).getRecordTypeId();
        
        IPM_Milestone__c projMilestoneFirst = IPM_TestFactory_Helper.createIPMMilestone(proj.Id, false);
        projMilestoneFirst.Name = 'BETFirstReleaseMilestone';
        projMilestoneFirst.IPM_Type_of_Milestone__c = 'BET';
        projMilestoneFirst.IPM_Due_Date__c = Date.today().addDays(-30);
        projMilestoneFirst.ExternalField__c=proj.Id + IPM_ConstantUtils.BET_MS_FIRST_RELEASE;
        projMilestoneFirst.recordTypeId = PROJECT_MILESTONE_RECTYPE;
        
        IPM_Milestone__c projMilestoneFinal = IPM_TestFactory_Helper.createIPMMilestone(proj.Id, false);
        projMilestoneFinal.Name = 'BETFinalReleaseMilestone';
        projMilestoneFinal.IPM_Type_of_Milestone__c = 'BET';
        projMilestoneFinal.IPM_Due_Date__c = Date.today().addDays(-25);
        projMilestoneFirst.ExternalField__c=proj.Id+ IPM_ConstantUtils.BET_MS_FINAL_RELEASE;
        projMilestoneFirst.recordTypeId = PROJECT_MILESTONE_RECTYPE;
        
        upsert new List < IPM_Milestone__c > {
            projMilestoneFirst, projMilestoneFinal
        } ExternalField__c;
        

        System.Assert(projMilestoneFirst.Id != null, 'Failed to insert milestone projMilestoneFirst ');
        System.Assert(projMilestoneFinal.Id != null, 'Failed to insert milestone projMilestoneFinal ');
        
        User globalUser = [Select Id, LastName from User where LastName = 'PLATFORM_USER' limit 1];
        system.runAs(globalUser) {

            Test.StartTest();
            PageReference pg = Page.IPM_ProjectSetupView;
            Test.setCurrentPageReference(pg);
            ApexPages.CurrentPage().getparameters().put('Pid', proj.id);
            IPM_List_Milestones ipmListMilestones = new IPM_List_Milestones();
            System.Assert(ApexPages.CurrentPage().getparameters().get('Pid') == ipmListMilestones.projectId, 'Unable to set page parameter Pid');
            System.AssertNotEquals(ipmListMilestones.warningMessages.size(), 0, 'Messages not available');
            System.Assert((new Set < String > (ipmListMilestones.warningMessages)).contains(system.label.IPM_BETFirstReleaseMissed));
            System.Assert((new Set < String > (ipmListMilestones.warningMessages)).contains(system.label.IPM_BETFinalReleaseMissed));
            ipmListMilestones.getWrapperRecords();
            ipmListMilestones.postProcessing(new List < IPM_Milestone__c > {
                projMilestoneFirst, projMilestoneFinal
            });
            System.AssertEquals(ipmListMilestones.wrapperRecordList[0].isEditable, false, 'Failed to set  Bet milestones to read only ');
            System.AssertEquals(ipmListMilestones.wrapperRecordList[0].isDeletable, false, 'BET milestones are deletable! ');
            Test.StopTest();
        }

    }

}