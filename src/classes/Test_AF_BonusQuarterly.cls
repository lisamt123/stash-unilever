/*****************************************************************************************************************************
@Author :Cognizant
@name : Test_AF_BonusQuarterly
@CreateDate : 19/9/2014
@Description : This is a Test class for AF_BonusQuarterly class, 
@Version : 1.0
@reference : none
****************************************************************************************************************************/
@isTest(SeeAlldata=false)
public class Test_AF_BonusQuarterly
{    
    Static Integer IcurrYear = System.Today().year();
    Static string currYear=string.valueof(IcurrYear);
    /***********************************************************************************
*  @Description: this method will the test data
*  @name : bonusQuarterly
*  @param : none.
*  @return: none.
*************************************************************************************/
    Static testMethod void bonusQuarterly()
    {
        Test.startTest();
        Profile p=[Select Id from Profile where Name='System Administrator'];       
        //Insert User 
        User u= new User(Alias = 'testbc', Email='standarduserbc@unilever.com', 
        EmailEncodingKey='UTF-8', LastName='Test Userbc', LanguageLocaleKey='en_US', 
        LocaleSidKey='en_US', ProfileId = p.Id, 
        TimeZoneSidKey='Europe/London',AF_Agency_Fees_User_Type__c='Category Finance',isActive=true, 
        UserName='testuserbc@test123321.com',AF_Brand__c='Test Brandbc',AF_Category__c='Test Beveragesbc');
        insert u;        
        System.runAs(u)
        { 
            //Insert Account
            Account acc=new Account();
            acc.Name='Test Agencybc';
            acc.published__c=true;
            insert acc;
            System.Assert(acc.Id != null, 'The account record not inserted');
            //Insert Category
            RecordType catRT = [select id,Name from RecordType where SobjectType='AF_Category_Brand__c' and Name='Category' Limit 1];
            AF_Category_Brand__c cat=new AF_Category_Brand__c();
            cat.RecordTypeId=catRT.Id;
            cat.Name='Test Beveragesbc';
            cat.AF_Pilot_Model__c=false;     
            cat.AF_Super_category__c='Drinks';
            insert cat;
            System.Assert(cat.Id != null, 'The Category record not inserted');
            //Insert Brand
            RecordType brandRT = [select id,Name from RecordType where SobjectType='AF_Category_Brand__c' and Name='Brand' Limit 1];
            AF_Category_Brand__c bran=new AF_Category_Brand__c();
            bran.RecordTypeId=brandRT.Id;
            bran.AF_Pilot_Model__c=false;    
            bran.Name='Test Brandbc';
            bran.AF_Category_Brands__c=cat.Id;
            insert bran;
            System.assertEquals(bran.AF_Category_Brands__c, cat.Id);
            string userid=u.id;
            DummyUser__c dummyuser = new DummyUser__c();
            dummyuser.User_id__c = userid;
            insert dummyuser;
            AF_AnnualBonus_Qual__c customRecord = new AF_AnnualBonus_Qual__c();
            customRecord.Name='5';
            customRecord.X5__c = 15;
            insert customRecord;
            AF_AnnualBonus_Qual__c customRecord1 = new AF_AnnualBonus_Qual__c();
            customRecord1.Name = 'Qualitative Value';
            customRecord1.X1__c = 0;
            customRecord1.X2__c = 0;
            customRecord1.X3__c = 5;
            customRecord1.X4__c = 10;
            customRecord1.X5__c = 15;
            insert customRecord1;
            AF_QuarterlyBonus__c QB = new AF_QuarterlyBonus__c();
            QB.Name = 'Bonus Threshold';
            QB.Minimum__c = 5;
            QB.Outstanding__c = 15;
            QB.Stretching__c = 10;
            insert QB;
            //Insert Brand Estimate                  
            AF_Brand_Estimate__c brandEst=new AF_Brand_Estimate__c();
            brandEst.AF_Agency__c=acc.Id;               
            brandEst.Name='Test BrandEstimatebc';
            brandEst.AF_Status_Base_Fees__c='Ready for PO';  
            brandEst.AF_Fiscal_Year__c=currYear;
            brandEst.AF_Active__c = true;
            brandEst.AF_Copied__c= false;
            brandEst.AF_Locked__c = false;  
            brandEst.Brand__c=bran.id;
            brandEst.AF_AgencyUsers1__c=u.Email;
            insert brandEst;
            System.assertEquals(brandEst.Brand__c, bran.id);
            AF_Currency__c curr = new AF_Currency__c();
            curr.AF_Country__c = 'Ecuador';
            curr.AF_Currency_Code__c = 'USD';
            curr.Country_Currency__c = 'Eucador-USD';
            curr.AF_Fiscal_Year_new__c = currYear;
            curr.Currency_Unit__c = 'US $';
            curr.AF_Fiscal_Year__c = system.today();
            curr.AF_Average_Exchange_Rate_To_EUR__c = 1.3253;
            curr.Ready_For_PO_Exchange_Rate_SGD_To_USD__c=1.0000;
            curr.Ready_For_PO_Exchange_Rate_To_EUR__c = 1.6112;
            insert curr;
            //Insert OOPS Actual
            AF_OOPS_Actual__c oopsActual=new AF_OOPS_Actual__c();
            oopsActual.AF_Agency_lk__c=acc.Id;     
            oopsActual.AF_Agency__c=acc.Id;
            oopsActual.AF_BrandEstimateId__c=brandEst.id;
            oopsActual.AF_Brand__c=bran.Id;
            oopsActual.AF_Fiscal_year__c='2013';
            insert oopsActual;   
            //Insert Agency Entity
            RecordType entiRT1 = [select id,Name from RecordType where SobjectType='AF_Entity__c' and Name='Agency Entity' Limit 1];       
            AF_Entity__c entity1=new AF_Entity__c();
            entity1.Name='Test Entitybc';        
            entity1.AF_Agency__c=acc.Id;
            entity1.AF_Country__c='Australia';
            entity1.RecordTypeId=entiRT1.Id;         
            insert entity1;
            //Insert Unilever Entity
            RecordType entiRT2 = [select id,Name from RecordType where SobjectType='AF_Entity__c' and Name='Unilever Entity' Limit 1];       
            AF_Entity__c entity2=new AF_Entity__c();
            entity2.Name='Test Unilever Entitybc';        
            entity2.RecordTypeId=entiRT2.Id;
            entity2.AF_Country__c = 'Test Unilever Entitybc';
            insert entity2; 
            //Insert Agency Estimate 
            AF_Agency_Estimate__c agency=new AF_Agency_Estimate__c();
            agency.AF_Brand_Estimate__c=brandEst.Id;
            agency.AF_Agency_Entity__c=entity1.id;
            agency.AF_Unilever_Entity__c=entity2.Id;  
            agency.AF_Fiscal_Year__c=currYear;
            agency.AF_Adaptation__c=22;
            agency.AF_Digital__c=22;
            agency.AF_Traditional__c=22; 
            agency.AF_Status__c='With Agency';
            insert agency;
            //Insert OOPS Estimate
            AF_OOPS_Estimate__c oopEst=new AF_OOPS_Estimate__c();
            oopEst.AF_Agency_Entity__c=entity1.Id;
            oopEst.AF_Brand_Estimate__c=brandEst.id;
            oopEst.AF_OOPS_Actual__c=oopsActual.Id;
            oopEst.AF_Unilever_Entity__c=entity2.Id;
            oopEst.AF_Estimate__c=55;
            insert oopEst;
            //Insert Bonus Summary
            AF_Bonus_Summary__c bonSum=new AF_Bonus_Summary__c();
            bonSum.AF_Agency__c=acc.Id;
            bonSum.AF_Brand__c=bran.Id;
            bonSum.AF_Fiscal_Year__c='2013';   
            insert bonSum;
            //Insert Bonus Threshold
            AF_Bonus_Threshold__c bonThres=new AF_Bonus_Threshold__c();
            bonThres.Agency_Name__c=acc.Id;
            bonThres.AF_Brand_Estimate__c=brandEst.Id;
            bonThres.Brand_Name__c=bran.Id;
            bonThres.AF_country__c=entity2.id;
            bonThres.Year__c = currYear;
            insert bonThres;
            system.debug('bonThres.....'+bonThres.Id);
            AF_Sub_Result__c subResult = new AF_Sub_Result__c();
            subResult.AF_Bonus_Threshold__c = bonThres.Id;
            subResult.AF_Period__c = 'Q1';
            subResult.AF_Digital__c = true;
            subResult.AF_Traditional__c = false;
            subResult.AF_country__c = entity2.id;
            subResult.AF_Quant__c = 12;
            subResult.AF_Minimum__c = 1;
            subResult.AF_Outstanding__c = 3;
            subResult.AF_Stretching__c = 2;
            subResult.Bonus_Measure__c = 'BM1';
            insert subResult;
            AF_Sub_Result__c subResult1 = new AF_Sub_Result__c();
            subResult1.AF_Bonus_Threshold__c = bonThres.Id;
            //subResult.AF_Period__c = 'Q1';
            subResult1.AF_Digital__c = true;
            subResult1.AF_Traditional__c = false;
            subResult1.AF_country__c = entity2.id;
            subResult1.AF_Quant__c = 12;
            subResult1.AF_Minimum__c = 5;
            subResult1.AF_Outstanding__c = 7;
            subResult1.AF_Stretching__c = 6;
            subResult.Bonus_Measure__c = 'BM1';
            insert subResult1;
            //Insert Bonus Results 
            AF_Bonus_Results__c bonRes=new AF_Bonus_Results__c();
            bonRes.AF_Bonus_Thresholds__c=bonThres.Id;
            // bonRes.AF_Total_Bonus_Value__c=23;
            insert bonRes;
            ApexPages.currentPage().getParameters().put('Brandid',bran.id);
            ApexPages.currentPage().getParameters().put('Agencyid',acc.id);
            ApexPages.currentPage().getParameters().put('Year',currYear);
            AF_BonusQuarterly bonQuart=new AF_BonusQuarterly();
            bonQuart.UpdateBonus();
        }
    }
    /***********************************************************************************
*  @Description: this method will the test data
*  @name : bonusQuarterly1
*  @param : none.
*  @return: none.
*************************************************************************************/
    Static testMethod void bonusQuarterly1()
    {
        Test.startTest();
        Profile p=[Select Id from Profile where Name='System Administrator'];       
        //Insert User 
        User u= new User(Alias = 'testbc1', Email='standarduserbc1@unilever.com', 
        EmailEncodingKey='UTF-8', LastName='Test Userbc1', LanguageLocaleKey='en_US', 
        LocaleSidKey='en_US', ProfileId = p.Id, 
        TimeZoneSidKey='Europe/London',AF_Agency_Fees_User_Type__c='Category Finance',isActive=true, 
        UserName='testuserbc1@test123321.com',AF_Brand__c='Test Brandbc1',AF_Category__c='Test Beveragesbc1');
        insert u;        
        System.runAs(u)
        { 
            //Insert Account
            Account acc=new Account();
            acc.Name='Test Agencybc1';
            acc.published__c=true;
            insert acc;
            System.Assert(acc.Id != null, 'The account record not inserted');
            //Insert Category
            RecordType catRT = [select id,Name from RecordType where SobjectType='AF_Category_Brand__c' and Name='Category' Limit 1];
            AF_Category_Brand__c cat=new AF_Category_Brand__c();
            cat.RecordTypeId=catRT.Id;
            cat.Name='Test Beveragesbc1';
            cat.AF_Pilot_Model__c=false;     
            cat.AF_Super_category__c='Drinks';
            insert cat;
            System.Assert(cat.Id != null, 'The Category record not inserted');
            //Insert Brand
            RecordType brandRT = [select id,Name from RecordType where SobjectType='AF_Category_Brand__c' and Name='Brand' Limit 1];
            AF_Category_Brand__c bran=new AF_Category_Brand__c();
            bran.RecordTypeId=brandRT.Id;
            bran.AF_Pilot_Model__c=false;    
            bran.Name='Test Brandbc1';
            bran.AF_Category_Brands__c=cat.Id;
            insert bran;
            System.assertEquals(bran.AF_Category_Brands__c, cat.Id);
            string userid=u.id;
            DummyUser__c dummyuser = new DummyUser__c();
            dummyuser.User_id__c = userid;
            insert dummyuser;
            AF_AnnualBonus_Qual__c customRecord = new AF_AnnualBonus_Qual__c();
            customRecord.Name='5';
            customRecord.X5__c = 15;
            insert customRecord;
            AF_AnnualBonus_Qual__c customRecord1 = new AF_AnnualBonus_Qual__c();
            customRecord1.Name = 'Qualitative Value';
            customRecord1.X1__c = 0;
            customRecord1.X2__c = 0;
            customRecord1.X3__c = 5;
            customRecord1.X4__c = 10;
            customRecord1.X5__c = 15;
            insert customRecord1;
            AF_QuarterlyBonus__c QB = new AF_QuarterlyBonus__c();
            QB.Name = 'Bonus Threshold';
            QB.Minimum__c = 5;
            QB.Outstanding__c = 15;
            QB.Stretching__c = 10;
            insert QB;
            //Insert Brand Estimate                  
            AF_Brand_Estimate__c brandEst=new AF_Brand_Estimate__c();
            brandEst.AF_Agency__c=acc.Id;               
            brandEst.Name='Test BrandEstimatebc1';
            brandEst.AF_Status_Base_Fees__c='Ready for PO';  
            brandEst.AF_Fiscal_Year__c=currYear;
            brandEst.AF_Active__c = true;
            brandEst.AF_Copied__c= false;
            brandEst.AF_Locked__c = false;  
            brandEst.Brand__c=bran.id;
            brandEst.AF_AgencyUsers1__c=u.Email;
            brandEst.AF_Pilot_Model__c=false;
            insert brandEst;
            System.assertEquals(brandEst.Brand__c, bran.id);
            AF_Currency__c curr = new AF_Currency__c();
            curr.AF_Country__c = 'Ecuador';
            curr.AF_Currency_Code__c = 'USD';
            curr.Country_Currency__c = 'Eucador-USD';
            curr.AF_Fiscal_Year_new__c = currYear;
            curr.Currency_Unit__c = 'US $';
            curr.AF_Fiscal_Year__c = system.today();
            curr.AF_Average_Exchange_Rate_To_EUR__c = 1.3253;
            curr.Ready_For_PO_Exchange_Rate_SGD_To_USD__c=1.0000;
            curr.Ready_For_PO_Exchange_Rate_To_EUR__c = 1.6112;
            insert curr;
            //Insert OOPS Actual
            AF_OOPS_Actual__c oopsActual=new AF_OOPS_Actual__c();
            oopsActual.AF_Agency_lk__c=acc.Id;     
            oopsActual.AF_Agency__c=acc.Id;
            oopsActual.AF_BrandEstimateId__c=brandEst.id;
            oopsActual.AF_Brand__c=bran.Id;
            oopsActual.AF_Fiscal_year__c=currYear;
            insert oopsActual;   
            //Insert Agency Entity
            RecordType entiRT1 = [select id,Name from RecordType where SobjectType='AF_Entity__c' and Name='Agency Entity' Limit 1];       
            AF_Entity__c entity1=new AF_Entity__c();
            entity1.Name='Test Entitybc1';        
            entity1.AF_Agency__c=acc.Id;
            entity1.AF_Country__c='Australia';
            entity1.RecordTypeId=entiRT1.Id;         
            insert entity1;
            //Insert Unilever Entity
            RecordType entiRT2 = [select id,Name from RecordType where SobjectType='AF_Entity__c' and Name='Unilever Entity' Limit 1];       
            AF_Entity__c entity2=new AF_Entity__c();
            entity2.Name='Austria';        
            entity2.RecordTypeId=entiRT2.Id;   
            entity2.AF_Country__c='Austria';
            insert entity2; 
            //Insert Agency Estimate 
            AF_Agency_Estimate__c agency=new AF_Agency_Estimate__c();
            agency.AF_Brand_Estimate__c=brandEst.Id;
            agency.AF_Agency_Entity__c=entity1.id;
            agency.AF_Unilever_Entity__c=entity2.Id;  
            agency.AF_Fiscal_Year__c=currYear;
            agency.AF_Adaptation__c=22;
            agency.AF_Digital__c=22;
            agency.AF_Traditional__c=22; 
            agency.AF_Status__c='With Agency';
            insert agency;
            //Insert Agency Estimate 
            AF_Agency_Estimate__c agency1=new AF_Agency_Estimate__c();
            agency1.AF_Brand_Estimate__c=brandEst.Id;
            agency1.AF_Agency_Entity__c=entity1.id;
            agency1.AF_Unilever_Entity__c=entity2.Id;  
            agency1.AF_Fiscal_Year__c=currYear;
            agency1.AF_Adaptation__c=22;
            agency1.AF_Digital__c=22;
            agency1.AF_Traditional__c=22; 
            agency1.AF_Status__c='With Agency';
            insert agency1;
            //Insert OOPS Estimate
            AF_OOPS_Estimate__c oopEst=new AF_OOPS_Estimate__c();
            oopEst.AF_Agency_Entity__c=entity1.Id;
            oopEst.AF_Brand_Estimate__c=brandEst.id;
            oopEst.AF_OOPS_Actual__c=oopsActual.Id;
            oopEst.AF_Unilever_Entity__c=entity2.Id;
            oopEst.AF_Estimate__c=55;
            insert oopEst;
            //Insert Bonus Summary
            AF_Bonus_Summary__c bonSum=new AF_Bonus_Summary__c();
            bonSum.AF_Agency__c=acc.Id;
            bonSum.AF_Brand__c=bran.Id;
            bonSum.AF_Fiscal_Year__c=currYear;   
            insert bonSum;
            //Insert Bonus Threshold
            AF_Bonus_Threshold__c bonThres=new AF_Bonus_Threshold__c();
            bonThres.Agency_Name__c=acc.Id;
            bonThres.AF_Brand_Estimate__c=brandEst.Id;
            bonThres.Brand_Name__c=bran.Id;
            bonThres.AF_Country__c=entity2.id;
            bonThres.Year__c=currYear;
            bonThres.AF_Traditional__c=true;
            bonThres.AF_Digital__c=true;    
            bonThres.AF_Minimum__c=170;
            bonThres.AF_Stretching__c=185; 
            insert bonThres;
            AF_Sub_Result__c subResult = new AF_Sub_Result__c();
            subResult.AF_Bonus_Threshold__c = bonThres.Id;
            //subResult.AF_Period__c = 'Q1';
            subResult.AF_Digital__c = false;
            subResult.AF_Traditional__c = true;
            subResult.AF_country__c = entity2.id;
            subResult.AF_Quant__c = 12;
            subResult.AF_Minimum__c = 1;
            subResult.AF_Outstanding__c = 3;
            subResult.AF_Stretching__c = 2;
            subResult.Bonus_Measure__c = 'BM1';
            insert subResult;
            AF_Sub_Result__c subResult1 = new AF_Sub_Result__c();
            subResult1.AF_Bonus_Threshold__c = bonThres.Id;
            //subResult.AF_Period__c = 'Q1';
            subResult1.AF_Digital__c = false;
            subResult1.AF_Traditional__c = true;
            subResult1.AF_country__c = entity2.id;
            subResult1.AF_Quant__c = 12;
            subResult1.AF_Minimum__c = 5;
            subResult1.AF_Outstanding__c = 7;
            subResult1.AF_Stretching__c = 6;
            subResult.Bonus_Measure__c = 'BM1';
            insert subResult1;
            //Insert Bonus Results 
            RecordType bonResRT = [select id,Name from RecordType where SobjectType='AF_Bonus_Results__c' and Name='Bonus Quarterly' Limit 1]; 
            AF_Bonus_Results__c bonRes=new AF_Bonus_Results__c();
            bonRes.AF_Bonus_Thresholds__c=bonThres.Id;
            bonRes.RecordTypeId=bonResRt.Id;
            //bonRes.AF_Total_Bonus_Value__c=23;
            //bonRes.AF_Quant_Bonus__c=13;
            //bonRes.AF_Quant_Bonus_Value__c=156;
            // bonRes.AF_Quant__c=180;
            //bonRes.AF_Status__c='Draft';
            insert bonRes;    
            ApexPages.currentPage().getParameters().put('Brandid',bran.id);
            ApexPages.currentPage().getParameters().put('Agencyid',acc.id);
            ApexPages.currentPage().getParameters().put('Year',currYear);
            AF_BonusQuarterly bonQuart1=new AF_BonusQuarterly();
            bonQuart1.ConfirmBonus();
            //bonQuart1.UpdateBonus();
        }
    }
}