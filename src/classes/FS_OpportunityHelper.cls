/**********************************************************************
Purpose: Helper class for OpportunityTrigger.
History :
VERSION  AUTHOR         DATE          DETAIL Description
1.0     Accenture     04/April/2016     Created
25/May/2016       Updated handleOpportunityPackage
01/July/2016      Updated for account planning
***********************************************************************/

public with sharing class FS_OpportunityHelper {
    Private static final string STATUS_WON='05 â€“ Won';
    Private static final string STATUS_CLOSED_WON='Closed Won';
    Private static final string STATUS_CLOSED_LOST='Closed Lost';
    Private static final string ERROR_MESSAGE='The following exception has occurred: ';
    Private static final string FOOD_SOLUTION='Food Solution';
    Private static final string CLASS_NAME='FS_OpportunityHelper';
    
/* * Method rollUpOpportunityLineItem to update Opportunity with Opp Line Item Value (Gross Profit and Market Target)
*  @name rollUpOpportunityLineItem
*  @param List<Opportunity> listNewTrigger
*  @return 
*  @throws
*/    
    public void rollUpOpportunityLineItem(List<Opportunity> listNewTrigger){ 
        if(FS_Utility.runOnceOppProduct()){ //To avoid recurson in trigger used static variable NAFS_Utility.runOnce
            List<Id> listOppId = new List<Id>();
            List<String> listPriceBook= new List<String>();
            List<OpportunityLineItem> OppLineItem = new List<OpportunityLineItem>();
            List<Opportunity> oppToUpdate = new List<Opportunity>();
            Map<Id,Decimal> mapOppIdGP= new Map<Id,Decimal>();
            Map<Id,Decimal> mapOppIdMT= new Map<Id,Decimal>();
            Decimal grossProfit = 0;
            Decimal marketTarget = 0;
            Integer recordCount = 0;
            Decimal averageGrossProfit =0;
            Decimal averageMarketTarget =0;
            
            for(Opportunity opp : listNewTrigger){
                listPriceBook.add(opp.pricebook2id);
                listOppId.add(opp.Id);
            }
            
            if(!listOppId.isEmpty()){    
                OppLineItem = [select Id, GPPercent__c, FS_MarketTarget__c, opportunityId from OpportunityLineItem where opportunityId in :listOppId];
            }
            //Calculate average grossProfit and MarketTarget of all opp prod
            For(Opportunity opp : listNewTrigger){
                For(OpportunityLineItem oli: OppLineItem ){
                    if(opp.id == oli.opportunityId){
                        if(oli.GPPercent__c!= null){
                            grossProfit = grossProfit + oli.GPPercent__c;
                        } 
                        if(oli.FS_MarketTarget__c!= null){   
                            marketTarget = marketTarget + oli.FS_MarketTarget__c;
                        }    
                        recordCount = recordCount + 1;
                    } 
                } 
                if(recordCount>0){
                    averageGrossProfit = grossProfit/recordCount;
                    averageMarketTarget = marketTarget/recordCount;
                    mapOppIdGP.put(opp.Id,averageGrossProfit);
                    mapOppIdMT.put(opp.Id,averageMarketTarget);
                    recordCount = 0;//resetting the variables
                    GrossProfit = 0;
                    MarketTarget= 0;
                }         
            } 
            List<Opportunity> oppList = [Select Id, FS_AverageGrossProfit__c, FS_MarketTarget__c from Opportunity where Id in :listOppId];
            for(Opportunity opp : oppList){
                if(mapOppIdGP.get(opp.Id)!=null){
                    opp.FS_AverageGrossProfit__c= mapOppIdGP.get(opp.Id);
                    opp.FS_MarketTarget__c= mapOppIdMT.get(opp.Id);
                    oppToUpdate.add(opp);
                }    
            }
            try{
                if(!oppToUpdate.isEmpty()){
                    update oppToUpdate;
                }
            }
            Catch(DmlException e){
                System.debug( ERROR_MESSAGE +e.getMessage() );
                ExceptionLoggingHelper.createErrorLog(userInfo.getUserId(),CLASS_NAME,'UpdateOppField', e.getMessage(), e, null, null, null, 0,FOOD_SOLUTION);
            }
        }
    }
    /* * Method rollUptoAccountPlan to update rollup fields on account plan
*  @name rollUptoAccountPlan
*  @param List<Opportunity> listNewTrigger2
*  @return 
*  @throws 
*/
    //Purpose: To update Account Plan object to roll up Opportunity 
    public void rollUptoAccountPlan(List<Opportunity> listNewTrigger2){ 
        if(FS_Utility.runaccPlanOnce()){
            Integer opportunity_Gain = 0;
            Integer opportunity_Potential=0;
            Integer record_Count;
            List<Id> listAccPlanId = new List<Id>();         
            List<FS_Account_Plan__c> accPlanToUpdate = new List<FS_Account_Plan__C>();         
            for(Opportunity opp : listNewTrigger2){
                if(opp.Account_Plan__c !=null){
                    listAccPlanId.add(opp.Account_Plan__c);
                }
            }
            //Get Accoun Plan deatils where associated opportunities that have been modified        
            Map<Id,List<Opportunity>> mapAccPlanOpportunity=New Map<Id,List<Opportunity>>();
            List<Opportunity> tempOppList=new List<Opportunity>();
            for(Opportunity opp : [select id,name,StageName,Amount,Account_Plan__c from Opportunity where Account_Plan__c in :listAccPlanId]){
                tempOppList=new List<Opportunity>();
                If(mapAccPlanOpportunity.containsKey(opp.Account_Plan__c)){
                    tempOppList=mapAccPlanOpportunity.get(Opp.Account_Plan__c);
                }
                tempOppList.add(Opp);
                mapAccPlanOpportunity.put(Opp.Account_Plan__c, tempOppList);
            }
            //Roll up opportunity details up to account plan object
            for(FS_Account_Plan__c accPlan : [select id,name,FS_Opportunity_Gain__c,FS_No_of_Opportunities__c,FS_Opportunity_Amount__c from FS_Account_Plan__c where id in : listAccPlanId ])
            {
                opportunity_Gain=0;            
                opportunity_Potential=0;
                record_Count=0;
                tempOppList=new List<Opportunity>();
                tempOppList=mapAccPlanOpportunity.get(AccPlan.Id);           
                for(Opportunity opp : tempOppList)
                {
                    if(opp.amount !=null){
                        record_Count=record_Count+1;
                        //If opportunity stage is Won then add amount to Gain on account plan
                        if(opp.StageName.equals(STATUS_CLOSED_WON) || opp.StageName.equals(STATUS_WON)){
                            opportunity_Gain=opportunity_Gain+Integer.valueOf(opp.Amount);
                        }
                        //If opportunity stage is not eual to Closed as amount to potential on account plan
                        if(opp.StageName!='STATUS_CLOSED_LOST'){
                            opportunity_Potential=opportunity_Potential+Integer.valueOf(opp.Amount); 
                        }
                    }
                }
                //Update roll up fields on account plan object
                accPlan.FS_Opportunity_Gain__c=Opportunity_Gain;
                accPlan.FS_No_of_Opportunities__c=Record_Count;
                accPlan.FS_Opportunity_Amount__c=Opportunity_Potential;
                accPlanToUpdate.add(accPlan);            
            }
            try{
                if(!accPlanToUpdate.isEmpty()){
                    update(accPlanToUpdate);
                }
            }
            Catch(DmlException e){
                System.debug( ERROR_MESSAGE +e.getMessage() );
                ExceptionLoggingHelper.createErrorLog(userInfo.getUserId(),CLASS_NAME,'UpdateOppField', e.getMessage(), e, null, null, null, 0,FOOD_SOLUTION);
            }
            
        }
    }
    /* * Method rollUptoDefinedObjective to update roll up fields on defined objective record
*  @name rollUptoDefinedObjective
*  @param List<Opportunity> listNewTrigger2
*  @return 
*  @throws 
*/
    public void rollUptoDefinedObjective(List<Opportunity> listNewTrigger2){ 
        if(FS_Utility.runObjOnce()){
            List<Id> listObjId = new List<Id>();
            Integer gross_Amount;
            Integer record_Count;         
            List<FS_Defined_Objective__c> objToUpdate = new List<FS_Defined_Objective__c>();         
            for(Opportunity opp : listNewTrigger2){
                if(opp.Defined_Objective__c !=null){
                    listObjId.add(opp.Defined_Objective__c);
                }
            }
            //Get Accoun Plan deatils where associated opportunities have been modified        
            Map<Id,List<Opportunity>> mapObjOpportunity=New Map<Id,List<Opportunity>>();
            List<Opportunity> tempOppList=new List<Opportunity>();
            for(Opportunity Opp : [select id,name,StageName,Amount,Defined_Objective__c from Opportunity where defined_objective__C in :listObjId]){
                tempOppList=new List<Opportunity>();
                If(mapObjOpportunity.containsKey(Opp.Defined_Objective__c)){
                    tempOppList=mapObjOpportunity.get(Opp.Defined_Objective__c);
                }
                tempOppList.add(Opp);
                mapObjOpportunity.put(Opp.Defined_Objective__c, tempOppList);
            }
            //Roll up opportunity details up to account plan object        
            for(FS_Defined_Objective__c Obj : [select id,name,FS_No_of_Opportunities__c from FS_Defined_Objective__c where id in : listObjId] )
            {
                gross_Amount=0;
                record_Count=0;
                tempOppList=new List<Opportunity>();
                tempOppList=MapObjOpportunity.get(Obj.Id);
                //Update total no of opportunities on defined objective
                for(Opportunity opp : tempOppList){                
                    record_Count=record_Count+1;
                    If(opp.amount !=null && opp.StageName!=STATUS_CLOSED_LOST){
                        gross_Amount=gross_Amount+Integer.valueOf(opp.Amount);                  
                    }
                }            
                obj.FS_No_of_Opportunities__c=record_Count;
                obj.FS_Opportunity_Amount__c=gross_Amount;
                objToUpdate.add(obj);            
            }
            try{
                if(!ObjToUpdate.isEmpty()){
                    update ObjToUpdate;
                }
            }
            Catch(DmlException e){
                System.debug( ERROR_MESSAGE +e.getMessage() );
                ExceptionLoggingHelper.createErrorLog(userInfo.getUserId(),CLASS_NAME,'UpdateOppField', e.getMessage(), e, null, null, null, 0,FOOD_SOLUTION);
            }        
        }
    }
    /* * Method copyLineItemToExistingOpp for MABE process to copy line item ,create contract product
*  @name copyLineItemToExistingOpp
*  @param List<Opportunity> listNewTrigger,Map<id,Opportunity> OppOldMap
*  @return 
*  @throws 
*/
    public void copyLineItemToExistingOpp(List<Opportunity> listNewTrigger,Map<id,Opportunity> OppOldMap){ 
        //To avoid recurson in trigger used static variable NAFS_Utility.runOnce
        //if(FS_Utility.runOnce()){          
        
        List<Id> listAccountId= new List<Id>();          
        List<Opportunity> listNewOpportunity=new List<Opportunity>();//List of opportunities which marked as 'Closed Won'
        List<Opportunity> listExistingOpportunity=new List<Opportunity>();//List of Existing opportunities associated with closed New opportunities
        List<OpportunityLineItem> listExistingOppLineItem = new List<OpportunityLineItem>();//List of line items for existing opportunities          
        List<OpportunityLineItem> oppLineItemToInsert = new List<OpportunityLineItem>();//Opporutnity line item to be created for existing opportunties
        List<OpportunityLineItem> oppLineItemforExisting = new List<OpportunityLineItem>();//Temporary variable used in loop for each existing opportunity
        List<OpportunityLineItem> oppLineItemToUpdate = new List<OpportunityLineItem>();//Opportunity line items to be updated
        List<OpportunityLineItem> oppLineItemUpsert = new List<OpportunityLineItem>();//Opportunity line items that are updated   
        List<Contract_Product__c>  listNewContractProduct=new  List<Contract_Product__c>();          
        List<Contract_Product__c>  listContractProductInsert=new  List<Contract_Product__c>(); 
        List<Contract_Product__c>  listContractProductUpdate=new  List<Contract_Product__c>();
        List<Contract_Product__c> tempConProductList=new List<Contract_Product__c>();
        
        Set<Id> listPriceBookEntry=new Set<Id>();
        Set<Id> setContractId=new Set<Id>();          
        Set<Id> setoppLineItemUpsert=new Set<Id>();
        
        Map<Id,List<OpportunityLineItem>> mapRelatedOppLineItem=new Map<Id,List<OpportunityLineItem>>();
        Map<Id,OpportunityLineItem> mapListExistingOppLineItem=new Map<Id,OpportunityLineItem>(listExistingOppLineItem);
        Map<Id,List<OpportunityLineItem>> mapExistingOppLineItemOpportunity=new Map<Id,List<OpportunityLineItem>>();
        
        Integer total_Quantity;
        Integer total_Price;          
        Integer existing_Oli_Flag;
        Integer existing_Contract_Product_Flag;
        Id oliId;
        
        OpportunityLineItem oppLineItem=new OpportunityLineItem();
        List<OpportunityLineItem> tempOppLineItemList=new List<OpportunityLineItem>();
        List<FS_Contract_Product_Opportunity_Map__c> listNewCustomSetting=New List<FS_Contract_Product_Opportunity_Map__c>();
        //Get record type ids for Existing and MA-BE
        Id newRecordTypeId;
        Id existingRecordTypeId;
        try{              
            newRecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Opportunity with Pricing (MA-BE)').getRecordTypeId();
            existingRecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Existing').getRecordTypeId();                  
        }           
        Catch(DmlException e){
            System.debug( ERROR_MESSAGE +e.getMessage() );
            ExceptionLoggingHelper.createErrorLog(userInfo.getUserId(),CLASS_NAME,'MA-BE Process', e.getMessage(), e, null, null, null, 0,FOOD_SOLUTION);
        }     
        
        for(Opportunity opp : listNewTrigger){
            //Check if stage has been changed to Closed Won for New opportunities
            if(OppOldMap.get(opp.id).stagename!=opp.stagename && opp.StageName.equals(STATUS_WON) && opp.recordtypeid==newRecordTypeId && opp.ContractId!=Null){               
                listNewOpportunity.add(opp);//List of new opportunities which has been Won
                listAccountId.add(opp.AccountId);//List of accounts for Won opportunities
                setContractId.add(opp.ContractId);//List of contract for Won opportunities
            }             
        }        
        if(!listNewOpportunity.isEmpty()){            
            //Get list of oppotunities with Existing recordtype
            listExistingOpportunity=[select id,stagename,accountid,ContractId from Opportunity where recordtypeid=:existingRecordTypeId and accountid in :listAccountId];            
            //Get list of line items already exist for Opportunities with Existing recordtype
            listExistingOppLineItem = [select Id,opportunityId,Quantity,TotalPrice,PricebookentryId,Distributor__c,
                                       Product2Id,Opportunity.contractId,Contract_Product__c
                                       from OpportunityLineItem where opportunityId in : listExistingOpportunity];              
               
        //Create Map between New Closed Opportunity and corresponding line items
        
        For(OpportunityLineItem oli: [select Id,opportunityId,Quantity,TotalPrice,PricebookentryId,Distributor__c,UnitPrice,
                                      ListPrice,GrossProfit__c,FS_MarketTarget__c,Discount,FS_Sample__c,
                                      Product2Id,Product2.name,Opportunity.contractId,Pricebookentry.Product2Id,Contract_Product__c 
                                      from OpportunityLineItem where opportunityId in :listNewOpportunity]){
                                          
                                          tempOppLineItemList=new List<OpportunityLineItem>();
                                          if(mapRelatedOppLineItem.containskey(oli.Opportunity.contractId))
                                          {
                                              tempOppLineItemList=mapRelatedOppLineItem.get(oli.Opportunity.contractId);
                                          }               
                                          tempOppLineItemList.add(oli);
                                          mapRelatedOppLineItem.put(oli.Opportunity.contractId,tempOppLineItemList);
                                      }             
                
        //Create Map between Existing Opportunity and related line items which already exists
        
        For(OpportunityLineItem oli: [select Id,opportunityId,Quantity,TotalPrice,PricebookentryId,Distributor__c,
                                      Product2Id,Opportunity.contractId,Contract_Product__c
                                      from OpportunityLineItem where opportunityId in :ListExistingOpportunity]){                                          
                                          tempOppLineItemList=new List<OpportunityLineItem>();                                          
                                          if(mapExistingOppLineItemOpportunity.containskey(oli.Opportunity.contractId)){
                                              tempOppLineItemList=mapExistingOppLineItemOpportunity.get(oli.Opportunity.contractId);
                                          }               
                                          tempOppLineItemList.add(oli);                                          
                                          mapExistingOppLineItemOpportunity.put(oli.Opportunity.contractId,tempOppLineItemList);
                                      }
        
        //Open loop for each existing opportunity        
        For(Opportunity existingOpp : [select id,stagename,accountid,ContractId from Opportunity where recordtypeid=:existingRecordTypeId and contractid in :setContractId]){                                           
                                           oppLineItemforExisting = new List<OpportunityLineItem>();//Create new instance of line items which already exist for Existing opportunity
                                           tempOppLineItemList = new List<OpportunityLineItem>();//Create new instance for line items for Closed Opportunities with New recordtype
                                           ListPriceBookEntry=new Set<Id>();//Create new instance for pricebookentry for each Opportunity with existing record type             
                                           
                                           If(mapRelatedOppLineItem.containsKey(existingOpp.ContractId) && existingOpp.ContractId!=Null){
                                               
                                               tempOppLineItemList=mapRelatedOppLineItem.get(existingOpp.ContractId);//Get related line items for opportunity with New recordtype                                                
                                               
                                               For(OpportunityLineItem oli: tempOppLineItemList ){
                                                   
                                                   //Create list of opportunity line items to be created for existing opportunties
                                                   oppLineItemforExisting.add(new OpportunityLineItem(Opportunityid = existingOpp.Id,
                                                                                                      PricebookentryId =oli.PricebookentryId,quantity=oli.Quantity,
                                                                                                      totalPrice=oli.TotalPrice,Distributor__c=oli.Distributor__c,                                                                                                                                               
                                                                                                      Discount=oli.Discount,FS_Sample__c=oli.FS_Sample__c));
                                                   
                                                   //Create list of contract product to created on contract for current Existing opportunity
                                                   listNewContractProduct.add(new Contract_Product__c(contract__c=existingOpp.ContractId,Product__c=oli.Product2Id,name=String.valueof(oli.Product2.name)));
                                                   
                                                   //Create set for price book entry for the current Opportunity with Existing recordtype
                                                   listPriceBookEntry.add(oli.PricebookentryId);                      
                                               }//End of For loop for line item 
                                           }                                           
                                           system.debug(listNewContractProduct);
                                           //Open loop for each price book entry for which line items needs to be created on existing opportunity
                                           //If the line item already exists for Existing opportunity then update otherwise insert
                                           For(Id Pbe : listPriceBookEntry){
                                               total_Quantity=0;
                                               total_Price=0;
                                               existing_Oli_Flag=0;
                                               //Check line item already exists for corrsponding Opportunity with Existing record type
                                               If(mapExistingOppLineItemOpportunity.containsKey(existingOpp.ContractId))
                                               {                         
                                                   //Open loop for line items which already exist for current Existing Opportunity
                                                   for(OpportunityLineItem existingOli : mapExistingOppLineItemOpportunity.get(existingOpp.ContractId))
                                                   {
                                                       //Check if existing opportunity having line item for this price book entry
                                                       If(existingOli.pricebookentryid==pbe){                  
                                                           total_Quantity=Integer.Valueof(existingOli.Quantity);
                                                           total_Price=Integer.Valueof(existingOli.TotalPrice);    
                                                           existing_Oli_Flag=1;//Mark this flag if line item already exists
                                                           oliId=existingOli.id;//Store that line item                       
                                                       }
                                                   } 
                                               }
                                               //Open loop for all the new line items which need to be created for opportunity with Existing recordtype
                                               for(OpportunityLineItem oli : oppLineItemforExisting){                     
                                                   if(oli.pricebookentryid==Pbe){
                                                       total_Quantity=total_Quantity+Integer.Valueof(oli.Quantity);
                                                       total_Price=total_Price+Integer.Valueof(oli.TotalPrice);                            
                                                   }
                                               }                 
                                               if(existing_Oli_Flag==0){
                                                   //Preparing list for line item Insert
                                                   oppLineItemToInsert.add(new OpportunityLineItem(Opportunityid = existingOpp.Id,
                                                                                                   PriceBookEntryId=Pbe,quantity=total_Quantity,
                                                                                                   TotalPrice=total_Price));
                                                   setoppLineItemUpsert.add(existingOpp.Id);                                         
                                               }
                                               //Prepare list for line item update
                                               if(existing_Oli_Flag>0){
                                                   //Preparing list for update
                                                   oppLineItem=new OpportunityLineItem();
                                                   oppLineItem=mapListExistingOppLineItem.get(oliId);
                                                   oppLineItem.quantity=total_Quantity;
                                                   oppLineItem.TotalPrice=total_Price;
                                                   oppLineItemToUpdate.add(oppLineItem);                          
                                               }                   
                                           }//End loop for pricebookentry
                                       }//End loop for Existing opportunities          
        //***Creation of line item insert and update list for Existing opportunity is completed***//
        
        //***Start preparation of Contract product insert list***//        
        Map<Id,List<Contract_Product__c>> mapExistingContractConProd=new Map<Id,List<Contract_Product__c>>();
        List<Contract_Product__c> tempExistingConProductList=new List<Contract_Product__c>();
        
        //Prepare map for existing contract product for each contract
        for(Contract_Product__c newContractProduct : [select id,Contract__c,Product__c,Product__r.Name from Contract_Product__c where Contract__c in : SetContractId limit 49999])
        {
            tempExistingConProductList  = new List<Contract_Product__c>();
            if(mapExistingContractConProd.containskey(newContractProduct.Contract__c))
            {
                tempExistingConProductList   = mapExistingContractConProd.get(newContractProduct.Contract__c);
            }
            tempExistingConProductList.add(newContractProduct);
            mapExistingContractConProd.put(newContractProduct.Contract__c,tempExistingConProductList);            
        }        
        system.debug(listNewContractProduct);
        for(Contract_Product__c newContractProduct : listNewContractProduct)//Open loop for each contract product(prepared previously) which need to be created for contract
        {
            tempConProductList  = new List<Contract_Product__c>();
            existing_Contract_Product_Flag=0;
            
            if(mapExistingContractConProd.containskey(newContractProduct.Contract__c)){
                tempConProductList=mapExistingContractConProd.get(newContractProduct.Contract__c);//Get existing contract product                
                For(Contract_Product__c existingContractProduct : tempConProductList){
                    //Check if the contract product already exists
                    If(existingContractProduct.product__c==newContractProduct.product__c){
                        existing_Contract_Product_Flag=1;//Mark flag
                        listContractProductUpdate.add(existingContractProduct);
                        Break;
                    }                
                }
            }
            //Check if the contract product already exists or not
            if(existing_Contract_Product_Flag==0)
            {           
                //Contract product not exists
                listContractProductInsert.add(newContractProduct);
                tempConProductList  = new List<Contract_Product__c>();
                //Add this contract product to the map
                If(mapExistingContractConProd.containsKey(newContractProduct.Contract__c)){                        
                    tempConProductList = mapExistingContractConProd.get(newContractProduct.Contract__c);
                }
                tempConProductList.add(newContractProduct);
                mapExistingContractConProd.put(newContractProduct.Contract__c,tempConProductList);                    
            } 
        }        
        system.debug(listContractProductInsert);
        //Contract product insert list preparation completed        
        try{              
            if(!oppLineItemToInsert.isEmpty()){
                //Insert line items for opportunity with Existing record type
                insert oppLineItemToInsert;
            }
            if(!oppLineItemToUpdate.isEmpty()){
                //Update line items which already for existing opportunities
                update oppLineItemToUpdate;
            }
            If(!listContractProductInsert.isEmpty()){
                //Insert contract product
                insert listContractProductInsert;
            }                  
        }           
        Catch(DmlException e){
            System.debug( ERROR_MESSAGE +e.getMessage() );
            ExceptionLoggingHelper.createErrorLog(userInfo.getUserId(),CLASS_NAME,'MA-BE Process', e.getMessage(), e, null, null, null, 0,FOOD_SOLUTION);
        } 
        
        //**Contract product has to be mapped on opportunity line items which has just been created for existing Opportunity**//        
        //Fetch list of line items which have been copied to opportunity with Existing record type
        oppLineItemUpsert=[select Id,opportunityId,Quantity,TotalPrice,PricebookentryId,
                           Distributor__c,UnitPrice,ListPrice,GrossProfit__c,FS_MarketTarget__c,
                           Discount,FS_Sample__c,Product2Id,Product2.name,Opportunity.contractId,Pricebookentry.Product2Id,Contract_Product__c
                           from OpportunityLineItem where opportunityId in : setoppLineItemUpsert];        
        
        Map<Id,List<Contract_Product__c>> mapContractConProd=new Map<Id,List<Contract_Product__c>>();       
        //Prepare map for contract products for each contract
        //Open loop for each contract product which have just been created
        List<Contract_Product__c> listcontractProduct=[select id,Contract__c,Product__c,Product__r.Name from Contract_Product__c where Contract__c in : SetContractId];
        system.debug(listcontractProduct);
        for(Contract_Product__c newContractProduct : [select id,Contract__c,Product__c,Product__r.Name from Contract_Product__c where Contract__c in : SetContractId])
        {            
            tempConProductList  = new List<Contract_Product__c>();            
            if(mapContractConProd.containskey(newContractProduct.Contract__c))
            {
                tempConProductList=mapContractConProd.get(newContractProduct.Contract__c);
            }
            tempConProductList.add(newContractProduct);
            mapContractConProd.put(newContractProduct.Contract__c,tempConProductList);          
        }
        oppLineItemToUpdate=new List<OpportunityLineItem>();        
        //Open loop for each line item which has just been created to map contract product
        For(opportunityLineItem oli: oppLineItemUpsert){            
            If(oli.Contract_Product__c==null){
                tempConProductList=new List<Contract_Product__c>();
                If(mapContractConProd.containsKey(oli.Opportunity.contractId)){
                tempConProductList=mapContractConProd.get(oli.Opportunity.contractId); //Get relevant contract product list
                //Open loop for each contract product for associated contract
                For(Contract_Product__c newContractProduct : tempConProductList){                    
                    IF(oli.Pricebookentry.Product2Id==newContractProduct.Product__c){
                        oli.Contract_Product__c=newContractProduct.Id;
                        oppLineItemToUpdate.add(oli);                    
                        //Break;
                    }                
                }   
                }                                          
            }//End if for contract product on oli        
        }        
        //**End of preparation of line item update to look up on contract product**//        
        //**Create custom settings for monthly claimed case calculation**//               
        For(Contract_Product__c ConProd : ListContractProductUpdate){
            tempOppLineItemList=new List<OpportunityLineItem>();
            tempOppLineItemList=MapRelatedOppLineItem.get(ConProd.Contract__c);  
            For(OpportunityLineItem Oli : tempOppLineItemList){
                If(Oli.Product2Id==ConProd.Product__c){              
                    listNewCustomsetting.add(New FS_Contract_Product_Opportunity_Map__c(Name=String.valueof(ConProd.Id),FS_Contract_Product__c=ConProd.Id,FS_Opportunity__c=OLi.OpportunityId));
                }
            }
        }        
        //**Custom settings data has been prepared**//        
        try{              
            If(!oppLineItemToUpdate.isEmpty()){
                //Update line items to look up on contract product
                update oppLineItemToUpdate;
            }
            If(!listNewCustomSetting.isEmpty()){
                //Insert custom settings for monthly claim case calculation
                Insert listNewCustomSetting;                 
            }
            If(!listContractProductUpdate.isEmpty()){
                //Update contract product which already exists but monthly claim cases need to be re calculated
                Update listContractProductUpdate;                
            }            
        }
        Catch(DmlException e){
            System.debug( ERROR_MESSAGE +e.getMessage() );
            ExceptionLoggingHelper.createErrorLog(userInfo.getUserId(),CLASS_NAME,'MA-BE Process', e.getMessage(), e, null, null, null, 0,FOOD_SOLUTION);
        }
    }
    }
    public void validateOpportunity(List<Opportunity> listOpp){
        List<Opportunity> existingOppId = new List<Opportunity>();
        List<Id> listAccId = new List<Id>();
        List<Id> listConId = new list<Id>();
        Map<Id,Opportunity> mapAccOpp= new Map<Id,Opportunity>();
        Id oppRecordTypeId = Schema.SObjectType.Opportunity.getRecordTypeInfosByName().get('Existing').getRecordTypeId();
        for(Opportunity opp: listOpp){
            if(opp.RecordTypeId==oppRecordTypeId){
                listAccId.add(opp.AccountId);
                listConId.add(opp.ContractId);
                mapAccOpp.put(opp.AccountId, opp);
            }
        }
        if(listAccId.size()>0){
            existingOppId = [Select ID, AccountId from Opportunity where RecordTypeId =: oppRecordTypeId and AccountId =: listAccId and ContractId =: listConId];
            for(Opportunity opp :existingOppId){
                if(mapAccOpp.get(opp.AccountId) != null){
                    mapAccOpp.get(opp.AccountId).addError('Only one Existing type of Opportunity allowed for the same Account and Contract');
                }
            }            
        }
    }
}