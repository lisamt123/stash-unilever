/*****************************************************************************************************************************
@Author :Cognizant
@name : Test_AF_OOPSRecordManager
@Created Date : 08/08/2014.
@Description : This Test class for  AF_OOPSRecordManager  apex class.
@Version : 1.0
@reference : none
****************************************************************************************************************************/
@isTest(SeeAlldata=false)
public class Test_AF_OOPSRecordManager
{    
	Static Integer IcurrYear = System.Today().year();
	Static string currYear=string.valueof(IcurrYear);
	/**********************************************************************
*  @Description: This method will have Test data.
*  @name : oopsRecordManager
*  @param : none
*  @return : none
*************************************************************************/ 
	Static testMethod void oopsRecordManager()
	{
		Test.startTest();
		Profile p=[Select Id from Profile where Name='System Administrator'];       
		//Insert User 
		User u= new User(Alias = 'testm', Email='standarduserm@unilever.com', 
		EmailEncodingKey='UTF-8', LastName='Test Userm', LanguageLocaleKey='en_US', 
		LocaleSidKey='en_US', ProfileId = p.Id, 
		TimeZoneSidKey='Europe/London',AF_Agency_Fees_User_Type__c='Category Finance',isActive=true, 
		UserName='testuserm@test123321.com',AF_Brand__c='Test Brandm',AF_Category__c='Test Beveragesm');
		insert u;        
		System.runAs(u)
		{ 
			//Insert Account
			Account acc=new Account();
			acc.Name='Test Agencym';
			acc.published__c=true;
			insert acc;
			System.Assert(acc.Id != null, 'The account record not inserted');
			//Insert Category
			RecordType catRT = [select id,Name from RecordType where SobjectType='AF_Category_Brand__c' and Name='Category' Limit 1];
			AF_Category_Brand__c cat=new AF_Category_Brand__c();
			cat.RecordTypeId=catRT.Id;
			cat.Name='Test Beveragesm';
			cat.AF_Pilot_Model__c=false;     
			cat.AF_Super_category__c='Drinks';
			insert cat;
			System.Assert(cat.Id != null, 'The Category record not inserted');
			//Insert Brand
			RecordType brandRT = [select id,Name from RecordType where SobjectType='AF_Category_Brand__c' and Name='Brand' Limit 1];
			AF_Category_Brand__c bran=new AF_Category_Brand__c();
			bran.RecordTypeId=brandRT.Id;
			bran.AF_Pilot_Model__c=false;    
			bran.Name='Test Brandm';
			bran.AF_Category_Brands__c=cat.Id;
			insert bran;
			System.assertEquals(bran.AF_Category_Brands__c, cat.Id);
			//Insert Brand Estimate                  
			AF_Brand_Estimate__c brandEst=new AF_Brand_Estimate__c();
			brandEst.AF_Agency__c=acc.Id;               
			brandEst.Name='Test BrandEstimatem';
			brandEst.AF_Status_Base_Fees__c='Ready for PO';  
			brandEst.AF_Fiscal_Year__c='2013';
			brandEst.AF_Active__c = true;
			brandEst.AF_Copied__c= false;
			brandEst.AF_Locked__c = false;  
			brandEst.Brand__c=bran.id;
			brandEst.AF_AgencyUsers1__c=u.Email;
			insert brandEst;
			System.assertEquals(brandEst.Brand__c, bran.id);
			AF_OOPS_Settings__c custRecord = new AF_OOPS_Settings__c();
			custRecord.Overall_Percentage__c = 5;
			insert custRecord;
			Set<Id> brandEstSet=new Set<Id>();
			brandEstSet.add(brandEst.Id);
			AF_Brand_Estimate__c brandEst1=new AF_Brand_Estimate__c();
			brandEst1.AF_Agency__c=acc.Id;               
			brandEst1.Name='Test BrandEstimatem1';
			brandEst1.AF_Status_Base_Fees__c='Initiate';  
			brandEst1.Brand__c=bran.id;
			brandEst1.AF_Basefee_Estimate_Initial_Quarter__c='Q4';
			insert brandEst1;     
			System.assertEquals(brandEst1.Brand__c, bran.id);
			brandEstSet.add(brandEst1.Id);
			//Insert OOPS Actual
			/*AF_OOPS_Actual__c oopsActual=new AF_OOPS_Actual__c();
	oopsActual.AF_Agency_lk__c=acc.Id;     
	oopsActual.AF_Agency__c=acc.Id;
	oopsActual.AF_BrandEstimateId__c=brandEst.id;
	oopsActual.AF_Brand__c=bran.Id;
	oopsActual.AF_Fiscal_year__c='2013';
	insert oopsActual;  */ 
			AF_Currency__c curr = new AF_Currency__c();
			curr.AF_Country__c = 'Ecuador';
			curr.AF_Currency_Code__c = 'USD';
			curr.Country_Currency__c = 'Eucador-USD';
			curr.AF_Fiscal_Year_new__c = currYear ;
			curr.Currency_Unit__c = 'US $';
			curr.AF_Fiscal_Year__c = system.today();
			curr.AF_Average_Exchange_Rate_To_EUR__c = 1.3253;
			curr.Ready_For_PO_Exchange_Rate_SGD_To_USD__c=1.0000;
			curr.Ready_For_PO_Exchange_Rate_To_EUR__c = 1.6112;
			insert curr;
			//Insert Agency Entity
			RecordType entiRT1 = [select id,Name from RecordType where SobjectType='AF_Entity__c' and Name='Agency Entity' Limit 1];       
			AF_Entity__c entity1=new AF_Entity__c();
			entity1.Name='Test Entitym';        
			entity1.AF_Agency__c=acc.Id;
			entity1.AF_Country__c='Australia';
			entity1.RecordTypeId=entiRT1.Id;         
			insert entity1;
			//Insert Unilever Entity
			RecordType entiRT2 = [select id,Name from RecordType where SobjectType='AF_Entity__c' and Name='Unilever Entity' Limit 1];       
			AF_Entity__c entity2=new AF_Entity__c();
			entity2.Name='Test Unilever Entitym';        
			entity2.RecordTypeId=entiRT2.Id;         
			insert entity2; 
			//Insert Agency Estimate 
			AF_Agency_Estimate__c agency=new AF_Agency_Estimate__c();
			agency.AF_Brand_Estimate__c=brandEst.Id;
			agency.AF_Agency_Entity__c=entity1.id;
			agency.AF_Unilever_Entity__c=entity2.Id;  
			agency.AF_Fiscal_Year__c='2013';
			agency.AF_Adaptation__c=22;
			agency.AF_Digital__c=22;
			agency.AF_Traditional__c=22; 
			agency.AF_Status__c='With Agency';
			insert agency;
			//Insert OOPS Estimate
			/*AF_OOPS_Estimate__c oopEst=new AF_OOPS_Estimate__c();
	oopEst.AF_Agency_Entity__c=entity1.Id;
	oopEst.AF_Brand_Estimate__c=brandEst.id;
	oopEst.AF_OOPS_Actual__c=oopsActual.Id;
	oopEst.AF_Unilever_Entity__c=entity2.Id;
	oopEst.AF_Estimate__c=55;
	insert oopEst;*/
			//Instantiate AF_OOPSRecordManager Class
			AF_OOPSRecordManager oopsRecMan=new AF_OOPSRecordManager();
			AF_OOPSRecordManager oopsRecMan1=new AF_OOPSRecordManager(brandEst);
			AF_OOPSRecordManager oopsRecMan2=new AF_OOPSRecordManager(brandEstSet);
			oopsRecMan2.CreateOOPSEstimateRecordsByCollection();
			oopsRecMan2.RecalculateOOPSEstimates();
			oopsRecMan2.DeleteOOPSActualRecordsByCollection();
			Test.stopTest();
		}
	}  
}