/******************************************************************************************************************************
* @author Cognizant 
* @date 15/12/2014
* @description Test Class for Gate Document Controller
*/
@isTest
public class IPM_GateDocumentController_Test{    
    public static IPM_Project__c project;// Project object initialization
    public static IPM_Project_Document__c projDoc;
    public static List<IPM_Project_Document__c> projDocList=new List<IPM_Project_Document__c>();
    private static List<IPM_Project__c>projectList=new list<IPM_Project__c>();
    public static List<SelectOption> secOpt=new List<SelectOption>();
    private static final string PROJECT_DOC_CREATED_STR='Project Document created';
    public static PageReference  pRef;
    public static IPM_GateDocumentController ipmGateDocContrl;
    private static final string TEST_COMMENTS_STR='TestComments1';
    private static final string TEST_MSG_STR='function executed';
    public static List<IPM_Project__c>projectListObj=new List<IPM_Project__c>();
    public static List<IPM_Project__c> projlList=new List<IPM_Project__c>();
    public static List<IPM_Project_Document_Section__c>projectDocSecListObj=new List<IPM_Project_Document_Section__c>();
    public static User globalUser;
    public static List<IPM_Questionnaire__c> quesList;
    public static IPM_ProjectIntermediateController interCon;
    public static IPM_Project_Document_Section__c docSec;
    public static IPM_Project_Document__c document;
    public static User stdUserForGateDocument;
   /*************************************************************************************************************************
    * @description Test Data
    */
    @testSetup static void initializeData(){
          System.runAs(IPM_TestFactory_Helper.createUserAdmin(true))
        {
            // user has to be created as system admin 
            stdUserForGateDocument= IPM_TestFactory_Helper.createIPMPlatformProfileUser('');
        }       
        
        List<User>userLists=[SELECT id FROM user WHERE id=:stdUserForGateDocument.id LIMIT 1];
        System.AssertEquals(userLists[0].id, stdUserForGateDocument.id,'user id is:'+userLists[0].id);//positive test
        
        // Create Company Card information 
        IPM_Company_Card__c globalCompanyCard = IPM_TestFactory_Helper.createGlobalCompanyCard(false);
        IPM_Company_Card__c regionalCompanyCard = IPM_TestFactory_Helper.createRegionalCompanyCard(false);
        IPM_Company_Card__c localCompanyCard = IPM_TestFactory_Helper.createLocalCompanyCard(false);
        
        List<IPM_Company_Card__c> companyCardList = new List<IPM_Company_Card__c>{globalCompanyCard,regionalCompanyCard,localCompanyCard};
        insert companyCardList;
        List<IPM_Company_Card__c>comList=[select Id from IPM_Company_Card__c where Id=:companyCardList[0].Id limit 1];
        System.assertEquals(comList[0].Id,companyCardList[0].Id,'company card inserted');
        
        IPM_TestFactory_Helper.getProjectMasterData();
        projectList = IPM_TestFactory_Helper.projectSetUp(1,stdUserForGateDocument);
        System.runAs(stdUserForGateDocument) {
            insert projectList;
            
            project=projectList[0];
            List<IPM_Project__c> projlList1=[SELECT ID,Name,IPM_Phase__c,IPM_Complexity__c,IPM_GateKeeping_Model__c FROM IPM_Project__c WHERE ID=:project.ID LIMIT 1];
            System.assertEquals(projlList1[0].Name,TEST_COMMENTS_STR,'project name');//positive test
        }
    }
    
    /*************************************************************************************************************************
    * @description Test Data to set up the project related data
    */
    @testSetup static void initializeTestMethodData(){
        
        Set<String> projectNameSet = new Set<String>{TEST_COMMENTS_STR};
        globalUser = [Select Id,LastName from User where LastName='PLATFORM_USER' limit 1];  
        system.runAs(globalUser){
            projectListObj = [Select Id, Name, (Select Id,IPM_GateDocuments__c from Project_Documents__r),(Select Id from IPM_Financials_Consolidated__r ),
            (Select Id,Name,IPM_Task_Complexity__c from Tasks__r),(Select Id,Name from IPM_Milestones__r),(select ID,IPM_Project__c from IPM_Questionnaires__r)
            from IPM_Project__c where Name in:projectNameSet];
            project=projectListObj[0];
            projlList=[SELECT ID,Name,IPM_Phase__c,IPM_Complexity__c,IPM_GateKeeping_Model__c FROM IPM_Project__c WHERE ID=:projectListObj[0].ID LIMIT 1];
            System.assertEquals(projlList[0].id,project.id);//positive test
            for(IPM_Project__c projectObj : projectListObj) {
                projDocList = projectObj.Project_Documents__r;
                quesList=projectObj.IPM_Questionnaires__r;
                System.assertEquals(projDocList[0].IPM_GateDocuments__c,IPM_ConstantUtils.CHARTER_GATE,PROJECT_DOC_CREATED_STR);
            }
            document=projDocList[0];
            projectDocSecListObj = [Select Id,IPM_Section_Name__c,IPM_Section_Sequence__c,IPM_Project_Document__c from IPM_Project_Document_Section__c 
            where IPM_Project_Document__c=:projDocList[0].Id];
            system.assertEquals(projectDocSecListObj[0].IPM_Project_Document__c,projDocList[0].Id);
            docSec=projectDocSecListObj[0];
            pRef = Page.IPM_GateDocument;
            pRef.getParameters().put(IPM_ConstantUtils.SF_ID, projectListObj[0].Id);
            Test.setCurrentPage(pRef);
            interCon=new IPM_ProjectIntermediateController ();
            interCon.project.Id=projectListObj[0].Id;
            
        }
    }

    
    
    /*************************************************************************************************************************
* @description Running Test Script To test the Constructor
*/ 
    static testMethod void getProjectDocumentTest(){
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
         ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.DueDateMsg=false;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Phase__c=IPM_ConstantUtils.PHASE_FEASIBILITY;
            ipmGateDocContrl.project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_GCLT;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_RCLT;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Project_Type__c=IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_GateKeeping_Model__c=IPM_ConstantUtils.GATEKEEPING_MODEL_BOTH;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Phase__c=IPM_ConstantUtils.PHASE_CAPABILITY;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Phase__c=IPM_ConstantUtils.MARKET_READY_GATE;
            ipmGateDocContrl.project.IPMProject_Span__c=IPM_ConstantUtils.PROJECT_SPAN_REGIONAL;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPMProject_Span__c=IPM_ConstantUtils.PROJECT_SPAN_LOCAL;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Phase__c=IPM_ConstantUtils.MARKET_DEPLOYMENT_GATE;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Phase__c=IPM_ConstantUtils.PHASE_PLE;
            ipmGateDocContrl.getProjectDocument();
            ipmGateDocContrl.project.IPM_Phase__c=IPM_ConstantUtils.PHASE_IDEAS;
            ipmGateDocContrl.getProjectDocument();
            List<IPM_Project_Document__c> lstProjectDoc=[SELECT Id,IPM_Contract_GateKeeper_Model__c,IPM_Project_Template__r.IPM_Template_Complexity__c,IPM_Document_Status__c,LastModifiedDate,IPM_Postponement_Date__c,
            IPM_Approval_Date__c,LastModifiedBy.smallPhotoURL,IPM_Approved_Comments__c,IPM_Postponed_Comments__c,LastModifiedBy.Name,IPM_GateDocuments__c 
            FROM IPM_Project_Document__c 
            WHERE IPM_Project__c=:project.Id and IPM_GateDocuments__c=:ipmGateDocContrl.gateDocument];
            System.assertEquals(lstProjectDoc[0].IPM_GateDocuments__c,ipmGateDocContrl.gateDocument,'gate doc matched');
            test.stopTest();
        }
    }
    
    
    /*************************************************************************************************************************
* @description Running Test Script to test the Filter Sections
*/ 
    static testMethod void filterSectionsTest(){   
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
            ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.appendixCCId='abc';
            ipmGateDocContrl.proDocSectionListForAppendix=projectDocSecListObj;
            ipmGateDocContrl.getIpmuserType();
            ipmGateDocContrl.IsTypeAll=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsTypeAll=false;
            ipmGateDocContrl.IsNegotiable=true;
            ipmGateDocContrl.Isoptional=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsStatusAll=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsStatusAll=false;
            ipmGateDocContrl.IsNotstarted=true;
            ipmGateDocContrl.IsFilledIn=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsRoleAll=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsRoleAll=false;
            ipmGateDocContrl.IsBD=true;
            ipmGateDocContrl.IsCMI=true;
            ipmGateDocContrl.IsCD=true;
            ipmGateDocContrl.IsRnD=true;
            ipmGateDocContrl.IsSC=true;
            ipmGateDocContrl.IsFinance=true;
            ipmGateDocContrl.IsBB=true;
            ipmGateDocContrl.IsPL=true;
            ipmGateDocContrl.filterSections();
            System.assertEquals(ipmGateDocContrl.IsFilledIn,false,'value reset through func call');
            ipmGateDocContrl.IsCMI=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsCD=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsRnD=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsSC=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsFinance=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsBB=true;
            ipmGateDocContrl.filterSections();
            ipmGateDocContrl.IsPL=true;
            ipmGateDocContrl.filterSections();
            System.assertEquals(ipmGateDocContrl.IsFilledIn,false,'value reset through func call');
            test.stopTest();
        }
    }  
    
    
    /*************************************************************************************************************************
* @description Running to set the filter sections set from the UI
*/ 
    static testMethod void setFilterTest(){
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
        ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.typeFilters=IPM_ConstantUtils.TYPE_ALL+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.TYPE_NON_NEGOTIABLE+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.TYPE_OPTIONAL;
            ipmGateDocContrl.statusFilters=IPM_ConstantUtils.STATUS_ALL+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.STATUS_NOT_STARTED+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.SECTION_STATUS_FILLED;
            ipmGateDocContrl.roleFilters=IPM_ConstantUtils.FUNCTIONAL_ROLE_ALL+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.FUNCTIONAL_ROLE_BD+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.FUNCTIONAL_ROLE_CMI+IPM_ConstantUtils.COMMA +
            IPM_ConstantUtils.FUNCTIONAL_ROLE_CD+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.FUNCTIONAL_ROLE_RD+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.FUNCTIONAL_ROLE_Finance+IPM_ConstantUtils.COMMA +
            IPM_ConstantUtils.FUNCTIONAL_ROLE_BB+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.FUNCTIONAL_ROLE_SC+IPM_ConstantUtils.COMMA +IPM_ConstantUtils.FUNCTIONAL_ROLE_PL;
            ipmGateDocContrl.setFilter();
            System.assertEquals(ipmGateDocContrl.IsPL,false,'value reset');
            test.stopTest();
        }
    }  
    
    
    /*************************************************************************************************************************
* @description Running Test Script to check the Documet Sections are fetched
*/ 
    static testMethod void getProjectDocumentSectionTest(){
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
        ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.projectDoc.Id=projDocList[0].Id;
            ipmGateDocContrl.getDocumentSectionMap();
            ipmGateDocContrl.getProjectDocumentSection();
            List<IPM_Project_Document_Section__c>projSubSectionList=[SELECT Id,IPM_Section__c,IPM_Negotiable__c ,IPM_Default_Section__c, IPM_Section_Sequence__c, 
            IPM_Section__r.IPM_Section_Type__c,IPM_Section__r.IPM_Section_Label_Type__c,IPM_Section__r.IPM_Section_Name__c,Name,
            IPM_Section__r.IPM_Parent_Section__c,IPM_Section__r.IPM_Parent_Section__r.IPM_Section_Name__c,IPM_Project_Document__c,
            IPM_Section_Status__c,IPM_Section__r.IPM_Section_Sequence__c,IPM_Count_of_Comments__c,IPM_FunctionalRole__c,IPM_Has_Appendix__c,
            IPM_GateHistory__c,IPM_GateHistory_Date__c,IPM_Gate_Document_Summary__c,LastModifiedBy.Name,LastModifiedDate,IPM_Master_Section_External_Id__c 
            FROM IPM_Project_Document_Section__c 
            WHERE IPM_Project_Document__c=:ipmGateDocContrl.projectDoc.Id AND IPM_Section__r.IPM_Parent_Section__c =:ipmGateDocContrl.parentSectionId AND IPM_Default_Section__c=true  order by IPM_Section__r.IPM_Section_Sequence__c asc limit 50000];                  
            System.assert(projSubSectionList[0].IPM_Default_Section__c,'project section is not empty');
            test.stopTest();
        }
    }


    /*************************************************************************************************************************
* @description Running Test Script to Reset the Filters
*/ 
    static testMethod void resetFiltersTest(){initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();  
        ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.exportToPdf();
            ipmGateDocContrl.moveToPLE();
            ipmGateDocContrl.ResetFilters();
            System.assert(ipmGateDocContrl.IsTypeAll,'value reset');
            test.stopTest();
        }
    }
    
    /*************************************************************************************************************************
* @description Running Test Script to get the Dynamic sections based on Refactor
*/ 
    static testMethod void getDynamicSectionTest(){
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
           ipmGateDocContrl=new IPM_GateDocumentController ();
            ipmGateDocContrl.moveToNextDocument();
            ipmGateDocContrl.projectDoc.Id=projDocList[0].Id;
            ipmGateDocContrl.getDynamicSection();
            List<IPM_Project_Document_Section__c>projSubLevelSectionList=[SELECT Id,IPM_Section__c,IPM_Negotiable__c ,IPM_Default_Section__c, IPM_Section_Sequence__c, 
            IPM_Section__r.IPM_Section_Type__c,IPM_Section__r.IPM_Section_Label_Type__c,IPM_Section__r.IPM_Section_Name__c,Name,
            IPM_Section__r.IPM_Parent_Section__c,IPM_Section__r.IPM_Parent_Section__r.IPM_Section_Name__c,IPM_Project_Document__c,
            IPM_Section_Status__c,IPM_Section__r.IPM_Section_Sequence__c,IPM_Count_of_Comments__c,IPM_FunctionalRole__c,IPM_Has_Appendix__c,
            IPM_GateHistory__c,IPM_GateHistory_Date__c,IPM_Gate_Document_Summary__c,LastModifiedBy.Name,LastModifiedDate,IPM_Master_Section_External_Id__c 
            FROM IPM_Project_Document_Section__c 
            WHERE IPM_Project_Document__c=:ipmGateDocContrl.projectDoc.Id AND IPM_Section__r.IPM_Parent_Section__r.ID=:ipmGateDocContrl.parentSectionId AND IPM_Default_Section__c=true  order by IPM_Section__r.IPM_Section_Sequence__c asc limit 50000];
            System.assert(projSubLevelSectionList[0].IPM_Default_Section__c,TEST_MSG_STR);
            test.stopTest();
        }
    }
    /*************************************************************************************************************************
* @description Running Test Script to get the 2nd level sections
*/ 
    static testMethod void getProjectSubSectionsTest(){
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
        ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.projectDoc.Id=projDocList[0].Id;
            ipmGateDocContrl.getProjectSubSections();
            List<IPM_Project_Document_Section__c>projSubLevelSectionList=[SELECT Id,IPM_Section__c,IPM_Negotiable__c ,IPM_Default_Section__c, IPM_Section_Sequence__c, 
            IPM_Section__r.IPM_Section_Type__c,IPM_Section__r.IPM_Section_Label_Type__c,IPM_Section__r.IPM_Section_Name__c,Name,
            IPM_Section__r.IPM_Parent_Section__c,IPM_Section__r.IPM_Parent_Section__r.IPM_Section_Name__c,IPM_Project_Document__c,
            IPM_Section_Status__c,IPM_Section__r.IPM_Section_Sequence__c,IPM_Count_of_Comments__c,IPM_FunctionalRole__c,IPM_Has_Appendix__c,
            IPM_GateHistory__c,IPM_GateHistory_Date__c,IPM_Gate_Document_Summary__c,LastModifiedBy.Name,LastModifiedDate,IPM_Master_Section_External_Id__c 
            FROM IPM_Project_Document_Section__c 
            WHERE IPM_Project_Document__c=:ipmGateDocContrl.projectDoc.Id AND IPM_Section__r.IPM_Parent_Section__r.ID=:ipmGateDocContrl.parentSectionId AND IPM_Default_Section__c=true  order by IPM_Section__r.IPM_Section_Sequence__c asc limit 50000];
            System.assert(projSubLevelSectionList[0].IPM_Default_Section__c,TEST_MSG_STR);
            test.stopTest();
        }
    }
    /*************************************************************************************************************************
* @description Running Test Script to get the Appendix sections
*/ 
    static testMethod void getAppendixSectionsTest() {  
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();   
        ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.projectDoc.Id=projDocList[0].Id;
      docSec.IPM_Has_Appendix__c=true;
      docSec.IPM_Default_Section__c=true;
      update docSec;
      system.assertEquals(docSec.IPM_Project_Document__c,projDocList[0].Id, 'Record Not Same');
     
      ipmGateDocContrl=new IPM_GateDocumentController ();
      ipmGateDocContrl.projectDoc.Id=document.Id;
      ipmGateDocContrl.getAppendixSections();
     List<IPM_Project_Document_Section__c>projDocAppdxSectionList=[SELECT ID,IPM_Has_Appendix__c,IPM_FunctionalRole__c,IPM_Master_Section_External_Id__c,IPM_Section__r.IPM_Section_Type__c,IPM_Section_Sequence__c,IPM_Section_Name__c 
      FROM IPM_Project_Document_Section__c 
      WHERE IPM_Project_Document__c=:ipmGateDocContrl.projectDoc.Id 
      AND IPM_Has_Appendix__c=true AND IPM_Default_Section__c=true 
      ORDER BY IPM_Section_Sequence_Number__c asc limit 50000];
      System.assert(projDocAppdxSectionList[0].IPM_Has_Appendix__c,TEST_MSG_STR);           
            test.stopTest();                                         
        }
    }
    /*************************************************************************************************************************
* @description Running Test Script to set up vaius rendereing condition from controller
*/ 
    static testMethod void isEditLinkAvailableTest(){ 
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();  
            ipmGateDocContrl=new IPM_GateDocumentController();          
            ipmGateDocContrl.isEditLinkAvailable();
            System.assertEquals(ipmGateDocContrl.isEditLinkActive,true,TEST_MSG_STR);
            test.stopTest();
        }
    }
    
    /*************************************************************************************************************************
* @description Running Test Script
*/ 
    static testMethod void showAttchSectionTest(){   
        initializeTestMethodData();
        system.RunAs(globalUser){
            test.startTest();
        ipmGateDocContrl=new IPM_GateDocumentController();
            ipmGateDocContrl.sectionId=projectDocSecListObj[0].Id;
            ipmGateDocContrl.showAttchSection();
            List<Attachment>attachmentList=[SELECT Id,Name,ParentId,Description FROM Attachment WHERE ParentId=:ipmGateDocContrl.sectionId limit 1];
            System.assertEquals(attachmentList.size(),0,'as we are not inserting any attachment');//Negative Assert
            test.stopTest();
        }
    }
    
}