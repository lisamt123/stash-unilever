/*
Copyright (c) 2014, salesforce.com, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
    * Neither the name of the salesforce.com, Inc. nor the names of its contributors
    may be used to endorse or promote products derived from this software
    without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

*/
@isTest
private class PBS_MyProfileController_Test {

    static testMethod void testWithNoAchievements(){

        //Create admin users
        List<User> adminUsers = PBS_UtilClass_Test.createUsers(2,'System Administrator');
        List<User> lmsUsers = PBS_UtilClass_Test.createUsers(2,'Standard User');

        System.runAs(adminUsers.get(0)){
            //Assign corresponding perm sets
            PBS_UtilClass_Test.addPermissionSet(adminUsers,'PBS_LMS_Admin');
            PBS_UtilClass_Test.addPermissionSet(lmsUsers,'PBS_LMS_User');
        }

        //Update manager for user 1
        User u1 = [select id,managerId from User where id = :lmsUsers.get(0).id];
        u1.managerId = lmsUsers.get(1).Id;
        update u1;

        PBS_TrainingPlanData_Test.createSampleData();
        List<PBS_Training_Plan__c> tplan = [select id from PBS_Training_Plan__c limit :integer.valueof(System.Label.PBS_soqllimit)];
        System.assertEquals(1,tplan.size());
        Id tplanId = tplan.get(0).Id;
        Set<Id> selectedUserIds = new Set<Id>();

        for(User u : lmsUsers){
            selectedUserIds.add(u.Id);
        }

        System.runAs(adminUsers.get(0)){
            PBS_LMSService_CC.upsertAssignments(selectedUserIds,tplanId,null);
        }

        PageReference ref = Page.PBS_MyProfile;
        Test.setCurrentPageReference(ref);

        Test.startTest();

            System.runAs(lmsUsers.get(0)){
                 PBS_Standard_Job_Profile__c psp= new PBS_Standard_Job_Profile__c();
            psp.name='Guest';
            insert psp;
                PBS_MyProfileController_CC cont = new PBS_MyProfileController_CC();
                System.assert(cont.oManager != null);
                System.assert(cont.achievementType == 'Achievements');
                System.assert(cont.oUser != null);
                System.assertEquals(0,cont.lcategories.size());

                List<PBS_MyProfileController_CC.AchievementTypeWrapper> atypes = cont.getAchievementTypes();
                System.assert(atypes.size()>0);


                ref.getParameters().put('aType','Certifications');
                Test.setCurrentPageReference(ref);

                PageReference ctypeRef = cont.changeAchievementType();
                System.assert(ctypeRef != null);

            }

        Test.stopTest();

    }

    static testMethod void testWithAchievements(){

        //Create admin users
        List<User> adminUsers = PBS_UtilClass_Test.createUsers(2,'System Administrator');
        List<User> lmsUsers = PBS_UtilClass_Test.createUsers(2,'Standard User');

        System.runAs(adminUsers.get(0)){
            //Assign corresponding perm sets
            PBS_UtilClass_Test.addPermissionSet(adminUsers,'PBS_LMS_Admin');
            PBS_UtilClass_Test.addPermissionSet(lmsUsers,'PBS_LMS_User');
        }

        //Update manager for user 1
        User u1 = [select id,managerId from User where id = :lmsUsers.get(0).id];
        u1.managerId = lmsUsers.get(1).Id;
        update u1;

        PBS_TrainingPlanData_Test.createSampleData();
        List<PBS_Training_Plan__c> tplan = [select id from PBS_Training_Plan__c limit :integer.valueof(System.Label.PBS_soqllimit)];
        System.assertEquals(1,tplan.size());

        List<PBS_Achievement_Category__c> lAchieveCat = PBS_AchievementData_Test.createAchievementCategories(1);
        List<PBS_Achievement__c> lAchievement = PBS_AchievementData_Test.createAchievements(1, lAchieveCat.get(0).Id, 'Achievements');
        PBS_TrainingPlanData_Test.createTrainingPlanAchievements(tplan, lAchievement);

        Id tplanId = tplan.get(0).Id;
        Set<Id> selectedUserIds = new Set<Id>();

        for(User u : lmsUsers){
            selectedUserIds.add(u.Id);
        }

        System.runAs(adminUsers.get(0)){
            PBS_LMSService_CC.upsertAssignments(selectedUserIds,tplanId,null);
        }

        PageReference ref = Page.PBS_MyProfile;
        Test.setCurrentPageReference(ref);

        Test.startTest();

            System.runAs(lmsUsers.get(0)){
                     PBS_Standard_Job_Profile__c psp= new PBS_Standard_Job_Profile__c();
            psp.name='Guest';
            insert psp;
                PBS_MyProfileController_CC cont = new PBS_MyProfileController_CC();
                System.assertEquals(1,cont.lcategories.size());

                List<PBS_MyProfileController_CC.AchievementTypeWrapper> atypes = cont.getAchievementTypes();
                System.assert(atypes.size()>0);
                ref.getParameters().put('aType','Certifications');
                Test.setCurrentPageReference(ref);

                PageReference ctypeRef = cont.changeAchievementType();
                System.assert(ctypeRef != null);

            }

        Test.stopTest();

    }

    static testMethod void testWithAchievementsAndOverrideURL(){

        //Create admin users
        List<User> adminUsers = PBS_UtilClass_Test.createUsers(2,'System Administrator');
        List<User> lmsUsers = PBS_UtilClass_Test.createUsers(2,'Standard User');

        System.runAs(adminUsers.get(0)){
            //Assign corresponding perm sets
            PBS_UtilClass_Test.addPermissionSet(adminUsers,'PBS_LMS_Admin');
            PBS_UtilClass_Test.addPermissionSet(lmsUsers,'PBS_LMS_User');
        }

        //Update manager for user 1
        User u1 = [select id,managerId from User where id = :lmsUsers.get(0).id];
        u1.managerId = lmsUsers.get(1).Id;
        update u1;

        PBS_TrainingPlanData_Test.createSampleData();
        List<PBS_Training_Plan__c> tplan = [select id from PBS_Training_Plan__c limit :integer.valueof(System.Label.PBS_soqllimit)];
        System.assertEquals(1,tplan.size());

        //Override achievement url
        List<PBS_Achievement_Category__c> lAchieveCat = PBS_AchievementData_Test.createAchievementCategories(1);
        List<PBS_Achievement__c> lAchievement = PBS_AchievementData_Test.createAchievements(1, lAchieveCat.get(0).Id, 'Achievements');
        PBS_Achievement__c ach = [select id,Override_URL__c from PBS_Achievement__c where Id = :lAchievement.get(0).Id];
        ach.Override_URL__c = 'https://www.salesforce.com';
        update ach;


        PBS_TrainingPlanData_Test.createTrainingPlanAchievements(tplan, lAchievement);

        Id tplanId = tplan.get(0).Id;
        Set<Id> selectedUserIds = new Set<Id>();

        for(User u : lmsUsers){
            selectedUserIds.add(u.Id);
        }

        System.runAs(adminUsers.get(0)){
            PBS_LMSService_CC.upsertAssignments(selectedUserIds,tplanId,null);
        }


        //Change achievement status
        List<PBS_Achievement_Assignment__c> achievementAssignments = [select Id,Status__c from PBS_Achievement_Assignment__c where Training_Plan_Achievement__r.Training_Plan__c = :tplanId];
        for(PBS_Achievement_Assignment__c aa : achievementAssignments){
            aa.Status__c = PBS_LMSConstants_CC.AA_ACQUIRED_STATUS;
        }
        update achievementAssignments;

        PageReference ref = Page.PBS_MyProfile;
        Test.setCurrentPageReference(ref);

        Test.startTest();

            System.runAs(lmsUsers.get(0)){
                 PBS_Standard_Job_Profile__c psp= new PBS_Standard_Job_Profile__c();
                    psp.name='Guest';
                    insert psp;
                PBS_MyProfileController_CC cont = new PBS_MyProfileController_CC();
                System.assertEquals(1,cont.lcategories.size());

                List<PBS_MyProfileController_CC.AchievementTypeWrapper> atypes = cont.getAchievementTypes();
                System.assert(atypes.size()>0);
                ref.getParameters().put('aType','Certifications');
                Test.setCurrentPageReference(ref);

                PageReference ctypeRef = cont.changeAchievementType();
                System.assert(ctypeRef != null);

            }

        Test.stopTest();

    }
    
    static testMethod void testSelectOptions(){
        List<User> adminUsers = PBS_UtilClass_Test.createUsers(2,'System Administrator');
        List<User> lmsUsers = PBS_UtilClass_Test.createUsers(2,'Standard User');

        System.runAs(adminUsers.get(0)){
            //Assign corresponding perm sets
            PBS_UtilClass_Test.addPermissionSet(adminUsers,'PBS_LMS_Admin');
            PBS_UtilClass_Test.addPermissionSet(lmsUsers,'PBS_LMS_User');
        }
        
        PageReference ref = Page.PBS_MyProfile;
        Test.setCurrentPageReference(ref);

        Test.startTest();

        System.runAs(lmsUsers.get(0)){ 
            PBS_Standard_Job_Profile__c psp= new PBS_Standard_Job_Profile__c();
            psp.name='Guest';
            insert psp;
            
            PBS_MyProfileController_CC cont = new PBS_MyProfileController_CC();
            System.assert(cont.getCategoryOptions().size()>0);
                System.assert(cont.getGeographyOptions().size()>0);
                //cont.workLevel='Level 1';
                System.assert(cont.getJobProfileOptions().size()>0);
                System.assert(cont.getWorkLevelOptions().size()>0);
                cont.jobprofileSelection();
                //PBS_MyProfileController_Cc.updateUserDetails('test'  ,'test',null,'test');
        }
        Test.stopTest();
    }

}