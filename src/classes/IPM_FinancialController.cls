/**
* @author       Cognizant (Vipul)
* @date         27/04/2015
* @description  This class is used for managing the ipmFinancial Page 
*               and displaying Financial Business cases 
* version: Samrat Removed uploadDownloadTemplate function not required
*/
public with sharing class IPM_FinancialController extends IPM_ProjectIntermediateController  
{ 

    //public IPM_Project__c project {get; set;} //The project record for which the financial business cases are being viewed
    
    public Integer sustainabilityPeriod {get; set;} //Sustainability Period relevant for this set of business cases. 
    public Integer colSpan {get; set;} //Derived from Sustainability Perido. Used to define the number of columns visible on the Financial Table
    
    public Boolean isEditMode {get; set;} //Boolean variable to define if the page is in edit mode
    public Boolean isEditable{get;set;} //Boolean Variable to define if the record is editable by the current logged in user
    public Boolean isValidationFailed {get;set;} //Boolean variable to check the financial data validation
    public Boolean isy0TurnoverInvalid {get;set;} //Boolean variable to highlight the y0Turnover cell if the value is invalid
    public Boolean isy0ProfitInvalid {get;set;} //Boolean variable to highlight the y0Profit cell if the value is invalid
    public Boolean isy0GrossProfitInvalid {get;set;} //Boolean variable to highlight the y0GrossProfit cell if the value is invalid
    
    public List<RolloutWrapper> lstRolloutWrappers {get; set;} //List of Rollout Wrappers that becomes visible for the current view
    public Map<String, IPM_Financial__c> mapConsolidatedFinancials {get; set;} //Map of All CONSOLIDATED type financials.
    public Map<String, IPM_Financial__c> mapDefaultFinancials {get; set;} //Map of  Defualt type financials. created by Kt
    public List<IPM_Project__c> lstLocalProjects ; // List of Project type 
    public Boolean isError {get; set;} //Boolean variable to indicate error on page
    public String errorMessage {get; set;} //Error Message to be displayed on the page
    public Boolean isRolloutError {get; set;} //Boolean variable to indicate error if No Rollouts exist for the project
    public Boolean isValidationError {get; set;} //Boolean variable to indicate validation error on page
    public String validationErrorMessage {get; set;} //Validation error Message to be displayed on the page

    public String currentFinancialId {get; set;} //Stores the id of the current financial being viewed. Changes dynamically and used with re-render
    private String previousFinancialId {get; set;} //Store the previously viwed financial Id. Used to maintain stae when switching tabs
    public String currentTab {get; set;} //Used to manage the current selected tab on the UI
    public IPM_Financial__c currentFinancial {get; set;} //Used to store the financial business case (IPM_Financial & associated IPM_Financial_Year__c records)
    private List<IPM_Financial_Year__c> lstUpdateFinancials;
   

    public Boolean showTopDownTab {get; set;} //Boolean variable to decide when to show the TopDown tab
    public Boolean showRollupTab {get; set;} //Boolean variable to decide when to show the Rollup tab
    
    public IPM_FinancialWrapper financialsInnovation {get; set;} //Wrapper to store the financial values for the Innovation Years for the currentFinancial
    public IPM_FinancialWrapper financialsCalendar {get; set;} //Wrapper to store the financial values for the Calendar Years for the currentFinancial

    public Map<String, IPM_Financial_Year__c> mapFinancialYears {get; set;} //Used to store the map of the financial years, based on External Id for the currentFinancial
    public String volumeUnit {get; set;} //Used to manage the different types of Volume Units
    public String fieldSuffix {get; set;} //Used to dynamically change the field suffix based on the current view. (Accepted values are - Global,Regional.Local,Charter,Contract,MR,MD)
    
    public Boolean showMisalignment {get; set;} //Boolean variable to identify if the currentFinancial has any misalignment
    
    public String tabLabelMyView {get; set;} //Used to define the label for My View Tab
    public String tabLabelTopDown {get; set;} //Used to define the label for Top Down Tab
    public String tabLabelRollup {get; set;} //Used to define the label for Rollup Tab 
    
    public List<SelectOption> lstSustainabilityPeriod {get; set;} //Used to manage appropriate sustainability period selection on the UI
    public String selectedSustainabilityPeriod {get; set;} //Selected Sustainability Period for the currentFinancial business case
    public boolean CheckCountry{get;set;}
    public String Country {get;set;}
    public IPM_Project_Rollout__c localrollout{get;set;}
    public List<IPM_Country__c> associatedCountryList{get;set;}
    public Boolean sustainabilityPeriodChanging {get; set;} //Variable to validate if the future method for changing the sustainabilityPeriod is still running

    public List<SelectOption> documentSections {get; set;} //Used to manage the list of the document sections for navigation
    public String selectedDocumentSection {get; set;} //Seleted DOcument Section for the current project for navigation
    public String milestoneFinanceDataValidationMessage {get;set;}
    public Boolean isConsolidatedOrNonkey {
        get {
            Boolean flag = false;
            if(currentFinancial!=null && (currentFinancial.Financial_External_ID__c.endsWith(IPM_ConstantUtils.FINANCIAL_CONSOLIDATE) || currentFinancial.Financial_External_ID__c.endsWith(IPM_ConstantUtils.FINANCIAL_NONKEY))) {
                flag = true;
            }
            return flag;
        } 
        set;
    } 
    
    private Map<String, IPM_Financial_Year__c> mapFinancialYearRecords; //Used to store the map of the financial years, based on External Id for the currentFinancial
    
    private static String REGIONAL_ROLLOUT_RECORDTYPE; //Recordtype Id for Regional Rollouts on IPM_Project_Rollout__c object
    private static String LOCAL_ROLLOUT_RECORDTYPE;//Recordtype Id for Local Rollouts on IPM_Project_Rollout__c object
    private static String DEFAULT_FINANCIAL_RECORDTYPE; //Recordtype Id for Default on IPM_Financial__c object  -- kt
    private static String CONSOLIDATED_FINANCIAL_RECORDTYPE; //Recordtype Id for Consolidated on IPM_Financial__c object
    
    private static final String CLASS_NAME = IPM_FinancialController.class.getName();//Class Name for Exception Logging
    
    /*******************************************************************************************************
    * @description  Constructor
    * @param        NONE
    * @return       NONE
    */
    public IPM_FinancialController() 
    {
        //IE-9 Fix
        Apexpages.currentPage().getHeaders().put('X-UA-Compatible', 'IE=edge');
        
        String projectId = ApexPages.currentPage().getParameters().get('Id');
        
        currentTab = IPM_ConstantUtils.TAB_MYVIEW_NAME; 
        isError = FALSE;
        sustainabilityPeriod=0;
        isEditable=false;
        isValidationFailed = false;
        isy0TurnoverInvalid = false;
        isy0ProfitInvalid = false;
        isy0GrossProfitInvalid = false;
        isValidationError = false;
        isConsolidatedOrNonkey=false;
        validationErrorMessage = IPM_ConstantUtils.BLANK;
        localrollout = new IPM_Project_Rollout__c(); 
        associatedCountryList = new List<IPM_Country__c>();
        milestoneFinanceDataValidationMessage = '';
        exRate=1;            
                
        try
        {
            if (projectId != null) 
            {
                isEditable=IPM_Utils.getIpmuserType(projectId, IPM_ConstantUtils.IPM_ROLE_FINANCE);
                getRolloutWrappers(); 
                getSustainabilityPeriod(); 
                getVisibleTabs(); 
                getSectionList(); 
                getMisalignmentVisibility(); 
                getFinancials();                 
                isEditMode = FALSE; 
                Boolean result = validateMilestoneAndFinacialData();
                if(result) {
                    milestoneFinanceDataValidationMessage = Label.IPM_Finacial_Data_Missing;
                }
              
            }
	}
     
        catch (Exception ex)
        {
            isError = TRUE;
            
            if(currentFinancial != null)
            { 
                errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            } 
            else 
            {
                errorMessage = Label.IPM_NO_ROLLOUTS_ERROR;
                isRolloutError = true;          
            }
       }
       
       if(currentFinancial == null)
       {  
            if(project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL || project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT)
            {
                errorMessage = Label.IPM_NO_ROLLOUTS_ERROR;
                isError = true;
                isRolloutError = true;
            }  
        }
     }
     
     private List<IPM_Country__c> getCountryList()
     {  
        associatedCountryList =  new List<IPM_Country__c>(); 
        List<IPM_Project_Rollout__c> localRolloutList = new List<IPM_Project_Rollout__c>();
        List<IPM_Project__c> ipmProjectList = new List<IPM_Project__c>(); 
        if(currentFinancial !=null)
        {
            String financialExtID = currentFinancial.Financial_External_ID__c;
           if(currentFinancial.RecordTypeId == DEFAULT_FINANCIAL_RECORDTYPE && String.isNotBlank(financialExtID) )
            {
               if(!financialExtID.contains(IPM_ConstantUtils.FINANCIAL_NONKEY))
                {
                    ipmProjectList =  [SELECT Id,
                                           (SELECT Regional_Project__c, RecordTypeId, Local_Project__c, IPM_Project__c, MisAligned_Confirmed_By_Finance_Leader__c  FROM Regional_Project_Rollout__r 
                                               WHERE RecordTypeId = :LOCAL_ROLLOUT_RECORDTYPE AND IPM_Rollout_Project__c = :financialExtID ),
                                           (SELECT Regional_Project__c, RecordTypeId, Local_Project__c, IPM_Project__c, MisAligned_Confirmed_By_Finance_Leader__c  FROM IPM_Project_Rollout__r 
                                               WHERE RecordTypeId = :LOCAL_ROLLOUT_RECORDTYPE AND IPM_Rollout_Project__c = :financialExtID )   
                                        FROM IPM_Project__c WHERE Id =:Project.Id];
                }
                else 
                {
                    // Update financials External Id if it is a non Key.
                    financialExtID = currentFinancial.Regional_External_Id__c;
                    ipmProjectList =  [SELECT Id,
                                           (Select Regional_Project__c, RecordTypeId, Local_Project__c, IPM_Project__c, MisAligned_Confirmed_By_Finance_Leader__c FROM Regional_Project_Rollout__r 
                                               WHERE RecordTypeId = :LOCAL_ROLLOUT_RECORDTYPE AND KeyMCO__c = FALSE AND Regional_Rollout_External_Id__c= :financialExtID),
                                           (Select Regional_Project__c, RecordTypeId, Local_Project__c, IPM_Project__c, MisAligned_Confirmed_By_Finance_Leader__c FROM IPM_Project_Rollout__r 
                                               WHERE RecordTypeId = :LOCAL_ROLLOUT_RECORDTYPE AND KeyMCO__c = FALSE AND Regional_Rollout_External_Id__c= :financialExtID)
                                        FROM IPM_Project__c WHERE Id =:Project.Id];
                }
            }
            
            
            if(!ipmProjectList.isEmpty())
            {
               IPM_Project__c project = ipmProjectList[0];
               if(project.Regional_Project_Rollout__r!=null && !(project.Regional_Project_Rollout__r).isEmpty() )
               {
                    localRolloutList.addAll(project.Regional_Project_Rollout__r); 
               }
               
               if(project.IPM_Project_Rollout__r!=null && !(project.IPM_Project_Rollout__r).isEmpty() )
               {
                    localRolloutList.addAll(project.IPM_Project_Rollout__r);
               }
               
              
               if(!localRolloutList.isEmpty())
               {
                  associatedCountryList =  [Select Id,Country_Name__c,Calculation_Index__c from IPM_Country__c where Local_Rollout__c in :localRolloutList];
                   
               }
            } 
        }
        
        return associatedCountryList; 
    }
    
        
    public void updateCountry()
    { 
        IPM_Country__c UpdateCountry = [Select Country_Name__c, Id, Calculation_Index__c From IPM_Country__c where Id =: Country Limit 1];
        UpdateCountry.Calculation_Index__c = CheckCountry;
        update UpdateCountry;
    }
    
    /*******************************************************************************************************
    * @description  Used to get visible tabs
    * @param        NONE
    * @return       NONE
    */
    
    private void getVisibleTabs()
    {
        showTopDownTab = showRollupTab = false;
        
        //Global Project
        if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_GLOBAL)
        {
            if(project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL )
            {
                tabLabelMyView = IPM_ConstantUtils.TAB_TOPDOWN_LABEL; //  label name --> 'Top Down' phase is feasibility
                tabLabelRollup = IPM_ConstantUtils.TAB_MARKETCLUSTERBOTTOMUP_LABEL; // --> Market cluster bottom up  phase is feasibility
            
                if (project.IPM_Phase__c != IPM_ConstantUtils.PHASE_IDEAS)
                {
                    showRollupTab = true;
                }
            }
            else 
            {
                tabLabelMyView = IPM_ConstantUtils.TAB_MYVIEW_LABEL; // label that will be same in both current selected tab and opertional default     
            }
        } 
        //Regional Project
        else if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_REGIONAL)
        {
            if(project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL )
            {
                tabLabelMyView = IPM_ConstantUtils.TAB_TOPDOWN_LABEL;
                tabLabelTopDown = IPM_ConstantUtils.TAB_GLOBALCHARTER_LABEL;
                tabLabelRollup = IPM_ConstantUtils.TAB_LOCALBBROLLUP_LABEL;

                if(project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT )
                {
                    showTopDownTab = showRollupTab = true;      
                }
                else if(project.IPM_Project_Type__c ==  IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL )
                {
                    tabLabelTopDown = IPM_ConstantUtils.TAB_CHARTER_LABEL; 
                    if (project.IPM_Phase__c != IPM_ConstantUtils.PHASE_IDEAS)
                    {
                        showTopDownTab = showRollupTab = true;
                    }
                }
            }
            else
            {  // operational
                    tabLabelMyView = IPM_ConstantUtils.TAB_MYVIEW_LABEL; 
            } 
        } 
        //Local Project 
        else if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_LOCAL)
        {
            if(project.IPM_Project_Type__c != IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL)
            {
                tabLabelMyView = IPM_ConstantUtils.TAB_MYVIEW_LABEL;
                tabLabelTopDown = IPM_ConstantUtils.TAB_TOPDOWN_LABEL;
                showTopDownTab = true;
            }
            else 
            {
                tabLabelMyView = IPM_ConstantUtils.TAB_MYVIEW_LABEL; 
            }
         }
    }

    /*******************************************************************************************************
    * @description  Used to get list of Document Sections for Finance Team
    * @param        NONE
    * @return       NONE
    */
    private void getSectionList(){
        String currentStage = '';
        if(project.IPM_Phase__c == IPM_ConstantUtils.PHASE_IDEAS)
        {
            currentStage = IPM_ConstantUtils.CHARTER_GATE;
            
        }    
        else if(project.IPM_Phase__c == IPM_ConstantUtils.PHASE_FEASIBILITY) {
            currentStage = IPM_ConstantUtils.CONTRACT_GATE;
        }
        else if(project.IPM_Phase__c == IPM_ConstantUtils.PHASE_CAPABILITY) {
            currentStage = IPM_ConstantUtils.MARKET_READY_GATE;
        }
        else if(project.IPM_Phase__c == IPM_ConstantUtils.PHASE_MARKET_READY){
            currentStage = IPM_ConstantUtils.MARKET_DEPLOYMENT_GATE; 
        }
        
        String headerString = IPM_ConstantUtils.PERCENTAGE + IPM_ConstantUtils.SECTION_TYPE_HEADER + IPM_ConstantUtils.PERCENTAGE;

        List<IPM_Project_Document__c> lstCurrentDocuments = [SELECT Id, IPM_GateDocuments__c, 
                                                                (SELECT Id, IPM_Section_Sequence__c, IPM_Section_Name__c
                                                                    FROM IPM_Project_Sections__r
                                                                    WHERE (NOT IPM_Section_Type__c LIKE: headerString)
                                                                    AND IPM_FunctionalRole__c =: IPM_ConstantUtils.FUNCTIONAL_ROLE_FINANCE
                                                                    AND (NOT IPM_Section_Sequence__c LIKE: IPM_ConstantUtils.EIGHT_PERCENTAGE)
                                                                    AND IPM_Default_Section__c = true
                                                                    ORDER BY IPM_Section_Sequence__c)
                                                            FROM IPM_Project_Document__c
                                                            WHERE IPM_GateDocuments__c =: currentStage
                                                                AND IPM_Project__c =: project.Id 
                                                            LIMIT 1];
        if(project.IPM_SourceProjectType__c==IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL){
            lstCurrentDocuments = [SELECT Id, IPM_GateDocuments__c, 
                                                                (SELECT Id, IPM_Section_Sequence__c, IPM_Section_Name__c
                                                                    FROM IPM_Project_Sections__r
                                                                    WHERE (NOT IPM_Section_Type__c LIKE: headerString)
                                                                    AND ( IPM_Section_Sequence__c LIKE: '6%')
                                                                    ORDER BY IPM_Section_Sequence__c)
                                                            FROM IPM_Project_Document__c
                                                            WHERE IPM_GateDocuments__c =: currentStage
                                                                AND IPM_Project__c =: project.Id 
                                                            LIMIT 1];
        }
        documentSections = new List<SelectOption>();
        documentSections.add(new SelectOption(IPM_ConstantUtils.BLANK, Label.IPM_GO_TO_DOCUMENT_SECTION));
        if(lstCurrentDocuments!=null && !lstCurrentDocuments.isEmpty()){
            For(IPM_Project_Document_Section__c documentSection : lstCurrentDocuments[0].IPM_Project_Sections__r){
                documentSections.add(new SelectOption(documentSection.Id, documentSection.IPM_Section_Sequence__c + IPM_ConstantUtils.EMPTY_STRING_DELIMITER + documentSection.IPM_Section_Name__c));
            }
        }
    }

    /*******************************************************************************************************
    * @description  Used to get Sustainability Period from the appropriate project and define the column 
    *               span for the financials table on the visualforce page
    * @param        NONE
    * @return       NONE
    */
    private void getSustainabilityPeriod(){
       sustainabilityPeriod = Integer.valueOf(project.Sustainability_Period__c);
        colSpan = (sustainabilityPeriod * 2) + 1;
        
        lstSustainabilityPeriod = new List<SelectOption>();
        lstSustainabilityPeriod.add(new SelectOption(IPM_ConstantUtils.BLANK, Label.IPM_Select_Sustainab));
        lstSustainabilityPeriod.add(new SelectOption(IPM_ConstantUtils.YEAR_3, Label.IPM_SUSTAINABILITY_PERIOD_3));
        lstSustainabilityPeriod.add(new SelectOption(IPM_ConstantUtils.YEAR_5, Label.IPM_SUSTAINABILITY_PERIOD_5));
        
    }

    /*******************************************************************************************************
    * @description  Used to get Financials for multiple regions/mco's/countries for the appropriate project 
    *               and update the side panel accordingly
    * @param        NONE
    * @return       NONE
    */
    private void getRolloutWrappers(){
        getRolloutWrappers(NULL); 
    }

    /*******************************************************************************************************
    * @description  Used to get Financials for multiple regions/mco's/countries for the appropriate project 
    *               and update the side panel accordingly
    * @param        NONE
    * @return       NONE
    */
    private void getRolloutWrappers(String statefulCurrentFinancialId){
         previousFinancialId = currentFinancialId;
         currentFinancialId = NULL;
         getRecordtypes();
         
         
        if(project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL)
        {
                mapConsolidatedFinancials = new Map<String, IPM_Financial__c> ();
                lstRolloutWrappers = new List<RolloutWrapper>();
                
                // If Project is Global Orignal Project
                if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_GLOBAL)
                {
                    if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME)
                    {
                        getGlobalMyViewWrappers();
                    } 
                    else if (currentTab == IPM_ConstantUtils.TAB_ROLLUP_NAME)
                    {
                        getGlobalRollupWrappers();
                    } 
                } 
                else if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_REGIONAL)
                {
                    // If Project Type is Regional Rollout Project 
                    if(project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT)
                    {
                        if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME)
                        {
                            getRegionalMyViewWrappers();
                        } 
                        else if (currentTab == IPM_ConstantUtils.TAB_TOPDOWN_NAME)
                        {
                            getRegionalTopDownWrappers();
                        }
                        else if (currentTab == IPM_ConstantUtils.TAB_ROLLUP_NAME)
                        {
                            getRegionalRollupWrappers();
                        }
                    }
                    else // If Project is Regional Orignal Project
                    {
                        if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME)
                        {
                            getRegionalOriginalMyViewWrappers();
                        } 
                        else if (currentTab == IPM_ConstantUtils.TAB_TOPDOWN_NAME)
                        {
                            getRegionalOriginalTopDownWrappers();
                        }
                        else if (currentTab == IPM_ConstantUtils.TAB_ROLLUP_NAME)
                        {
                            getRegionalRollupWrappers();
                        }
                    }
                } 
                // If Project is Local Rollout Project
                else if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_LOCAL)
                {
                    if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME) {
                        getLocalMyViewWrappers();
                    }
                    else if (currentTab == IPM_ConstantUtils.TAB_TOPDOWN_NAME) {
                        getLocalMyViewWrappers();
                    }
                }
        } // If Project is Global Operational Project
        else if(project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL)
        { 
            mapDefaultFinancials = new Map<String, IPM_Financial__c> (); 
            
            if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME) {
                getOperationalMyViewWrappers(); 
            }
        }
        
         if(statefulCurrentFinancialId != NULL){
            currentFinancialId = statefulCurrentFinancialId;
          }
    
    }
    
    /*******************************************************************************************************
    * @description  Used to get different recordtype Ids
    * @param        NONE
    * @return       NONE
    */
    private void getRecordtypes(){
        if (REGIONAL_ROLLOUT_RECORDTYPE == null) {
            REGIONAL_ROLLOUT_RECORDTYPE = Schema.SObjectType.IPM_Project_Rollout__c.getRecordTypeInfosByName().get(IPM_ConstantUtils.REGIONAL_ROLLOUT_RT).getRecordTypeId();
         }
        if (LOCAL_ROLLOUT_RECORDTYPE == null) {
            LOCAL_ROLLOUT_RECORDTYPE = Schema.SObjectType.IPM_Project_Rollout__c.getRecordTypeInfosByName().get(IPM_ConstantUtils.LOCAL_ROLLOUT_RT).getRecordTypeId();
        }
        if (DEFAULT_FINANCIAL_RECORDTYPE == null) {
            DEFAULT_FINANCIAL_RECORDTYPE = Schema.SObjectType.IPM_Financial__c.getRecordTypeInfosByName().get(IPM_ConstantUtils.DEFAULT_FINANCIAL_RT).getRecordTypeId();
         }     
        
        if (CONSOLIDATED_FINANCIAL_RECORDTYPE == null) {
            CONSOLIDATED_FINANCIAL_RECORDTYPE = Schema.SObjectType.IPM_Financial__c.getRecordTypeInfosByName().get(IPM_ConstantUtils.CONSOLIDATED_FINANCIAL_RT).getRecordTypeId();
        }        
    }
    
    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Global My View Tab now it will also give default wrapper for fiancial in case of operational
    * @param        NONE
    * @return       NONE
    */
    
    private void getRegionalOriginalMyViewWrappers()
    {
        
        String nonKeyLike = IPM_ConstantUtils.BLANK; 
        
        if(project.IPM_Phase__c != IPM_ConstantUtils.PHASE_IDEAS)
        {
            nonKeyLike = IPM_ConstantUtils.PERCENTAGE + IPM_ConstantUtils.FINANCIAL_NONKEY;
        }
        
        List<IPM_Financial__c> lstRegionalFinancials = [SELECT Id, Name, Financial_External_ID__c, Status__c FROM IPM_Financial__c
                                                            WHERE Regional_Project__c =: project.Id 
                                                            AND RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                            AND (NOT Financial_External_ID__c LIKE: nonKeyLike) 
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c Limit: IPM_ConstantUtils.MaxLimit];

        lstRolloutWrappers.add( new RolloutWrapper( project.Market_Cluster_Name__c, lstRegionalFinancials) );
        
        String firstFinancialId = '';
        
        For (IPM_Financial__c financial : lstRegionalFinancials)
        {
            if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
            {
                firstFinancialId = financial.Id;
            }
            
            if (previousFinancialId == financial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
        
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        
        lstIpmFinancial = [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                            FROM IPM_Financial__c 
                            WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                            AND Regional_Project__c =: project.Id Limit: IPM_ConstantUtils.MaxLimit];
                                                                                         
        for(IPM_Financial__c ipmFinancial : lstIpmFinancial)
        { 
            mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);
            
            if (previousFinancialId == ipmFinancial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
      
        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK))
        {
            currentFinancialId = firstFinancialId;    
        }
        
    }
    
    
    private void getGlobalMyViewWrappers()
    {  
        //Rollout Wrappers
        String firstFinancialId = '';
        List<IPM_Project_Rollout__c> lstRegionalRollout = new List<IPM_Project_Rollout__c>();
        
        lstRegionalRollout = [SELECT Id, Market_Cluster_Name__c,KeyMCO__c,(SELECT Id, Name, Financial_External_ID__c, Status__c
                                                            FROM IPM_Financials__r
                                                            WHERE RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c)
                                                            FROM IPM_Project_Rollout__c
                                                            WHERE IPM_Project__c =: project.Id
                                                            AND RecordTypeId =: REGIONAL_ROLLOUT_RECORDTYPE
                                                            ORDER BY Market_Cluster_Name__c Limit: IPM_ConstantUtils.MaxLimit];
       
        For (IPM_Project_Rollout__c regionalRollout : lstRegionalRollout)
        {
            lstRolloutWrappers.add( new RolloutWrapper( regionalRollout.Market_Cluster_Name__c,regionalRollout.IPM_Financials__r) );
             
            for(IPM_Financial__c financial : regionalRollout.IPM_Financials__r)
            {
                
                if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
                {
                    firstFinancialId = financial.Id;
                }
                
                if (previousFinancialId == financial.Id)
                {
                    currentFinancialId = previousFinancialId;
                }
            }
           
        }
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
      
        lstIpmFinancial = [SELECT Id, Name, Financial_External_ID__c, Status__c, IPM_Project_Rollout__c, IPM_Project_Rollout__r.Market_Cluster_Name__c
                                                 FROM IPM_Financial__c
                                                 WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                                                     AND Parent_Project__c =: project.Id Limit: IPM_ConstantUtils.MaxLimit];
        
       
       For(IPM_Financial__c ipmFinancial : lstIpmFinancial)
        {
            if(ipmFinancial.IPM_Project_Rollout__c == NULL)
            {
               mapConsolidatedFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
            }
            else
            {
               mapConsolidatedFinancials.put(ipmFinancial.IPM_Project_Rollout__r.Market_Cluster_Name__c, ipmFinancial);
            }
            
            if (previousFinancialId == ipmFinancial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }

        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK))
        {
            currentFinancialId = firstFinancialId;
        }
        
        // Get associated Country List 
        
        
    }
    
    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Global My View Tab now it will also give default wrapper for fiancial in case of operational
    * @param        NONE
    * @return       NONE
    */
    private void getOperationalMyViewWrappers(){  
       
       String firstFinancialId = '';
        
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
      
        lstIpmFinancial = [SELECT Id, Name, Financial_External_ID__c, Status__c
                                                 FROM IPM_Financial__c
                                                 WHERE RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                     AND Parent_Project__c =: project.Id Limit: IPM_ConstantUtils.MaxLimit];
       
           
       
        if(!lstIpmFinancial.isEmpty()) {
            For(IPM_Financial__c ipmFinancial : lstIpmFinancial){
                mapDefaultFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
                firstFinancialId = ipmFinancial.Id;
           }
        }
        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK)) {
            currentFinancialId = firstFinancialId;
        }
           
        }
    
   
     /*******************************************************************************************************
    * @description  Used to for rendering record 
    * @param        NONE
    * @return       Map of financial record either consolidated or default
    */
   
    public Boolean getRenderMapGlobal(){ // this should return the defualt map in case of operational look at this method
        
        if(project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL || project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT){
          return mapConsolidatedFinancials.containsKey(IPM_ConstantUtils.IPMGLOBAL);
        }
        else{ 
             return mapDefaultFinancials.containsKey(IPM_ConstantUtils.IPMGLOBAL);
        }
    }

    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Global Rollup Tab
    * @param        NONE
    * @return       NONE
    */
    private void getGlobalRollupWrappers()
    {
        //Rollout Wrappers
        String firstFinancialId = '';
        String nonKeyLike = IPM_ConstantUtils.PERCENTAGE + IPM_ConstantUtils.FINANCIAL_NONKEY;
        
        List<IPM_Project__c> lstRegionalProject = [SELECT Id, Market_Cluster_Name__c, (SELECT Id, Financial_External_Id__c, Status__c 
                                                            FROM IPM_Financials_Regional__r
                                                            WHERE RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE 
                                                            AND (NOT Financial_External_ID__c LIKE: nonKeyLike)
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c)
                                                            FROM IPM_Project__c
                                                            WHERE IPM_Parent_Project__c =: project.Id
                                                            ORDER BY Market_Cluster_Name__c Limit: IPM_ConstantUtils.MaxLimit];
                                                    
                                             
        For (IPM_Project__c regionalProject : lstRegionalProject)
        {
            lstRolloutWrappers.add( new RolloutWrapper( regionalProject.Market_Cluster_Name__c,regionalProject.IPM_Financials_Regional__r));
            
            For (IPM_Financial__c financial : regionalProject.IPM_Financials_Regional__r)
            {
                if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
                {
                    firstFinancialId = financial.Id;
                }
                
                if (previousFinancialId == financial.Id)
                {
                    currentFinancialId = previousFinancialId;
                }
            }
        }
        
       
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        
        lstIpmFinancial = [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                                                 FROM IPM_Financial__c
                                                 WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                                                     AND Parent_Project__c =: project.Id Limit: IPM_ConstantUtils.MaxLimit];
        
           
        For(IPM_Financial__c ipmFinancial : lstIpmFinancial)
        {
            if(ipmFinancial.Regional_Project__c == NULL)
            {
                mapConsolidatedFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
            }
            else
            {
                mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);
            }

            if (previousFinancialId == ipmFinancial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
          
        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK))
        {
            currentFinancialId = firstFinancialId;
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Regional My View Tab
    * @param        NONE
    * @return       NONE
    */
    private void getRegionalMyViewWrappers()
    {
        // No need to display Non Key financials in case of Regional View. Only needs to be displayed in Global Charter
        String nonKeyLike = IPM_ConstantUtils.PERCENTAGE + IPM_ConstantUtils.FINANCIAL_NONKEY;
        
        List<IPM_Financial__c> lstRegionalFinancials = [SELECT Id, Name, Financial_External_ID__c, Status__c
                                                            FROM IPM_Financial__c
                                                            WHERE Regional_Project__c =: project.Id
                                                            AND RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE 
                                                            AND (NOT Financial_External_ID__c LIKE: nonKeyLike)
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c Limit: IPM_ConstantUtils.MaxLimit];
                                                       
        lstRolloutWrappers.add( new RolloutWrapper( project.Market_Cluster_Name__c, lstRegionalFinancials ) );
        
        String firstFinancialId = '';
        For (IPM_Financial__c financial : lstRegionalFinancials)
        {
            if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
            {
                firstFinancialId = financial.Id;
            }
            
            if (previousFinancialId == financial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
        
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        
          lstIpmFinancial = [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                                                 FROM IPM_Financial__c
                                                 WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                                                     AND Parent_Project__c =: project.IPM_Parent_Project__c Limit: IPM_ConstantUtils.MaxLimit];
                                                     
        
                                              
        For(IPM_Financial__c ipmFinancial : lstIpmFinancial){
            if(ipmFinancial.Regional_Project__c == NULL) {
                mapConsolidatedFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
            }
            else {
                mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);
            }

            if (previousFinancialId == ipmFinancial.Id) {
                currentFinancialId = previousFinancialId;
            }
            }
      

        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK)){
            currentFinancialId = firstFinancialId;
        }
    }
    
    private void getRegionalOriginalTopDownWrappers()
    {
        
        List<IPM_Financial__c> lstRegionalFinancials = [SELECT Id, Name, Financial_External_ID__c, Status__c FROM IPM_Financial__c
                                                            WHERE Regional_Project__c =: project.Id 
                                                            AND RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                            AND Added_At_Stage__c = :IPM_ConstantUtils.PHASE_IDEAS
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c Limit: IPM_ConstantUtils.MaxLimit];    
        
        lstRolloutWrappers.add( new RolloutWrapper( project.Market_Cluster_Name__c, lstRegionalFinancials) );
        
        String firstFinancialId = '';
        
        for(IPM_Financial__c financial : lstRegionalFinancials) 
        {
            if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
            {
                firstFinancialId = financial.Id;
            }
            
            if (previousFinancialId == financial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
        
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        
        lstIpmFinancial =   [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                                FROM IPM_Financial__c
                                WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                                AND Regional_Project__c =: project.Id Limit: IPM_ConstantUtils.MaxLimit];
               
        For(IPM_Financial__c ipmFinancial : lstIpmFinancial)
        {
            mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);

            if (previousFinancialId == ipmFinancial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }

        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK))
        {
            currentFinancialId = firstFinancialId;
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Regional Top Down Tab
    * @param        NONE
    * @return       NONE
    */
    private void getRegionalTopDownWrappers()
    {
        IPM_Project_Rollout__c regionalRollout = [SELECT Id, Market_Cluster_Name__c, KeyMCO__c,
                                                    (SELECT Id, Name, Financial_External_ID__c, Status__c
                                                        FROM IPM_Financials__r WHERE RecordtypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                        ORDER BY Sorting_Order__c, Financial_External_Id__c)
                                                    FROM IPM_Project_Rollout__c
                                                    WHERE IPM_Project__c =: project.IPM_Parent_Project__c
                                                    AND RecordTypeId =: REGIONAL_ROLLOUT_RECORDTYPE
                                                    AND Market_Cluster__c =: project.Market_Cluster__c Limit: IPM_ConstantUtils.MaxLimit];


        lstRolloutWrappers.add( new RolloutWrapper( regionalRollout.Market_Cluster_Name__c, regionalRollout.IPM_Financials__r) );
        
        String firstFinancialId = '';
        
        for(IPM_Financial__c financial : regionalRollout.IPM_Financials__r)
        {
            if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
            {
                firstFinancialId = financial.Id;
            }
            
            if (previousFinancialId == financial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
        
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        
        lstIpmFinancial =   [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                                FROM IPM_Financial__c
                                WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                                AND Parent_Project__c =: project.IPM_Parent_Project__c Limit: IPM_ConstantUtils.MaxLimit];
               
        For(IPM_Financial__c ipmFinancial : lstIpmFinancial)
        {
            if (ipmFinancial.Regional_Project__c == NULL)
            {
                mapConsolidatedFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
            }
            else
            {
                mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);
            }

            if (previousFinancialId == ipmFinancial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }

        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK))
        {
            currentFinancialId = firstFinancialId;
        }
     }

    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Regional Rollup Tab
    * @param        NONE
    * @return       NONE
    */
    private void getRegionalRollupWrappers()
    {
        String nonKeyLike = IPM_ConstantUtils.PERCENTAGE + IPM_ConstantUtils.FINANCIAL_NONKEY;
        List<IPM_Financial__c> lstRegionalFinancials =  [SELECT Id, Name, Financial_External_ID__c, Status__c
                                                            FROM IPM_Financial__c   
                                                            WHERE Regional_Project__c =: project.Id
                                                            AND RecordTypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                            AND (NOT Financial_External_ID__c LIKE: nonKeyLike)
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c Limit: IPM_ConstantUtils.MaxLimit];
                                                            
                                                     
        lstRolloutWrappers.add( new RolloutWrapper( project.Market_Cluster_Name__c, lstRegionalFinancials) );

        String firstFinancialId = '';
        
        For (IPM_Financial__c financial : lstRegionalFinancials)
        {
            if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK))
            {
                firstFinancialId = financial.Id;
            }
            
            if (previousFinancialId == financial.Id)
            {
                currentFinancialId = previousFinancialId;
            }
        }
        
        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        
        lstIpmFinancial =   [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                            FROM IPM_Financial__c
                            WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                            AND Parent_Project__c =: project.IPM_Parent_Project__c Limit: IPM_ConstantUtils.MaxLimit];
        
        if(!lstIpmFinancial.isEmpty())
        {
            for(IPM_Financial__c ipmFinancial : lstIpmFinancial)
            {
                if(ipmFinancial.Regional_Project__c == NULL)
                {
                    mapConsolidatedFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
                }
                else
                {
                    mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);
                }

                if (previousFinancialId == ipmFinancial.Id)
                {
                    currentFinancialId = previousFinancialId;
                }
             }
        }
        
        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK))
        {
            currentFinancialId = firstFinancialId;
        }    
    }

    /*******************************************************************************************************
    * @description  Used to getRollout Wrappers for Local My View & Top Down Tab
    * @param        NONE
    * @return       NONE
    */
    private void getLocalMyViewWrappers(){
        List<IPM_Financial__c> lstLocalFinancials = [SELECT Id, Name, Financial_External_ID__c, Status__c
                                                            FROM IPM_Financial__c
                                                            WHERE Local_Project__c =: project.Id
                                                                AND RecordtypeId =: DEFAULT_FINANCIAL_RECORDTYPE
                                                            ORDER BY Sorting_Order__c, Financial_External_Id__c Limit: IPM_ConstantUtils.MaxLimit];
        
                                             
        lstRolloutWrappers.add(
            new RolloutWrapper(
                project.IPM_Parent_Project__r.Market_Cluster_Name__c, 
                lstLocalFinancials
            )
        );

        String firstFinancialId = '';
        For (IPM_Financial__c financial : lstLocalFinancials){
            if ((firstFinancialId == NULL) || (firstFinancialId == IPM_ConstantUtils.BLANK)) {
                firstFinancialId = financial.Id;
            }
            if (previousFinancialId == financial.Id) {
                currentFinancialId = previousFinancialId;
            }
        }

        List<IPM_Financial__c> lstIpmFinancial = new List<IPM_Financial__c>();
        lstIpmFinancial = [SELECT Id, Name, Financial_External_ID__c, Status__c, Regional_Project__c, Regional_Project__r.Market_Cluster_Name__c
                                                 FROM IPM_Financial__c
                                                 WHERE RecordTypeId =: CONSOLIDATED_FINANCIAL_RECORDTYPE
                                                     AND Parent_Project__c =: project.IPM_Parent_Project__r.IPM_Parent_Project__c Limit: IPM_ConstantUtils.MaxLimit];
        
        
        if(!lstIpmFinancial.isEmpty()){
        For(IPM_Financial__c ipmFinancial : lstIpmFinancial){
            if (ipmFinancial.Regional_Project__c == NULL) {
                mapConsolidatedFinancials.put(IPM_ConstantUtils.PROJECT_SPAN_GLOBAL, ipmFinancial);
            }
            else {
                mapConsolidatedFinancials.put(ipmFinancial.Regional_Project__r.Market_Cluster_Name__c, ipmFinancial);
            }

            if (previousFinancialId == ipmFinancial.Id) {
                currentFinancialId = previousFinancialId;
            }
            }
        }
        if ((currentFinancialId == NULL) || (currentFinancialId == IPM_ConstantUtils.BLANK)){
            currentFinancialId = firstFinancialId;
        }

    }

    /*******************************************************************************************************
    * @description  Used to get Financial Business Case for currently selected Financial
    * @param        NONE
    * @return       NONE
    */
    private void getFinancials()
    {
        getRecordtypes();
        
        fieldSuffix = getFieldSuffix();
        
        String queryString = 'SELECT ';
       
        //IPM Financial
        For (String field : Schema.SObjectType.IPM_Financial__c.fields.getMap().KeySet()) {
            queryString+= field + ', ';
        }
        //IPM Financial Year
        queryString+= 'Last_Saved_By_Global__r.Name,Last_Saved_By_Regional__r.Name,Last_Saved_By_Local__r.Name, (SELECT ';
        For (String field : Schema.SObjectType.IPM_Financial_Year__c.fields.getMap().KeySet()){
            if (field != 'Id') {
                queryString+= field + ', ';
            }
        }
        
      
        queryString+= 'Id FROM IPM_Financial_Years__r ORDER BY Year__c)';
        queryString+= 'FROM IPM_Financial__c WHERE Id =: currentFinancialId FOR UPDATE'; //Added For Update to obtain exclusive access to the record
        
        List<IPM_Financial__c> LstCurrentFinancial = new List<IPM_Financial__c>();
        LstCurrentFinancial = Database.query(queryString);
                    
        if(!LstCurrentFinancial.isEmpty()){
            currentFinancial = LstCurrentFinancial[0];
         }
        mapFinancialYears = new Map<String, IPM_Financial_Year__c>();
        if (currentFinancial != NULL)
        {
            financialsInnovation = new IPM_FinancialWrapper();
            financialsCalendar = new IPM_FinancialWrapper();
            
            volumeUnit = (String) currentFinancial.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME_UNIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
           
            For (IPM_Financial_Year__c finYear : currentFinancial.IPM_Financial_Years__r){
                //Add to Map
                mapFinancialYears.put(generateMapKey(finYear.Year_Type__c, finYear.Year__c, finYear.PL_Type__c), finYear);
                
                //Innovation Years
                if (finYear.Year_Type__c == IPM_ConstantUtils.YEAR_TYPE_INNOVATION){
                    generateFinancials(finYear, financialsInnovation);
                                  
                }
                //Calendar Years
                else if (finYear.Year_Type__c == IPM_ConstantUtils.YEAR_TYPE_CALENDAR){
                    generateFinancials(finYear, financialsCalendar);
                    
               }
            }
            getCountryList();
        }
        
        
    }
    
    /*******************************************************************************************************
    * @description      Used to generate Financial Wrapper for the selected Financial Year
    * @param finYear    Selected IPM_Financial_Year__c record which needs to be processed
    * @param finWrapper Selected wrapper record which needs to be updated with the finYear values
    * @return       NONE
    */
    private void generateFinancials(IPM_Financial_Year__c finYear, IPM_FinancialWrapper finWrapper){
        //Year 0 Values
           
        if (finYear.Year__c == IPM_ConstantUtils.Y0_YEARINDEX)
        {
            finWrapper.y0ValueMarketShare = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VALUE_MARKET_SHARE + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
            finWrapper.y0Volume = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
            finWrapper.y0VolumeTons = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME_TONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
            finWrapper.y0Turnover = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_TURNOVER + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor;
            finWrapper.y0GrossProfit = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_GROSS_PROFIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor;
            finWrapper.y0Advertising = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_ADVERTISING_PROMOTIONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor;
            finWrapper.y0Profit = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_PROFIT_BEFORE_OVERHEADS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor;
            finWrapper.y0GM = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_GM_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
            finWrapper.y0AP = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_AP_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
            finWrapper.y0PBO = (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_PBO_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
                        
                        //Misaligned value differences
            if(project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL || project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT){
               
                finWrapper.y0ValueMarketShareDifference = finYear.Value_Market_Share_Difference__c;
                finWrapper.y0VolumeDifference = finYear.Volume_Difference__c * decMultFactor;
                finWrapper.y0VolumeTonsDifference = finYear.Volume_Tons_Difference__c * decMultFactor;
                finWrapper.y0TurnoverDifference = finYear.Turnover_Difference__c * decMultFactor;
                finWrapper.y0GrossProfitDifference = finYear.Gross_Profit_Difference__c * decMultFactor;
                finWrapper.y0AdvertisingDifference = finYear.Advertising_Promotions_Difference__c * decMultFactor;
                finWrapper.y0ProfitDifference = finYear.Profit_Before_Overheads_Difference__c * decMultFactor;
                finWrapper.y0GMDifference = finYear.GM_of_TO_Difference__c;
                finWrapper.y0APDifference = finYear.AP_of_TO_Difference__c;
                finWrapper.y0PBODifference = finYear.PBO_of_TO_Difference__c;
                
                //Regional and Local values to show on misalignment
                finWrapper.y0ValueMarketShareRegional = finYear.Value_Market_Share_Regional__c;
                finWrapper.y0ValueMarketShareLocal = finYear.Value_Market_Share_Local__c;
                finWrapper.y0VolumeRegional = finYear.Volume_Regional__c * decMultFactor;
                finWrapper.y0VolumeLocal = finYear.Volume_Local__c * decMultFactor;
                finWrapper.y0VolumeTonsRegional = finYear.Volume_Tons_Regional__c * decMultFactor ;
                finWrapper.y0VolumeTonsLocal = finYear.Volume_Tons_Local__c * decMultFactor;            
                finWrapper.y0TurnoverRegional = finYear.Turnover_Regional__c * decMultFactor ;
                finWrapper.y0TurnoverLocal = finYear.Turnover_Local__c * decMultFactor;           
                finWrapper.y0GrossProfitRegional = finYear.Gross_Profit_Regional__c * decMultFactor ;
                finWrapper.y0GrossProfitLocal = finYear.Gross_Profit_Local__c * decMultFactor;            
                finWrapper.y0AdvertisingRegional = finYear.Advertising_Promotions_Regional__c * decMultFactor;
                finWrapper.y0AdvertisingLocal = finYear.Advertising_Promotions_Local__c * decMultFactor;           
                finWrapper.y0ProfitRegional = finYear.Profit_Before_Overheads_Regional__c * decMultFactor ;
                finWrapper.y0ProfitLocal = finYear.Profit_Before_Overheads_Local__c * decMultFactor;           
                finWrapper.y0GMRegional = finYear.GM_of_TO_Regional__c ;
                finWrapper.y0GMLocal = finYear.GM_of_TO_Local__c;           
                finWrapper.y0APRegional = finYear.AP_of_TO_Regional__c ;
                finWrapper.y0APLocal = finYear.AP_of_TO_Local__c;           
                finWrapper.y0PBORegional = finYear.PBO_of_TO_Regional__c ;
                finWrapper.y0PBOLocal = finYear.PBO_of_TO_Local__c;
            }
        } 
        //Rest of the Year Values
        else if(Integer.valueOf(finYear.Year__c) <= sustainabilityPeriod) {
            //Gross P&L Values
            if (finYear.PL_Type__c == IPM_ConstantUtils.PL_TYPE_GROSS){
                finWrapper.lstYearNames.add(finYear.Name);
                
                //Gross PL Values to show when misaligned with Regional and Local
                finWrapper.lstGrossPLValueMarketShare.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VALUE_MARKET_SHARE + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Value_Market_Share_Regional__c, finYear.Value_Market_Share_Local__c, finYear.Value_Market_Share_Difference__c, 1));                
                finWrapper.lstGrossPLVolume.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Volume_Regional__c, finYear.Volume_Local__c, finYear.Volume_Difference__c));
                finWrapper.lstGrossPLVolumeTons.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME_TONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Volume_Tons_Regional__c, finYear.Volume_Tons_Local__c, finYear.Volume_Tons_Difference__c));
                finWrapper.lstGrossPLTurnover.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_TURNOVER + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Turnover_Regional__c, finYear.Turnover_Local__c, finYear.Turnover_Difference__c));
                finWrapper.lstGrossPLGrossProfit.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_GROSS_PROFIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Gross_Profit_Regional__c , finYear.Gross_Profit_Local__c, finYear.Gross_Profit_Difference__c));
                finWrapper.lstGrossPLAdvertising.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_ADVERTISING_PROMOTIONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Advertising_Promotions_Regional__c , finYear.Advertising_Promotions_Local__c, finYear.Advertising_Promotions_Difference__c));
                finWrapper.lstGrossPLProfit.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_PROFIT_BEFORE_OVERHEADS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Profit_Before_Overheads_Regional__c, finYear.Profit_Before_Overheads_Local__c, finYear.Profit_Before_Overheads_Difference__c));
                finWrapper.lstGrossPLGM.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_GM_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.GM_of_TO_Regional__c , finYear.GM_of_TO_Local__c, finYear.GM_of_TO_Difference__c, 1));
                finWrapper.lstGrossPLAP.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_AP_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.GM_of_TO_Regional__c , finYear.AP_of_TO_Local__c, finYear.AP_of_TO_Difference__c, 1));
                finWrapper.lstGrossPLPBO.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_PBO_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.PBO_of_TO_Regional__c , finYear.PBO_of_TO_Local__c, finYear.PBO_of_TO_Difference__c, 1));
             
            }
            //Incremental PL Values to show when misaligned with Regional and Local
            else if (finYear.PL_Type__c == IPM_ConstantUtils.PL_TYPE_INCREMENTAL) {
                finWrapper.lstIncrementalPLValueMarketShare.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VALUE_MARKET_SHARE + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Value_Market_Share_Regional__c, finYear.Value_Market_Share_Local__c, finYear.Value_Market_Share_Difference__c, 1));
                finWrapper.lstIncrementalPLVolume.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Volume_Regional__c, finYear.Volume_Local__c, finYear.Volume_Difference__c));
                finWrapper.lstIncrementalPLVolumeTons.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME_TONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Volume_Tons_Regional__c, finYear.Volume_Tons_Local__c, finYear.Volume_Tons_Difference__c));
                finWrapper.lstIncrementalPLTurnover.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_TURNOVER + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.Turnover_Regional__c, finYear.Turnover_Local__c, finYear.Turnover_Difference__c));
                finWrapper.lstIncrementalPLGrossProfit.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_GROSS_PROFIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Gross_Profit_Regional__c , finYear.Gross_Profit_Local__c, finYear.Gross_Profit_Difference__c));
                finWrapper.lstIncrementalPLAdvertising.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_ADVERTISING_PROMOTIONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Advertising_Promotions_Regional__c , finYear.Advertising_Promotions_Local__c, finYear.Advertising_Promotions_Difference__c));
                finWrapper.lstIncrementalPLProfit.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_PROFIT_BEFORE_OVERHEADS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX) * decMultFactor, finYear.Profit_Before_Overheads_Regional__c, finYear.Profit_Before_Overheads_Local__c, finYear.Profit_Before_Overheads_Difference__c));
                finWrapper.lstIncrementalPLGM.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_GM_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.GM_of_TO_Regional__c , finYear.GM_of_TO_Local__c, finYear.GM_of_TO_Difference__c, 1));
                finWrapper.lstIncrementalPLAP.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_AP_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.GM_of_TO_Regional__c , finYear.AP_of_TO_Local__c, finYear.AP_of_TO_Difference__c, 1));
                finWrapper.lstIncrementalPLPBO.add(new IPM_FinancialValueWrapper(Integer.valueOf(finYear.Year__c), (Decimal) finYear.get(IPM_ConstantUtils.FIELD_LITERAL_PBO_OF_TO + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX), finYear.PBO_of_TO_Regional__c , finYear.PBO_of_TO_Local__c, finYear.PBO_of_TO_Difference__c, 1));
                
                
            }
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to set is the misalignment should be visible on tabs
    * @param        NONE
    * @return       NONE
    */
    private void getMisalignmentVisibility()
    {
        showMisalignment = FALSE;
        
        if (project.IPMProject_Span__c != IPM_ConstantUtils.PROJECT_SPAN_GLOBAL && currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME && 
            (project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL || project.IPM_Project_Type__c == IPM_ConstantUtils.PROJECT_TYPE_ROLLOUT))
        {
            // check if it is a Regional Rollout Or Regional Orignal, Check if there are local Projects created. If yes, then only display misAlignment. 
            if(project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_REGIONAL)
            {
                if(lstLocalProjects==null || lstLocalProjects.isEmpty())
                {
                    lstLocalProjects = [Select Id from IPM_Project__c WHERE IPM_Parent_Project__c = :project.Id AND IPMProject_Span__c = :IPM_ConstantUtils.PROJECT_SPAN_LOCAL];       
                }
                
                if(!lstLocalProjects.isEmpty())
                {
                    showMisalignment = true;        
                }
            }
            else
            {
                showMisalignment = true;
            }    
        }
    }

    
    
    /*******************************************************************************************************
    * @description  Used to redirect user to the download template page
    * @param        NONE
    * @return       NONE
    */
     public PageReference CopyPasteTemplate(){
        try {
            PageReference templatePage = Page.IPM_FinancialCopyPasteGrid;
            templatePage.getParameters().put(IPM_ConstantUtils.SF_ID, project.Id);
            templatePage.setRedirect(true);
            return templatePage;
            
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_IPM_FINANCIALCOPYPASTEGRID,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            return null;
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to redirect user to the gate document section
    * @param        NONE
    * @return       NONE
    */
    public PageReference goToSection(){
        try {
            PageReference sectionPage = Page.IPM_ProjectDocumentSectionEditor;
            sectionPage.getParameters().put(IPM_ConstantUtils.SF_ID, project.Id);
            sectionPage.getParameters().put(IPM_ConstantUtils.SF_PROJ_DOC_SEC_ID, selectedDocumentSection);
            sectionPage.setRedirect(true);
            return sectionPage;
           
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_GOTOSECTION,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
            return null;
        }
    }

    /*******************************************************************************************************
    * @description  Used to change the sustainability period of the project
    * @param        NONE
    * @return       NONE
    */
    public void changeSustainabilityPeriod(){
        try{
            sustainabilityPeriodChanging = true;
            project.Sustainability_Period__c = selectedSustainabilityPeriod;
            project.Sustainability_Period_Changed__c = true;
            Database.update(project);
    
            getSustainabilityPeriod();
            getFinancials();
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_CHANGESUSTAINABILITY,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            //errorMessage = ex.getMessage() + '\n' + ex.getStackTraceString();
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }

    /*******************************************************************************************************
    * @description  Used to check if Sustainability Period for the project has changed
    * @param        NONE
    * @return       NONE
    */
    public void checkSustainabilityPeriodChanged(){
        try {
             getSustainabilityPeriod();
             getFinancials();
            
            if(currentFinancial.Project_Sustainability_Period__c == selectedSustainabilityPeriod) {
                sustainabilityPeriodChanging = false;
            }
            
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_CHECKSUSTAINABILITY,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            //errorMessage = ex.getMessage() + '\n' + ex.getStackTraceString();
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }

    /*******************************************************************************************************
    * @description  Used to refresh the financials for the current tab
    * @param        NONE
    * @return       NONE
    */
    public void refreshFinancials(){
        try {
            getFinancials();
            isEditMode = FALSE;
            
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_REFRESHFINANCIALS,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }

    /*******************************************************************************************************
    * @description  Used to refresh the financials for tab change
    * @param        NONE
    * @return       NONE
    */
    public void changeTabs(){
        try {
            getRolloutWrappers();
            getFinancials();
            getMisalignmentVisibility();
            isEditMode = FALSE;
            
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_CHANGETABS,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to edit the current Financials
    * @param        NONE
    * @return       NONE
    */
    public void editFinancials() {
        try{
            isEditMode = true;
           
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                   IPM_ConstantUtils.EXCEPTION_EDITFINANCIALS,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to validate and save the current Financials
    * @param        NONE
    * @return       NONE
    */
    public void saveFinancials() {
               try {
            lstUpdateFinancials = new List<IPM_Financial_Year__c>();
            milestoneFinanceDataValidationMessage = '';
            Boolean isCalendarValidationFailed = false;
            Boolean isInnovationValidationFailed = false;
            isValidationError = false;
            isEditMode = false;
            isy0TurnoverInvalid = false;
            isy0ProfitInvalid = false;
            isy0GrossProfitInvalid = false;
            isValidationFailed = false;
            isCalendarValidationFailed = validateCalendarFinancialRecords(financialsCalendar, IPM_ConstantUtils.YEAR_TYPE_CALENDAR);
            isInnovationValidationFailed = validateInnovationFinancialRecords(financialsInnovation, IPM_ConstantUtils.YEAR_TYPE_INNOVATION);
            if(isCalendarValidationFailed || isInnovationValidationFailed){
                isEditMode = true;
                isValidationError = true;
                validationErrorMessage = IPM_ConstantUtils.INVALID_DATA_TO_SAVE;                                
            }else{
                isEditMode = false;
               //DO NOT CHANGE the order - Calendar years need to be saved first before Innovation Years to ensure Volume Units get saved appropriately
                saveFinancialRecords(financialsCalendar, IPM_ConstantUtils.YEAR_TYPE_CALENDAR);
                saveFinancialRecords(financialsInnovation, IPM_ConstantUtils.YEAR_TYPE_INNOVATION);
    
                //Update Financial Year Records
                if (lstUpdateFinancials!=null && !lstUpdateFinancials.isEmpty()) {
                    update lstUpdateFinancials;
                }
                //Update Financial Record
                currentFinancial.Status__c = IPM_ConstantUtils.STATUS_IN_PROGRESS;
                currentFinancial.put(IPM_ConstantUtils.FIELD_LITERAL_LAST_SAVED + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, System.now());
                currentFinancial.put(IPM_ConstantUtils.FIELD_LITERAL_LAST_SAVED_BY + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, UserInfo.getUserId());
                Database.update(currentFinancial);
                getRolloutWrappers(currentFinancialId);
                getFinancials();
                    
            }                   
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_SAVEFINANCIALS,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            //errorMessage = ex.getMessage() + '\n' + ex.getStackTraceString();
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }
    
        /*******************************************************************************************************
    * @description              Used to validate the financial record values entered to save
    * @param finWrapper         Used to process the passed financial wrapper(financialsCalendar or financialsInnovation)
    * @param yearType       Used to process the passed financial wrapper for the passed year type
    * @return                   Boolean value says if the validation is failed or not
    */
    private Boolean validateInnovationFinancialRecords(IPM_FinancialWrapper finWrapper, String yearType){
        isValidationFailed = false;
        //Validate Innovation Year cell data
        if(yearType == IPM_ConstantUtils.YEAR_TYPE_INNOVATION){
                validateY0Turnover(finWrapper.y0Turnover);
                
                //Validate Gross Turnover values 
                validateGrossTurnover(finWrapper.lstGrossPLTurnover);

                //No validation needed for Incremental TO, since it could be zero or even negative              
                validateIncrementalTurnover(finWrapper.lstIncrementalPLTurnover); // it is not showing incremental turn over
                //Validate Y0 Gross Profit values
                validateY0GrossProfit(finWrapper.y0GrossProfit);
                
                //Validate Gross Profit values
                validateGrossProfit(finWrapper.lstGrossPLGrossProfit);

                //Validate Incremental Profit values
                validateIncrementalProfit(finWrapper.lstIncrementalPLGrossProfit);

                //Validate Y0 PBO value
                validateY0PBO(finWrapper.y0Profit);
                
                //Validate Gross PBO values
                validateGrossPBO(finWrapper.lstGrossPLProfit);
                
                //Validate Incremental PBO values
                validateIncrementalPBO(finWrapper.lstIncrementalPLProfit);
                validateInnovationTurnOver(finWrapper.lstGrossPLTurnover,finWrapper.lstIncrementalPLTurnover);
                
        }
        return isValidationFailed;
    }   
                
    /*******************************************************************************************************
    * @description              Used to validate the financial record values entered to save
    * @param finWrapper         Used to process the passed financial wrapper(financialsCalendar or financialsInnovation)
    * @param yearType       Used to process the passed financial wrapper for the passed year type
    * @return                   Boolean value says if the validation is failed or not
    */
    private Boolean validateCalendarFinancialRecords(IPM_FinancialWrapper finWrapper, String yearType){
        isValidationFailed = false;
        //Validate Calendar Year cell data
        if(yearType == IPM_ConstantUtils.YEAR_TYPE_CALENDAR){
                
                //Validate Gross Turnover values 
                Boolean isValidateGrossTurnoverFailed = validateGrossTurnover(finWrapper.lstGrossPLTurnover);
                
                //validateForGateSubmission
                Boolean isValidateIncrementalTurnoverFailed = validateIncrementalTurnover(finWrapper.lstIncrementalPLTurnover); 
                Boolean isValidateGrossProfitFailed = validateGrossProfit(finWrapper.lstGrossPLGrossProfit);
                Boolean isValidateIncrementalProfitFailed = validateIncrementalProfit(finWrapper.lstIncrementalPLGrossProfit);
                Boolean isValidateGrossPBOFailed = validateGrossPBO(finWrapper.lstGrossPLProfit);
                Boolean isValidateIncrementalPBOFailed = validateIncrementalPBO(finWrapper.lstIncrementalPLProfit);
                Boolean isValidateCalendarTurnOverFailed=validateCalendarTurnOver(finWrapper.lstGrossPLTurnover,finWrapper.lstIncrementalPLTurnover);
                if(isValidateCalendarTurnOverFailed && isValidateIncrementalTurnoverFailed && isValidateGrossProfitFailed && isValidateIncrementalProfitFailed && isValidateGrossPBOFailed && isValidateIncrementalPBOFailed){
                        currentFinancial.isGateSubmissionDue__c = true;
                }
                
                
        }        
                    return isValidationFailed;
    }
//DEF2339 & DEF2344 fix start
    private Boolean validateMilestoneAndFinacialData() {
        Date milestoneDate = getProjectMilestoneDate();
        Boolean result = milestoneDate!=null && 
                         milestoneDate < System.now().addDays(14) && 
                         (validateFinacialData(financialsCalendar) || validateFinacialData(financialsInnovation));
        return  result;
    }
    private Boolean validateFinacialData( IPM_FinancialWrapper finWrapper ) {
        Boolean result = 
                        //Gross PBO
                         validateFinacialDataValue(finWrapper.lstGrossPLProfit) ||    
                        //Incremental PBO
                            validateFinacialDataValue(finWrapper.lstIncrementalPLProfit)  ||     
                        //Gross Turnover
                            validateFinacialDataValue(finWrapper.lstIncrementalPLTurnover)   ||    
                        //Incremental Turnover
                            validateFinacialDataValue(finWrapper.lstGrossPLTurnover)  ||     
                        //Gross Gross
                            validateFinacialDataValue(finWrapper.lstGrossPLTurnover)   ||    
                        //Incremental Gross
                            validateFinacialDataValue(finWrapper.lstIncrementalPLGrossProfit) ;
        return result;
    }
    private boolean validateFinacialDataValue(List<IPM_FinancialValueWrapper> lstGrossPLGrossProfit){
        Boolean isInvalid = false;
        for(IPM_FinancialValueWrapper valueWrapper: lstGrossPLGrossProfit){
            if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){
                isInvalid = true;
                break;
            }
        } 
        return isInvalid;
    }
    
private Date getProjectMilestoneDate(){
        List<String> milestoneNames = new List<String>{IPM_ConstantUtils.CHARTER_GATE_APPROVAL_MILESTONE,IPM_ConstantUtils.CONTRACT_GATE_APPROVAL_MILESTONE,IPM_ConstantUtils.MARKET_READY_GATE_APPROVAL_MILESTONE};
        List<IPM_Milestone__c> milestones = [Select Id,IPM_Name__c,IPM_Active__c, IPM_Due_Date__c from IPM_Milestone__c where IPM_Project__c =: project.Id and IPM_Active__c = true and IPM_Due_Date__c != null and IPM_Name__c in: milestoneNames];
        Date projectMilestoneDate = null;
        for(IPM_Milestone__c milestone :milestones){
            if(milestone.IPM_Name__c==IPM_ConstantUtils.CHARTER_GATE_APPROVAL_MILESTONE && project.IPM_Phase__c==IPM_ConstantUtils.PHASE_IDEAS) {
                projectMilestoneDate = milestone.IPM_Due_Date__c;
                break;
            } else if(milestone.IPM_Name__c==IPM_ConstantUtils.CONTRACT_GATE_APPROVAL_MILESTONE && project.IPM_Phase__c==IPM_ConstantUtils.PHASE_FEASIBILITY) {
                projectMilestoneDate = milestone.IPM_Due_Date__c;
                break;
            } else if(milestone.IPM_Name__c==IPM_ConstantUtils.MARKET_READY_GATE_APPROVAL_MILESTONE && project.IPM_Phase__c==IPM_ConstantUtils.PHASE_CAPABILITY) {
                projectMilestoneDate = milestone.IPM_Due_Date__c;
                break;
            }
        }
        return projectMilestoneDate;
    }       
    //DEF2339 & DEF2344 fix end
    /*******************************************************************************************************
    * @description              Used to validate the financial Y0Turnover
    * @param y0Turnover         Used to process the passed y0Turnover
    * @return                   Boolean value says if the validation is failed or not
    */
    public void validateY0Turnover(Decimal y0Turnover){
        isy0TurnoverInvalid = false;
        isValidationFailed = false;
        //Validate Y0 Turnover value   
        if(y0Turnover == IPM_ConstantUtils.INVALID_VALUE){
            isy0TurnoverInvalid = true;
                isValidationFailed = true;            
        }
    } 
    
    /*******************************************************************************************************
    * @description                      Used to validate the financial GrossPLTurnover
    * @param lstGrossPLTurnover     Used to process the passed lstGrossPLTurnover
    * @return                           Boolean value says if the validation is failed or not
    */
    public boolean validateGrossTurnover(List<IPM_FinancialValueWrapper> lstGrossPLTurnover){
                //Validate Gross Turnover values.
        for(IPM_FinancialValueWrapper valueWrapper: lstGrossPLTurnover){
            valueWrapper.isValueInvalid = false;
                if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){
                    valueWrapper.isValueInvalid = true;
                    isValidationFailed = true;
                }            
        }
        return isValidationFailed;
    }
    
    /*******************************************************************************************************
    * @description                              Used to Validate Incremental Turnover values
    * @param lstIncrementalPLTurnover   Used to process the passed lstIncrementalPLTurnover
    * @return                                   Boolean value says if the validation is failed or not
    */
    public boolean validateIncrementalTurnover(List<IPM_FinancialValueWrapper> lstIncrementalPLTurnover){
                //Validate Incremental Turnover values
                Boolean isInvalid = false;
        for(IPM_FinancialValueWrapper valueWrapper: lstIncrementalPLTurnover){
            valueWrapper.isValueInvalid = false;
            isInvalid = false;
            if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){                
                valueWrapper.isValueInvalid = true;
                //isValidationFailed = true;
                isInvalid = true;
            }            
        }
        return isInvalid;
    }
    
    /*******************************************************************************************************
    * @description         Used to validate the financial y0GrossProfit
    * @param y0GrossProfit         Used to process the passed y0GrossProfit
    * @return              Boolean value says if the validation is failed or not
    */
    public void validateY0GrossProfit(Decimal y0GrossProfit){
        //Validate Y0GrossProfit value    
        if(y0GrossProfit == IPM_ConstantUtils.INVALID_VALUE){            
            isy0GrossProfitInvalid = true;
            isValidationFailed = true;
        }
    }
    
    /*******************************************************************************************************
    * @description                              Used to Validate Gross Profit values
    * @param lstGrossPLGrossProfit      Used to process the passed lstGrossPLGrossProfit
    * @return                                   Boolean value says if the validation is failed or not
    */
    public boolean validateGrossProfit(List<IPM_FinancialValueWrapper> lstGrossPLGrossProfit){
        //Validate Gross Profit values
        Boolean isInvalid = false;
        for(IPM_FinancialValueWrapper valueWrapper: lstGrossPLGrossProfit){
            valueWrapper.isValueInvalid = false;
            isInvalid = false;
            if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){
                valueWrapper.isValueInvalid = true;
                isValidationFailed = true;
                isInvalid = true;
            }
        } 
        return isInvalid;
    }
        
    /*******************************************************************************************************
    * @description                              Used to Validate Gross Profit values
    * @param lstIncrementalPLGrossProfit        Used to process the passed lstIncrementalPLGrossProfit
    * @return                                   Boolean value says if the validation is failed or not
    */
    public boolean validateIncrementalProfit(List<IPM_FinancialValueWrapper> lstIncrementalPLGrossProfit){
        //Validate Incremental Profit values
        Boolean isInvalid = false;
        for(IPM_FinancialValueWrapper valueWrapper: lstIncrementalPLGrossProfit){
            valueWrapper.isValueInvalid = false;
            isInvalid = false;
            if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){
                valueWrapper.isValueInvalid = true;
                isValidationFailed = true;
                isInvalid = true;
            }
        } 
        return isInvalid;
    }
    
    /*******************************************************************************************************
    * @description         Used to validate the financial y0Profit
    * @param y0Profit         Used to process the passed y0Profit
    * @return              Boolean value says if the validation is failed or not
    */
    public void validateY0PBO(Decimal y0Profit){
        //Validate Y0 PBO value    
        if(y0Profit == IPM_ConstantUtils.INVALID_VALUE){
            isy0ProfitInvalid = true;
            isValidationFailed = true;
        }
    }
    
    /*******************************************************************************************************
    * @description                              Used to Validate Gross Profit values
    * @param lstGrossPLProfit   Used to process the passed lstGrossPLProfit
    * @return                                   Boolean value says if the validation is failed or not
    */
    public boolean validateGrossPBO(List<IPM_FinancialValueWrapper> lstGrossPLProfit){
        //Validate Gross Profit values
        Boolean isInvalid = false;
        for(IPM_FinancialValueWrapper valueWrapper: lstGrossPLProfit){
            valueWrapper.isValueInvalid = false;
            isInvalid = false;
            if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){
                valueWrapper.isValueInvalid = true;
                isValidationFailed = true;
                isInvalid = true;
            }
        } 
        return isInvalid;
    }
    
    /*******************************************************************************************************
    * @description                              Used to Validate Gross Profit values
    * @param lstIncrementalPLProfit     Used to process the passed lstIncrementalPLProfit
    * @return                                   Boolean value says if the validation is failed or not
    */
    public boolean validateIncrementalPBO(List<IPM_FinancialValueWrapper> lstIncrementalPLProfit){
        //Validate Incremental Profit values
        Boolean isInvalid = false;
        for(IPM_FinancialValueWrapper valueWrapper: lstIncrementalPLProfit){
            valueWrapper.isValueInvalid = false;
            isInvalid = false;
            if(valueWrapper.value == IPM_ConstantUtils.INVALID_VALUE){
                valueWrapper.isValueInvalid = true;
                isValidationFailed = true;
                isInvalid = true;
            }
        } 
        return isInvalid;
    }
         
    
    /*******************************************************************************************************
    * @description          Used to save the current Financial Records
    * @param finWrapper     Used to process the passed financial wrapper
    * @param yearType       Used to process the passed financial wrapper for the passed year type
    * @return               NONE
    */
    private void saveFinancialRecords(IPM_FinancialWrapper finWrapper, String yearType){
        mapFinancialYearRecords = new Map<String, IPM_Financial_Year__c>();
        
        //Year 0
        IPM_Financial_Year__c y0FinancialYear = mapFinancialYears.get(generateMapKey(yearType, IPM_ConstantUtils.Y0_YEARINDEX, null));
        
        y0FinancialYear.put(IPM_ConstantUtils.FIELD_LITERAL_VALUE_MARKET_SHARE + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, finWrapper.y0ValueMarketShare);
        y0FinancialYear.put(IPM_ConstantUtils.FIELD_LITERAL_VOLUME + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, finWrapper.y0Volume);
        y0FinancialYear.put(IPM_ConstantUtils.FIELD_LITERAL_TURNOVER + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, finWrapper.y0Turnover);
        y0FinancialYear.put(IPM_ConstantUtils.FIELD_LITERAL_GROSS_PROFIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, finWrapper.y0GrossProfit);
        y0FinancialYear.put(IPM_ConstantUtils.FIELD_LITERAL_ADVERTISING_PROMOTIONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, finWrapper.y0Advertising);
        y0FinancialYear.put(IPM_ConstantUtils.FIELD_LITERAL_PROFIT_BEFORE_OVERHEADS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX, finWrapper.y0Profit);

        lstUpdateFinancials.add(y0FinancialYear);
        
        //GROSS P&L
        processFinancialYearRecords(finWrapper.lstGrossPLValueMarketShare, yearType, IPM_ConstantUtils.PL_TYPE_GROSS, IPM_ConstantUtils.FIELD_LITERAL_VALUE_MARKET_SHARE + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstGrossPLVolume, yearType, IPM_ConstantUtils.PL_TYPE_GROSS, IPM_ConstantUtils.FIELD_LITERAL_VOLUME + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstGrossPLTurnover, yearType, IPM_ConstantUtils.PL_TYPE_GROSS, IPM_ConstantUtils.FIELD_LITERAL_TURNOVER + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstGrossPLGrossProfit, yearType, IPM_ConstantUtils.PL_TYPE_GROSS, IPM_ConstantUtils.FIELD_LITERAL_GROSS_PROFIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstGrossPLAdvertising, yearType, IPM_ConstantUtils.PL_TYPE_GROSS, IPM_ConstantUtils.FIELD_LITERAL_ADVERTISING_PROMOTIONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstGrossPLProfit, yearType, IPM_ConstantUtils.PL_TYPE_GROSS, IPM_ConstantUtils.FIELD_LITERAL_PROFIT_BEFORE_OVERHEADS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);

        //INCREMENTAL P&L
        processFinancialYearRecords(finWrapper.lstIncrementalPLValueMarketShare, yearType, IPM_ConstantUtils.PL_TYPE_INCREMENTAL, IPM_ConstantUtils.FIELD_LITERAL_VALUE_MARKET_SHARE + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstIncrementalPLVolume, yearType, IPM_ConstantUtils.PL_TYPE_INCREMENTAL, IPM_ConstantUtils.FIELD_LITERAL_VOLUME + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstIncrementalPLTurnover, yearType, IPM_ConstantUtils.PL_TYPE_INCREMENTAL, IPM_ConstantUtils.FIELD_LITERAL_TURNOVER + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstIncrementalPLGrossProfit, yearType, IPM_ConstantUtils.PL_TYPE_INCREMENTAL, IPM_ConstantUtils.FIELD_LITERAL_GROSS_PROFIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstIncrementalPLAdvertising, yearType, IPM_ConstantUtils.PL_TYPE_INCREMENTAL, IPM_ConstantUtils.FIELD_LITERAL_ADVERTISING_PROMOTIONS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
        processFinancialYearRecords(finWrapper.lstIncrementalPLProfit, yearType, IPM_ConstantUtils.PL_TYPE_INCREMENTAL, IPM_ConstantUtils.FIELD_LITERAL_PROFIT_BEFORE_OVERHEADS + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);

        //Add all the objects
        if (mapFinancialYearRecords!=null && !mapFinancialYearRecords.isEmpty()){
            For(IPM_Financial_Year__c obj : mapFinancialYearRecords.values()) {
                lstUpdateFinancials.add(obj);
            }
        }
    }

    /*******************************************************************************************************
    * @description              Used to process the individual Financial Year record
    * @param lstValueWrapper    The list Wrapper of the various attributes managed for the current business case
    * @param yearType           Used to process the passed financial wrapper for the passed year type
    * @param plType             Used to process the passed financial wrapper for the passed P&L type
    * @param fieldName          Used to manage the appropriate field for which the data should be processed
    * @return                   NONE
    */
    private void processFinancialYearRecords(List<IPM_FinancialValueWrapper> lstValueWrapper, String yearType, String plType, String fieldName)
    {
        For(IPM_FinancialValueWrapper valueWrapper : lstValueWrapper)
        {
            IPM_Financial_Year__c fyRecord = mapFinancialYears.get(generateMapKey(yearType, IPM_ConstantUtils.BLANK + valueWrapper.index, plType));
            String recordId = fyRecord.Id;
            if (mapFinancialYearRecords.containsKey(recordId)) {
                fyRecord = mapFinancialYearRecords.get(recordId);
            }
            else {
                mapFinancialYearRecords.put(recordId, fyRecord);
            }
            
            fyRecord.put(fieldName, valueWrapper.value);
        }
    }       
    
    /*******************************************************************************************************
    * @description  Used to refresh the financial numbers from Local numbers
    * @param        NONE
    * @return       NONE
    */
    public void refreshFromLocal() {
        try{
            currentFinancial.Copy_Local_to_Regional__c = true;
            Database.update(currentFinancial);
            getFinancials();
        } catch (Exception eX) {
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_REFRESHFROMLOCAL,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
          }
    }

    /*******************************************************************************************************
    * @description  Used to refresh the financial numbers from Regional numbers
    * @param        NONE
    * @return       NONE
    */
    public void refreshFromRegional() {
        try{
            currentFinancial.Copy_Regional_to_Local__c = true;
            Database.update(currentFinancial);
            getFinancials();
        } catch (Exception eX) {
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                    IPM_ConstantUtils.EXCEPTION_REFRESHFROMREGIONAL,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    }
    
    /*******************************************************************************************************
    * @description  Used to generate the suffix to be used in referencing appropriate fields on the 
    *               Financial and Financial Year object
    * @param        NONE
    * @return       NONE
    */
    private String getFieldSuffix()
    {
        //Global Project
        if(project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL)
        {
            if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_GLOBAL)
            {
                //My View
                if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME)
                {
                    return IPM_ConstantUtils.PROJECT_SPAN_GLOBAL;
                } 
                else if (currentTab == IPM_ConstantUtils.TAB_ROLLUP_NAME)
                {
                    return IPM_ConstantUtils.PROJECT_SPAN_REGIONAL;
                }
            }
            else if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_REGIONAL)
            {
                
                if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME)
                {
                    // If Project Type is Regional Original, Use Global values
                    if(project.IPM_Phase__c == IPM_ConstantUtils.PHASE_IDEAS && project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_ORIGINAL)
                    {
                        return IPM_ConstantUtils.PROJECT_SPAN_GLOBAL;
                    }   
                    return IPM_ConstantUtils.PROJECT_SPAN_REGIONAL;
                }
                else if (currentTab == IPM_ConstantUtils.TAB_TOPDOWN_NAME)
                {
                    return IPM_ConstantUtils.PROJECT_SPAN_GLOBAL;
                }
                else if (currentTab == IPM_ConstantUtils.TAB_ROLLUP_NAME)
                {
                    return IPM_ConstantUtils.PROJECT_SPAN_LOCAL;
                }
            }
            else if (project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_LOCAL)
            {
                if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME)
                {
                    return IPM_ConstantUtils.PROJECT_SPAN_LOCAL;
                }
                else if (currentTab == IPM_ConstantUtils.TAB_TOPDOWN_NAME)
                {
                    return IPM_ConstantUtils.PROJECT_SPAN_REGIONAL;
                }
            }    
        } 
        else if(project.IPM_SourceProjectType__c == IPM_ConstantUtils.PROJECT_TYPE_OPERATIONAL)
        {
           
            if (currentTab == IPM_ConstantUtils.TAB_MYVIEW_NAME )
            {
                return IPM_ConstantUtils.PROJECT_SPAN_GLOBAL;
            }
        }
        return null;
    }
    
    /*******************************************************************************************************
    * @description      Used to generate a unique key for the map of Financial Years for the 
    *                   current Financial
    * @param yearType   Year Type for the IPM_Financial_Year__c record
    * @param index      Year index for the IPM_Financial_Year__c record
    * @param plType     P&L Type for the IPM_Financial_Year__c record
    * @return           NONE
    */
    private String generateMapKey(String yearType, String index, String plType){
        return yearType + '__' + index + '__' + plType;
    }
    
    /*******************************************************************************************************
    * @description      Used to associate Financials with Countries 
    * @param countries   countries to be associated to the corresponding financial records
    * @return           NONE
    
    public void processFinancialCountries(List<IPM_Country__c> lstCountries){
     commented as part of SOnar fix
    }*/
    
    /*******************************************************************************************************
    * @description  Used to wrap region and financials together. Used wrapper instead of standard object 
    *               (Rollout) because for regional & local projects the concerned object is IPM_Project__c 
    *               and not IPM_Project_Rollout__c
    */
    public class RolloutWrapper{
        public String regionName {get; set;}
        public List<IPM_Financial__c> lstFinancials {get; set;}
        
        public RolloutWrapper(String regionName, List<IPM_Financial__c> lstFinancials){
            this.regionName = regionName;
            this.lstFinancials = lstFinancials;
            
        }
    }
    
    public boolean validateCalendarTurnOver(List<IPM_FinancialValueWrapper> lstGrossPLTurnover,List<IPM_FinancialValueWrapper> lstIncrementalPLTurnover){
                //Validate Turnover values.
        //isValidationFailed=false;
        Boolean isValidWrapperFailed=false;
        for(IPM_FinancialValueWrapper valueWrapperGross: lstGrossPLTurnover){
            for(IPM_FinancialValueWrapper valueWrapperIncremental: lstIncrementalPLTurnover){
               valueWrapperGross.isValueInvalid = false;
               valueWrapperIncremental.isValueInvalid = false;
            
               if(valueWrapperGross.index==valueWrapperIncremental.index && valueWrapperGross.Value<valueWrapperIncremental.Value){
                               isValidWrapperFailed=true;
                             
     
                                    }
                 if(isValidWrapperFailed){
                  valueWrapperGross.isValueInvalid = true;
                    valueWrapperIncremental.isValueInvalid = true;
                    isValidationFailed = true;
            
                                         
                }   
                 
             }            
        }
        return isValidationFailed;
    }
    
      public boolean validateInnovationTurnOver(List<IPM_FinancialValueWrapper> lstGrossPLTurnover,List<IPM_FinancialValueWrapper> lstIncrementalPLTurnover){
                //Validate Turnover values.
        //isValidationFailed=false;
        Boolean isValidWrapperFailed=false;
        
        for(IPM_FinancialValueWrapper valueWrapperGross: lstGrossPLTurnover){
            for(IPM_FinancialValueWrapper valueWrapperIncremental: lstIncrementalPLTurnover){
               valueWrapperGross.isValueInvalid = false;
               valueWrapperIncremental.isValueInvalid = false;
              
               if(valueWrapperGross.index==valueWrapperIncremental.index && valueWrapperGross.Value<valueWrapperIncremental.Value){
                       isValidWrapperFailed=true;
                        
                     }
               
                 if(isValidWrapperFailed){
                  valueWrapperGross.isValueInvalid = true;
                    valueWrapperIncremental.isValueInvalid = true;
                    isValidationFailed = true;
            
                                         
                }   
                
                 
                   
             }            
        }
        return isValidationFailed;
    }

        //-------------- CURRENCY RELATED CHANGES ENDS HERE ------------------
    public pageReference loadCurrencyPage(){
        pageReference pg = new pageReference('/apex/IPM_Financial_Currency?id='+ project.id);
        return pg;
    }
    
    /*
        @description - Query all the currency data and build a map so that when currecy is changed, respective exchange rate can be applied
        @by - Sanjay Singh
        @date - 14/10/2015
        */
    
    String[] currencies = new String[]{};
    public decimal decMultFactor = 1;
    public decimal exRate{get;set;}
    map<string,decimal> mapCurrency;    
    
    public List<SelectOption> getItems() {
            list<IPM_Exchange_Rate__c> lstCurrency = [SELECT Currency_Code__c,Exchange_Rate__c FROM IPM_Exchange_Rate__c order by Currency_Code__c limit 10000];
            List<SelectOption> options = new List<SelectOption>();
                mapCurrency = new map<string,decimal>();
            //populate picklist with currency codes
            for(IPM_Exchange_Rate__c curr: lstCurrency){
                options.add(new SelectOption(curr.Currency_Code__c,curr.Currency_Code__c));
                mapCurrency.put(curr.Currency_Code__c, curr.Exchange_Rate__c);
            }
            return options;
        }

        public String selectedCurrency
        {
            get
            {
               if(selectedCurrency==null){
               selectedCurrency='EUR';
               }
               return selectedCurrency;
            }
        set;
        }
                
        public pageReference applyRate(){
            if (selectedCurrency!=null){
                if (mapCurrency.containsKey(selectedCurrency)){
                    exrate = mapCurrency.get(selectedCurrency);
                    decMultFactor = exrate; 
                }else{
                    decMultFactor = 1; //
                    exrate = 1;
                }
                                /*Instead of calling everytime on list change, making it conditional in below method*/
                getFinancials();
                ///getFinancialsPartial();
            }
            return null;
        }
    
    /*This methid is called every time currency is changed on IPM_Financial_Currency page*/
    /* DO NOT DELETE - KEPT FOR PERFORMANCE CHECK
    private void getFinancialsPartial(){
        if (currentFinancial != NULL){
            financialsInnovation = new IPM_FinancialWrapper();
            financialsCalendar = new IPM_FinancialWrapper();
            
            volumeUnit = (String) currentFinancial.get(IPM_ConstantUtils.FIELD_LITERAL_VOLUME_UNIT + fieldSuffix + IPM_ConstantUtils.CUSTOM_FIELD_SUFFIX);
            
            For (IPM_Financial_Year__c finYear : currentFinancial.IPM_Financial_Years__r){
                //Add to Map
                mapFinancialYears.put(generateMapKey(finYear.Year_Type__c, finYear.Year__c, finYear.PL_Type__c), finYear);
                
                //Innovation Years
                if (finYear.Year_Type__c == IPM_ConstantUtils.YEAR_TYPE_INNOVATION){
                    generateFinancials(finYear, financialsInnovation);
                                  
                }
                //Calendar Years
                else if (finYear.Year_Type__c == IPM_ConstantUtils.YEAR_TYPE_CALENDAR){
                    generateFinancials(finYear, financialsCalendar);
                    
               }
            }
           
        }else{
            //When page is loaded [currentFinancial] has all the data so no need to query every time currency is changed
            getFinancials();
        }
    }*/
    
    /*public pageReference goBacktoFin(){
        pageReference ref = new pageReference('/apex/IPM_Financial?id='+projectId);
        return ref;
    }*/
    //-------------- CURRENCY RELATED CHANGES ENDS HERE ------------------
        
    
    
    
    
/*******************************************************************************************************
    * @description  Used to update MisAligned_Confirmed_By_Finance_Leader__c flag
    * @param        NONE
    * @return       NONE
    */
    public void updateMisalignmentByFinanceLeader() {
        try{
            if(project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_LOCAL) {
                localRolloutProject.MisAligned_Confirmed_By_Finance_Leader__c = true;
                showMisalignedConfirmbtn = true;  
                update localRolloutProject;
                setMisalignedValue();
            } else if(project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_REGIONAL || project.IPMProject_Span__c == IPM_ConstantUtils.PROJECT_SPAN_GLOBAL){
                mcoCountryRolloutPlan.MisAligned_Confirmed_By_Finance_Leader__c =true;  
                showMisalignedConfirmbtn = true;          
                update mcoCountryRolloutPlan;
                setMisalignedValue();
            }
        } catch (Exception eX){
            ExceptionLoggingHelper.createErrorLog(UserInfo.getUserId(),CLASS_NAME,
                   IPM_ConstantUtils.EXCEPTION_EDITFINANCIALS,ex.getMessage(),ex, IPM_ConstantUtils.ERROR, null, null, null,IPM_ConstantUtils.IPM_NG_APPLICATION); 
            isError = true;
            errorMessage = String.valueOf(new ApexPages.message(ApexPages.severity.INFO,Label.IPM_PLEASE_CONTACT_ADMINISTRATOR));
        }
    } 
    
    
}