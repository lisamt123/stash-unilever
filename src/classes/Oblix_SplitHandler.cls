public with sharing class Oblix_SplitHandler implements ITrigger {
    
    public Oblix_SplitHandler() {    
    }
    
    List<Oblix_SOW_Projects__c> lstProjectSplits = new List<Oblix_SOW_Projects__c>();
    List<Oblix_SOW_Projects__c> lstProjectSplitsOld =  new List<Oblix_SOW_Projects__c>();
    @testVisible
    boolean triggerShouldExecute = true;
    /**
     * bulkBefore
     *
     * This method is called prior to execution of a BEFORE trigger. Use this to cache
     * any data required into maps prior execution of the trigger.
     */
    public void bulkBefore()
    {   
        System.debug('Entering Oblix_ProjectHandler.bulkBefore'); 
    }
    
    public void bulkAfter()
    {
         if(Trigger.isInsert) {
                lstProjectSplits = Oblix_TR05SOWSplitProjectAvoid.retrieveProjects(Trigger.New);
                
         }
        if(Trigger.isUpdate) {
                lstProjectSplits = Oblix_TR05SOWSplitProjectAvoid.retrieveProjects(Trigger.New);
                lstProjectSplitsOld = Oblix_TR05SOWSplitProjectAvoid.retrieveProjects(Trigger.Old); 
        }
         if(Trigger.isDelete) {
                lstProjectSplits = Oblix_TR05SOWSplitProjectAvoid.retrieveProjects(Trigger.Old);
        }
       
    }
        
        
    public void beforeInsert(SObject so)
    {
        return;
    }
    
    public void beforeUpdate(SObject oldSo, SObject so)
    { 
    return;
    }
     

    public void beforeDelete(SObject so)
    {
    return;
    }
    
    public void afterInsert(SObject so) 
    {
        Oblix_TR05SOWSplitProjectAvoid.SOWSplitProjectAvoid((Oblix_Marketing_SOW_Project_Splits__c) so, Trigger.New, lstProjectSplits);
        //Oblix_TR05SOWSplitProjectAvoid.UpdateProjectWhenisChanged((Oblix_Marketing_SOW_Project_Splits__c) so, Trigger.New, lstProjectSplits, Trigger.Old, lstProjectSplitsOld);
    }
    
    public void afterUpdate(SObject oldSo, SObject so)
    {
        
        Oblix_TR05SOWSplitProjectAvoid.UpdateProjectWhenisChanged((Oblix_Marketing_SOW_Project_Splits__c) so, Trigger.New, lstProjectSplits, Trigger.Old, lstProjectSplitsOld);
    }
    
    public void afterDelete(SObject so)
    {
        Oblix_TR05SOWSplitProjectAvoid.SOWSplitProjectAvoid((Oblix_Marketing_SOW_Project_Splits__c) so, Trigger.Old, lstProjectSplits);
        //Oblix_TR05SOWSplitProjectAvoid.UpdateProjectWhenisChanged((Oblix_Marketing_SOW_Project_Splits__c) so, Trigger.New, lstProjectSplits, Trigger.Old, lstProjectSplitsOld);   
    }
    
    /**
     * andFinally
     *
     * This method is called once all records have been processed by the trigger. Use this 
     * method to accomplish any final operations such as creation or updates of other records.
     */
    public void andFinally()
    {
        System.debug('Entering FAU_ProgramHandler.andFinally');
        if(triggerShouldExecute){
            upsert lstProjectSplits;
            if(trigger.isUpdate){
                upsert lstProjectSplitsOld;
            }
            
        }
        System.debug('Exiting Oblix_ProjectHandler.andFinally');
    }
}