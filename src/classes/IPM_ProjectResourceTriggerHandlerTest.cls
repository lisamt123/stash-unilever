/*******************************************************
* @Description: Test class for CustomerChannelController
* @Author:Cognizant
* @Date:05/11/2015
* *****************************************************/

@isTest
public class IPM_ProjectResourceTriggerHandlerTest {
    
    public static List<User> userList = new  List<User>();
    public static List<IPM_Project__c> projectList = new List<IPM_Project__c>();
    public static List<IPM_Project__c> ipmProjectList= new List<IPM_Project__c>();
    public static List<IPM_Project_Document__c> projectDocList = new List<IPM_Project_Document__c>();
    public static List<IPM_Project_Document_Section__c> projectDocSectionList  = new List<IPM_Project_Document_Section__c>();
    public static List<IPM_Project_Resource__c> projectResourceList  = new List<IPM_Project_Resource__c>();
    public static List<IPM_Task__c> taskList  = new List<IPM_Task__c>();
    private static String RESOURCE_HISTORY_INSERTED = 'Project Resource History Inserted'; 
    private static String RESOURCE_HISTORY_UPDATED = 'Project Resource History Updated'; 

    /***********************************
    * @Description: Test Data Creation
    * *********************************/
    private static void createTestData()
    {
        Profile p = [SELECT Id FROM Profile WHERE Name='System Administrator' limit 3]; 

        User projectLeader = IPM_TestFactory_Helper.createUser(false);
        projectLeader.ProfileId = p.id;                           


        User projectResource1 =IPM_TestFactory_Helper.createUser(false);
        projectResource1.ProfileId = p.id;

        User projectResource2 = IPM_TestFactory_Helper.createUser(false);
        projectResource2.ProfileId = p.id;      
                                 
        User projectResource3 = IPM_TestFactory_Helper.createUser(false);
        projectResource3.ProfileId = p.id;

        User projectResource4 = IPM_TestFactory_Helper.createUser(false);                                                  
        projectResource4.ProfileId = p.id;
        
        User projectResource5 = IPM_TestFactory_Helper.createUser(false);                                                  
        projectResource5.ProfileId = p.id;
        
        userList.add(projectLeader);
        userList.add(projectResource1);
        userList.add(projectResource2);
        userList.add(projectResource3);
        userList.add(projectResource4);
        userList.add(projectResource5);
        insert userList;
        
        //creating Project Template
        IPM_Project_Template__c projTemplate = IPM_TestFactory_Helper.createIPMProjectTemplate(true);
        
        //Creating Document Template
        IPM_Document_Template__c ipdoctem = IPM_TestFactory_Helper.creteIPMDocumentTemplate(false);
        ipdoctem.IPM_Project_Template__c=projTemplate.ID;
        ipdoctem.IPM_Document_Type__c=IPM_ConstantUtils.CHARTER_GATE;

        insert ipdoctem;

        //Creating master Section
        IPM_Section__c secMast = IPM_TestFactory_Helper.createIPMSection(false);
        secMast.IPM_Document_Template__c=ipdoctem.ID;

        IPM_Project__c project1 = IPM_TestFactory_Helper.createIPMProject(false);
        project1.IPM_PM_Approach__c = IPM_Utils.Internal;
        project1.IPM_Project_Leader__c = projectLeader.Id;
        project1.IPM_GateKeeping_Model__c='Both';
        
        projectList.add(project1);
        insert projectList;

        insert secMast;
        
        IPM_Task__c taskAsociatedRD = new IPM_Task__c(IPM_Type_of_Gate__c = IPM_ConstantUtils.CHARTER_GATE,IPM_Phase__c = 'Ideas',
                                                      IPM_Task_Complexity__c = IPM_ConstantUtils.COMPLEXITY_FULL,Name= '-Identify top 3 strategic channels',
                                                      IPM_Function__c = 'R&D',IPM_Task_Name__c ='Develop and lock Concept1',
                                                      IPM_Project_Template__c = projTemplate.Id,IPM_Section__c = secMast.Id,IPM_Project__c = project1.Id
                                                     );
        
        IPM_Task__c taskAsociatedFinance = new IPM_Task__c(IPM_Type_of_Gate__c = IPM_ConstantUtils.CHARTER_GATE,IPM_Phase__c = 'Ideas',
                                                           IPM_Task_Complexity__c = IPM_ConstantUtils.COMPLEXITY_FULL,Name= 'Identify Finance',
                                                           IPM_Function__c = 'Finance',IPM_Task_Name__c ='Develop and lock Concept2',
                                                           IPM_Project_Template__c = projTemplate.Id,IPM_Section__c = secMast.Id, IPM_Project__c = project1.Id
                                                          );
        
        taskList.add(taskAsociatedRD);
        taskList.add(taskAsociatedFinance);
        insert taskList;

        IPM_Project_Document__c projectDocList1 = IPM_TestFactory_Helper.createIPMProjectDocument(false);
        projectDocList1.Name='TESTAPPROVERCL-Charter1';
        projectDocList1.IPM_Project__c=projectList[0].Id;
        projectDocList1.IPM_Project_Template__c= projTemplate.Id;
        projectDocList1.IPM_Approval_Date__c=System.today();
        projectDocList1.IPM_Approved_Comments__c='Approved';

        projectDocList.add(projectDocList1);
        insert projectDocList;

        // Creationg Project Document Sections
        IPM_Project_Document_Section__c pojDocSection0 = IPM_TestFactory_Helper.createIPMProjectDocumentSection(false);

        pojDocSection0.IPM_Project_Document__c = projectDocList[0].Id;
        pojDocSection0.IPM_Section__c=secMast.Id;
        
        projectDocSectionList.add(pojDocSection0);
        insert projectDocSectionList;
    } 
    
    /***********************************
    * @Description: validate Resource Sharing functionality
    * *********************************/
    public static testmethod void testResourceSharing()
    {
        Test.startTest();
        createTestData();
        Test.stopTest();
        // Add Resources to Project to create Tasks for resources.
        
        IPM_Project_Resource__c ipmProjectResource1 = IPM_TestFactory_Helper.createIPMProjectResource(projectList[0].Id, false);
        ipmProjectResource1.IPM_User__c = userList[1].Id;
        ipmProjectResource1.IPM_Role_Type__c = 'Finance';
        projectResourceList.add(ipmProjectResource1);
        
        IPM_Project_Resource__c ipmProjectResource2 = IPM_TestFactory_Helper.createIPMProjectResource(projectList[0].Id, false);
        ipmProjectResource2.IPM_User__c = userList[2].Id;
        ipmProjectResource2.IPM_Role_Type__c = 'R&D';
        projectResourceList.add(ipmProjectResource2);
        
        insert projectResourceList;
        
        System.runAs(userList[0]){
            update projectList[0];
            
            // Update the User information and assign it to someone else and verify whether tasks are reAllocated.        
            projectResourceList[0].IPM_User__c  = userList[3].Id;
            
            update projectResourceList;
            
            list<IPM_Task__c> tasksList = [SELECT IPM_Assignee__c, IPM_Function__c, IPM_Project__c FROM IPM_Task__c 
                                           WHERE IPM_Project__c = :projectList[0].Id AND IPM_Completed__c != true];
            
            // Validate if the Tasks have been reassigned.
            for(IPM_Task__c task : tasksList ){
                if(task.IPM_Function__c == 'Finance')
                {
                    System.assertEquals(task.IPM_Assignee__c,userList[3].Id, 'IPM_Assignee__c Is Different');
                    System.assertNotEquals(task.IPM_Assignee__c,userList[1].Id);
                }
            }
        }
    }

    //Testmethod to test IPM Project Resource History for Bulk insertion of project resources
    static testMethod void testProjectResourceHistoryForBulkInsertion(){
        //Initialize test data
        createTestData();
        Test.startTest();
        
        // Add Resources to Project to 
        IPM_Project_Resource__c ipmProjectResource1 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_FINANCE,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[1].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource2 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_RD,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[2].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource3 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_CD,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[3].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource4 = new IPM_Project_Resource__c(IPM_Role_Type__c =  IPM_ConstantUtils.FUNCTIONAL_ROLE_BD,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[4].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource5 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_CMI,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[5].Id,IPM_Project_Role_Owner__c = true);
        
        projectResourceList.add(ipmProjectResource1);
        projectResourceList.add(ipmProjectResource2);
        projectResourceList.add(ipmProjectResource3);
        projectResourceList.add(ipmProjectResource4);
        projectResourceList.add(ipmProjectResource5);
        insert projectResourceList;
        
        List<IPM_Project_Resource_History__c> resourceHistoryList = [Select Id,Type__c from IPM_Project_Resource_History__c where IPM_Project__c =: projectList[0].Id];
        System.assertEquals(5, resourceHistoryList.size(), RESOURCE_HISTORY_INSERTED);
        
        for(IPM_Project_Resource_History__c resourceHistory : resourceHistoryList){
            System.assertEquals(IPM_ConstantUtils.HISTORY_INSERTED, resourceHistory.Type__c, RESOURCE_HISTORY_INSERTED);
        }
        Test.stopTest();
    }
    
     //Testmethod to test IPM Project Resource History for Bulk updation of project resources
    static testMethod void testProjectResourceHistoryForBulkUpdation(){
        Integer updateCount =0;
         
        //Initialize test data
        createTestData();
        Test.startTest();
        
        // Add Resources to Project to 
        IPM_Project_Resource__c ipmProjectResource1 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_FINANCE,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[1].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource2 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_RD,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[2].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource3 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_CD,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[3].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource4 = new IPM_Project_Resource__c(IPM_Role_Type__c =  IPM_ConstantUtils.FUNCTIONAL_ROLE_BD,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[4].Id,IPM_Project_Role_Owner__c = true);
        
        IPM_Project_Resource__c ipmProjectResource5 = new IPM_Project_Resource__c(IPM_Role_Type__c = IPM_ConstantUtils.FUNCTIONAL_ROLE_CMI,IPM_Project__c = projectList[0].Id,
                                                                                  IPM_User__c = userList[5].Id,IPM_Project_Role_Owner__c = true);
        
        projectResourceList.add(ipmProjectResource1);
        projectResourceList.add(ipmProjectResource2);
        projectResourceList.add(ipmProjectResource3);
        projectResourceList.add(ipmProjectResource4);
        projectResourceList.add(ipmProjectResource5);
        insert projectResourceList;
        
        List<IPM_Project_Resource_History__c> resourceHistoryList = [Select Id from IPM_Project_Resource_History__c where IPM_Project__c =: projectList[0].Id];
        System.assertEquals(5, resourceHistoryList.size(), RESOURCE_HISTORY_INSERTED);
        
        List<IPM_Project_Resource__c> lstResourceToUpdate = new List<IPM_Project_Resource__c>();
        for(IPM_Project_Resource__c eachResource : projectResourceList){
                eachResource.IPM_Project_Role_Owner__c = false;
                lstResourceToUpdate.add(eachResource);
        }
        update lstResourceToUpdate;
        
        resourceHistoryList = [Select Id,Type__c from IPM_Project_Resource_History__c where IPM_Project__c =: projectList[0].Id];
        
        for(IPM_Project_Resource_History__c resourceHistory : resourceHistoryList){
            if(IPM_ConstantUtils.HISTORY_UPDATED == resourceHistory.Type__c ){
                updateCount++;
            }
        }
        System.assertEquals(5, updateCount, RESOURCE_HISTORY_UPDATED);
        Test.stopTest();
    }
    
    /***********************************
    * @Description: validate Resource DML Operation and change in project sync status
    * *********************************/
    public static testmethod void testResourceInsertionUpdationDeletion(){
        // Current running in Sharing mode with old sharing logic. Using System admin profile for time being.
        User globalUser = IPM_TestFactory_Helper.createUserAdmin(false);
        globalUser.email = 'globalUser@unilever.test.com';
         
        User regionalUser = IPM_TestFactory_Helper.createUserAdmin(false);
        regionalUser.email = 'regionalUser@unilever.test.com';
        
        User localUser = IPM_TestFactory_Helper.createUserAdmin(false);
        localUser.email = 'localUser@unilever.test.com';
        
        userList = new List<User>{globalUser,regionalUser,localUser};
        insert userList;    
        List<IPM_Assessment__c> finalAssessmentList = new List<IPM_Assessment__c>();
        List<IPM_Company_Card__c> companyCardList ;
        
        
        System.runAs(userList[0]) {
	        // Create Company Card information 
	        IPM_Company_Card__c globalCompanyCard = IPM_TestFactory_Helper.createGlobalCompanyCard(false);
	        globalCompanyCard.IPM_TxtGeographical_Scope__c = 'TEST123';
	        globalCompanyCard.IPM_Business_Partner__c = NULL;
	        IPM_Company_Card__c regionalCompanyCard = IPM_TestFactory_Helper.createRegionalCompanyCard(false);
	        regionalCompanyCard.IPM_TxtGeographical_Scope__c = 'TEST123';
	        regionalCompanyCard.IPM_Business_Partner__c = NULL;
	        IPM_Company_Card__c localCompanyCard = IPM_TestFactory_Helper.createLocalCompanyCard(false);
	        localCompanyCard.IPM_TxtGeographical_Scope__c = 'TEST123';
	        localCompanyCard.IPM_Business_Partner__c = NULL;
	        
	        companyCardList = new List<IPM_Company_Card__c>{globalCompanyCard,regionalCompanyCard,localCompanyCard};
	        insert companyCardList;
        }
        Test.startTest();
        System.runAs(userList[0]) {
	        //  Create User profile Information
	        Map<String,List<Object>> IPMUserProfileMap =  new Map<String,List<Object>>{
	        'IPM_Business_Partner__c' => new List<Object>{false,false,false},
	        'IPM_Category__c' => new List<Object>{'','',''},
	        'IPM_Central_Team__c' => new List<Object>{false,false,false},
	        'IPM_Finance_Member__c' => new List<Object>{false,false,false},
	        'IPM_GateKeeper__c' => new List<Object>{false,false,false},
	        'IPM_Project_Leader__c' => new List<Object>{false,false,false},
	        'IPM_User_Category__c' => new List<Object>{'HHC','HHC','HHC'},
	        'IPM_User_Function__c' => new List<Object>{'Project Leader','Project Leader','Project Leader'},
	        'IPM_User_Role__c' => new List<Object>{'MO','MO','MO'},
	        'IPM_Work_Level__c' => new List<Object>{'WL1','WL2','WL3'},
	        'IPM_Company_Card__c' => new List<Object>{companyCardList[0].Id,companyCardList[1].Id,companyCardList[2].Id},
	        'IPM_User__c' => new List<Object>{userList[0].Id,userList[1].Id,userList[2].Id}
	        };
	
	        List<IPM_User_Profile__c> userProfileList = (List<IPM_User_Profile__c>)IPM_TestFactory.createSObjectList('IPM_User_Profile__c',IPMUserProfileMap,true);
	        List<String> projectNames = new List<String>();
        
            // Get master data for the project including Templates,Documents,Section,Tasks and Milestones.
            IPM_TestFactory_Helper.getProjectMasterData();
            
            // Create project for assignment.
            ipmProjectList = IPM_TestFactory_Helper.createOriginalProjectList(false, 10);
            for(IPM_Project__c project : ipmProjectList) {
                project.IPM_Company_Card__c = companyCardList[0].Id;
                project.IPM_Project_Gatekeeper__c = UserInfo.getUserId();
                project.IPM_Project_Leader__c = userList[0].Id;
                project.Success_Timestamp_EcoDesign__c = System.now().addMinutes(15);
                project.IPM_SourceProjectType__c = 'Original';
                project.First_Sync_To_EcoDesign__c = true;
                projectNames.add(project.IPM_Project_Name__c); 
            }
        
            insert ipmProjectList;
            
            IPM_Project_Resource__c ipmProjectResource1 = IPM_TestFactory_Helper.createIPMProjectResource(ipmProjectList[1].Id, false);
            ipmProjectResource1.IPM_User__c = userList[1].Id;
            ipmProjectResource1.IPM_Role_Type__c = 'Finance';
            ipmProjectResource1.IPM_Member_Email__c = 'abc@gmail.com';
            projectResourceList.add(ipmProjectResource1);
            insert ipmProjectResource1;
            
            IPM_Project_Resource__c ipmProjectResource2 = IPM_TestFactory_Helper.createIPMProjectResource(ipmProjectList[1].Id, false);
            ipmProjectResource2.IPM_User__c = userList[2].Id;
            ipmProjectResource2.IPM_Role_Type__c = 'R&D';
            ipmProjectResource2.IPM_Member_Email__c = 'xyz@gmail.com';
            projectResourceList.add(ipmProjectResource2);
            insert ipmProjectResource2;
            List <IPM_Project__c> projList1 = [Select id,EcoDesign_Sync_Status__c from IPM_Project__c where Id =: ipmProjectList[1].Id];
            System.assertEquals('Ready', projList1[0].EcoDesign_Sync_Status__c, 'EcoDesign_Sync_Status__c Is Different');
            
            List<IPM_Project_Resource__c> ipmProjectResourceList = [Select id,IPM_User__c,IPM_Role_Type__c,IPM_Member_Email__c from IPM_Project_Resource__c limit 1000];
            for(IPM_Project_Resource__c projRes : ipmProjectResourceList){
                projRes.IPM_Member_Email__c = 'newemail@gmail.com';
            }

            Update ipmProjectResourceList;
            List <IPM_Project__c> projList2 = [Select id,EcoDesign_Sync_Status__c from IPM_Project__c where Id =: ipmProjectList[1].Id];
            System.assertEquals('Ready', projList2[0].EcoDesign_Sync_Status__c, 'Status Is Different');
            
            delete ipmProjectResourceList[0];
            List <IPM_Project__c> projList3 = [Select id,EcoDesign_Sync_Status__c from IPM_Project__c where Id =: ipmProjectList[1].Id];
            System.assertEquals('Ready', projList3[0].EcoDesign_Sync_Status__c, 'Status Is Different');
        }
        
        Test.stopTest();
    }
}