/*****************************************************************************************************************************
@Author :Cognizant
@name : AF_BonusMatrix_BonusApprover_Test
@CreateDate : 09/11/2016
@Description : This is a Test class for AF_BonusMatrix_BonusApproverController
@Version : 1.0
@reference : none
****************************************************************************************************************************/

@isTest 
public class AF_BonusMatrix_BonusApprover_Test
{
    static user stdUserForResourceAllocation; 
    
    /***********************************************************************************
    *  @Description: this method will the test data
    *  @name : AF_AfterUpdateBonusResHandler
    *  @param : none.
    *  @return: none.
    *************************************************************************************/
    Static testMethod void AF_BonusMatrix_BonusApprover_Test()
    {
        Test.startTest();
        stdUserForResourceAllocation=AF_TestFactory_Helper.createUserAdmin(true);
        User u=[SELECT id FROM user WHERE id=:stdUserForResourceAllocation.id LIMIT 1];
        System.runAs(u)
        { 
            //Insert Account
            List<Account> acc=AF_TestFactory_Helper.insertAFaccList(1,true);
            List<Account> acctQuery = [SELECT id FROM account LIMIT 1];
            System.Assert(acctQuery[0].Id != null, AF_TestFactory_Helper.ACCOUNT_RECORD);
            //Insert category
            List<AF_Category_Brand__c> cb = AF_TestFactory_Helper.insertAFCBList(1,true);
            List<AF_Category_Brand__c> categoryQuery = [SELECT id FROM AF_Category_Brand__c where RecordTypeId=:AF_TestFactory_Helper.AF_CATEGORY_RECTYPE and Id IN:cb LIMIT 1];
            System.Assert(categoryQuery[0].Id != null, AF_TestFactory_Helper.CATEGORY_RECORD);
            //Insert Brand
            List<AF_Category_Brand__c> AFCategoryBrand = AF_TestFactory_Helper.insertBrand(1,true);
            List<AF_Category_Brand__c> brandQuery = [SELECT AF_Category_Brands__c FROM AF_Category_Brand__c where RecordTypeId=:AF_TestFactory_Helper.AF_BRAND_RECTYPE and Id IN:AFCategoryBrand LIMIT 1];
            System.assertEquals(brandQuery[0].AF_Category_Brands__c,categoryQuery[0].Id, AF_TestFactory_Helper.BRAND_RECORD);
            //Insert BrandEstimate
            List<AF_Brand_Estimate__c> BrandEst = AF_TestFactory_Helper.insertAFBrandEstList(1,true);
            List<AF_Brand_Estimate__c> BrandEstQuery =[SELECT Brand__c FROM AF_Brand_Estimate__c where Id IN:BrandEst LIMIT 1]; 
            System.assertEquals(BrandEstQuery[0].Brand__c, brandQuery[0].id,AF_TestFactory_Helper.BRANDESTIMATE_RECORD);
            //Insert Agency Entity
            List<AF_Entity__c> AFEntity = AF_TestFactory_Helper.insertAgencyEntityList(1,true);
            System.assertEquals(AFEntity[0].AF_Agency__c, acc[0].id,AF_TestFactory_Helper.AGENCY_ENTITY);
            List<AF_Entity__c> AFEntityQuery = [SELECT AF_Agency__c FROM AF_Entity__c where RecordTypeId=:AF_TestFactory_Helper.AF_AGENCY_ENTITY_RECTYPE and Id IN:AFEntity LIMIT 1];
            System.assertEquals(AFEntityQuery[0].AF_Agency__c, acc[0].id,AF_TestFactory_Helper.AGENCY_ENTITY);
            //Insert Unilever Entity
            List<AF_Entity__c> AFUnileverEntity = AF_TestFactory_Helper.insertUnileverEntityListRec(1,true);
            List<AF_Entity__c> AFUnileverEntityQuery = [SELECT Id FROM AF_Entity__c where RecordTypeId=:AF_TestFactory_Helper.AF_UNILIVER_ENTITY_RECTYPE and Id IN:AFUnileverEntity LIMIT 1];
            System.Assert(AFUnileverEntityQuery[0].Id != null,AF_TestFactory_Helper.UNILEVER_ENTITY);
            //Insert Currency
            List<AF_Currency__c> AFCurrency = AF_TestFactory_Helper.insertAFcurrencyList(1,true);
            List<AF_Currency__c> AFCurrencyQuery = [SELECT Id FROM AF_Currency__c where Id IN:AFCurrency LIMIT 1];
            System.Assert(AFCurrencyQuery[0].Id != null, AF_TestFactory_Helper.CURRENCY_RECORD);
            //Insert Dummyuser Custom settings
            List<DummyUser__c> duuser = AF_TestFactory_Helper.createDummyUser(true);
            System.Assert(duuser[0].Id != null, AF_TestFactory_Helper.ACCOUNT_RECORD);
            //Insert Bonus Summary
            List<AF_Bonus_Summary__c> AFBonusSummary = AF_TestFactory_Helper.insertBonusSummary(1,true);
            List<AF_Bonus_Summary__c> AFBonusSummaryQuery = [Select AF_Agency__c from AF_Bonus_Summary__c where Id IN:AFBonusSummary LIMIT 1];
            System.assertEquals(AFBonusSummaryQuery[0].AF_Agency__c,acc[0].id,AF_TestFactory_Helper.BONUSSUMMARY_RECORD);
            //Insert Bonus Threshold
            List<AF_Bonus_Threshold__c> BonusThreshold =  AF_TestFactory_Helper.insertBonusThreshhold(1,true);
            List<AF_Bonus_Threshold__c> BonusThresholdQuery = [Select Agency_Name__c from AF_Bonus_Threshold__c where Id IN:BonusThreshold LIMIT 1];
            System.assertEquals(BonusThresholdQuery[0].Agency_Name__c,acc[0].id,AF_TestFactory_Helper.BONUSTHERSHOLD_RECORD);
            //Insert Bonus Results 
            List<AF_Bonus_Results__c> AFBonusRes = AF_TestFactory_Helper.insertBonusResults(1,true);
            List<AF_Bonus_Results__c> AFBonusResQuery = [Select AF_Bonus_Thresholds__c from AF_Bonus_Results__c where Id IN:AFBonusRes LIMIT 1];
            System.assertEquals(AFBonusResQuery[0].AF_Bonus_Thresholds__c,BonusThresholdQuery[0].id,AF_TestFactory_Helper.BONUSRESULT_RECORD);
            //Insert Bonus Matrix
            List<AF_Bonus_Matrix__c> AFBonusMat = AF_TestFactory_Helper.insertBonusMatrix(1,true);
            List<AF_Bonus_Matrix__c> AFBonusMatQuery = [Select AF_Bonus_Results__c from AF_Bonus_Matrix__c where Id IN:AFBonusMat LIMIT 1];
            System.assertEquals(AFBonusMatQuery[0].AF_Bonus_Results__c,AFBonusResQuery[0].id,AF_TestFactory_Helper.BONUSMATRIX_RECORD);
            List<AF_Bonus_Matrix__c> AFBonusMat1 = AF_TestFactory_Helper.insertBonusMatrix(1,false);
            List<AF_Bonus_Matrix__c> AFBonusMatQuery1 = [Select AF_Bonus_Results__c from AF_Bonus_Matrix__c];
            AF_AfterUpdateBonusResHandler.AF_AfterUpdHandler(AFBonusRes);
       
       
            AF_Bonus_Summary__c objSum = [Select Id,AF_Status__c,AF_Agency__c from AF_Bonus_Summary__c where Id IN:AFBonusSummary LIMIT 1];
            
            // Create instance for wrapper class
            AF_BonusMatrix_BonusApproverController.BonusMatrixWrapper objWrapper = new AF_BonusMatrix_BonusApproverController.BonusMatrixWrapper(objSum);
            AF_BonusMatrix_BonusApproverController obj_AF_BonusMatrix_BonusApprover= new AF_BonusMatrix_BonusApproverController();
            
            //Make record selection false
            obj_AF_BonusMatrix_BonusApprover.checkAllApprove();
            obj_AF_BonusMatrix_BonusApprover.checkAllReject();
            obj_AF_BonusMatrix_BonusApprover.saveApprovals();
            
            // Select records for approval and rejection
            obj_AF_BonusMatrix_BonusApprover.checkHeaderA = true;
            obj_AF_BonusMatrix_BonusApprover.checkHeaderR = true;
            obj_AF_BonusMatrix_BonusApprover.checkAllApprove();
            obj_AF_BonusMatrix_BonusApprover.checkAllReject();
            obj_AF_BonusMatrix_BonusApprover.saveApprovals();
            
            // Select records for approval
            obj_AF_BonusMatrix_BonusApprover.checkHeaderA = true;
            obj_AF_BonusMatrix_BonusApprover.checkHeaderR = false;
            obj_AF_BonusMatrix_BonusApprover.checkAllApprove();
            obj_AF_BonusMatrix_BonusApprover.checkAllReject();
            obj_AF_BonusMatrix_BonusApprover.saveApprovals();
            String StatusApprove = [Select Id,AF_Status__c,AF_Agency__c from AF_Bonus_Summary__c where Id IN:AFBonusSummary LIMIT 1].AF_Status__c;
            system.assertequals('With CMCO',StatusApprove);
            
            // Select records for rejection
            obj_AF_BonusMatrix_BonusApprover.checkHeaderA = false;
            obj_AF_BonusMatrix_BonusApprover.checkHeaderR = true;
            obj_AF_BonusMatrix_BonusApprover.checkAllApprove();
            obj_AF_BonusMatrix_BonusApprover.checkAllReject();
            obj_AF_BonusMatrix_BonusApprover.saveApprovals();
            String StatusReject = [Select Id,AF_Status__c,AF_Agency__c from AF_Bonus_Summary__c where Id IN:AFBonusSummary LIMIT 1].AF_Status__c;
            system.assertequals('W/Cat Finance',StatusReject);
        
        }    
        Test.stopTest();
    }  
}