/*****************************************************************************************************************************
   @Author :Cognizant
   @name : AF_DocumentListCompController
   @CreateDate : 5/6/2014
   @Description : This is a controller class for Matrix Pages, 
   @			  this is used to enter documents upload.
   @Version : 1.0
   @reference : none
  ****************************************************************************************************************************/
public with sharing class AF_DocumentListCompController{
	public String ParentRecordId {get;set;}
	public String ParentObjectType {get;set;}
	public Boolean IsDisplayed {get;set;}
	public string IsViewAll{get;set;}
	public boolean isAgencyFlag{get;set;} //to check wether logged in user is partner user or not
	public List<Attachment> DocumentsList {get;set;}
	public Attachment DocumentRecord {get;set;}
	public List<CustomException> ErrorCollection {get;set;}
	public Boolean IsViewAllLink{get;set;}
	public String docId{get;set;}
	public AF_Brand_Estimate__c brandEstRecord{get;set;}
	public AF_OOPS_Actual__c oopsRecord{get;set;}
	public AF_Bonus_Summary__c bonusRecord{get;set;}
	public Boolean status{get;set;}
	/**********************************************************************
*  @Description: Contructor method
*  @name : AF_DocumentListCompController
*  @param : none
*  @return : none
*************************************************************************/ 	
	public AF_DocumentListCompController()
	{
		User userObj = new User();
		status = false;
		brandEstRecord = new AF_Brand_Estimate__c();
		userObj = [select Id,Contact.Account.Name, AF_Category__c, AF_Brand__c,Profile.Name, AF_Agency_Fees_User_Type__c from User where Id =:UserInfo.getUserId()];
		if(userObj.AF_Agency_Fees_User_Type__c=='Agency'){
			isAgencyFlag=true;
		}              
		if(ApexPages.currentPage().getParameters().get('id') != null)
		{
			DocumentRecord= new Attachment();
			ErrorCollection = new List<CustomException>();
		}
	}
	/***********************************************************************************
*  @Description: this method is used to get and display the documents in the page
*  @name : getAttachmentList
*  @param : none
*  @return: List of Attachment.
*************************************************************************************/
	public List<Attachment> getAttachmentList()
	{
		List<Attachment> docs = new List<Attachment>();
		if(IsViewAll=='true'){
			docs = [select name,description,contenttype,Owner.name,LastModifiedDate from attachment where ParentId =:ParentRecordId ORDER BY CreatedDate DESC];
			if(docs.size() > 0){IsDisplayed = true;}
			IsViewAllLink = false;
		}
		else{
			docs = [select name,description,contenttype,Owner.name,LastModifiedDate from attachment where ParentId =:ParentRecordId ORDER BY CreatedDate DESC Limit 5];
			IsViewAllLink = true;
		}
		if(ParentRecordId.startsWith(System.Label.AF_BrandEstimateId)){
			brandEstRecord = [select AF_Status_Base_Fees__c from AF_Brand_Estimate__c where id=:ParentRecordId];
			if(brandEstRecord.AF_Status_Base_Fees__c == 'Ready for PO'){
				status = true;
			}
		}
		else if(ParentRecordId.startsWith(System.Label.AF_oopsActualId)){
			oopsRecord = [select AF_Status__c from AF_OOPS_Actual__c where id=:ParentRecordId];
			if(oopsRecord.AF_Status__c == 'Ready for PO'){
				status = true;
			}
		}
		else if(ParentRecordId.startsWith(System.Label.AF_BonusSummaryId)){
			bonusRecord = [select AF_Status__c from AF_Bonus_Summary__c where id=:ParentRecordId];
			if(bonusRecord.AF_Status__c == 'Ready for PO'){
				status = true;
			}
		}
		return docs ;
	}
	/***********************************************************************************
*  @Description: this method is used to delete the uploaded documents
*  @name : delDocument
*  @param : none
*  @return: none.
*************************************************************************************/
	public void delDocument(){
		if(docId != ''){
			Attachment docDel = new Attachment();
			docDel = [select Id from Attachment where Id=:docId and ParentId =:ParentRecordId];
			delete docDel;
		}
	}
	public class CustomException extends Exception {}    
}